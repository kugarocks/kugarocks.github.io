[{"content":"KEYBOARD CAT ROCKS 您的瀏覽器不支持嵌入式視頻，但別擔心，您可以下載它並用您喜歡的視頻播放器觀看！ ","date":"2024-09-30","id":0,"permalink":"/zh-hk/toys/readme/","summary":"\u003ch2 id=\"keyboard-cat-rocks\"\u003eKEYBOARD CAT ROCKS\u003c/h2\u003e\n\u003cvideo controls preload=\"auto\" width=\"100%\"  poster=\"/images/misc/keyboard-cat-poster.jpg\" playsinline class=\"html-video\"\u003e\n      \u003csource src=\"/videos/misc/keyboard-cat-original.mp4\" type=\"video/mp4\"\u003e\n    \u003cspan\u003e您的瀏覽器不支持嵌入式視頻，但別擔心，您可以\u003ca href=\"/videos/misc/keyboard-cat-original.mp4\"\u003e下載它\u003c/a\u003e並用您喜歡的視頻播放器觀看！\u003c/span\u003e\n  \u003c/video\u003e","tags":[],"title":"README"},{"content":"WHAT DO U GOT ","date":"2024-08-24","id":1,"permalink":"/zh-hk/linux/readme/","summary":"\u003ch2 id=\"what-do-u-got\"\u003eWHAT DO U GOT\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/win-mac-linux_hu10690778400494544015.webp\"\r\n  width=\"799\"\r\n  height=\"489\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"win-mac-linux\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e","tags":[],"title":"README"},{"content":"我可以整好，信我啦，我係一個工程師。\n","date":"2024-07-21","id":2,"permalink":"/zh-hk/tech/readme/","summary":"\u003cp\u003e我可以整好，信我啦，我係一個工程師。\u003c/p\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/meme/i-can-fix-it_hu2625081424092851265.webp\"\r\n  width=\"484\"\r\n  height=\"326\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"i-can-fix-it\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e","tags":[],"title":"README"},{"content":"簡介 偶然間發現 minions.wiki 嘅域名仲未註冊，於是就整咗一個乾淨純粹嘅小黃人百科。 不過入面嘅小黃人仲未完整，有空嘅時候我會繼續完善，如果你有興趣，歡迎提交 PR。\nMinions Wiki\r小黃人百科\nGithub Repository\rkugarocks/minions-wiki\nHUGO 項目使用 Hugo 同 hugo-cards 主題。 做嘅時候發現 hugo-cards 唔支持 Profile Sidebar，喺移動端嘅樣式都唔夠理想，所以自己改咗一下。 後來提交咗 PR，而家已經合併咗， 呢個都係我第一個喺 GitHub 上合併嘅 PR。\nCursor 入面嘅翻譯係使用 Cursor 完成嘅，不得不講其中嘅港式粵語翻譯仲幾有意思嘅。\nDespicable Me Wiki 下面係另外一個關於小黃人電影嘅百科網站， 不過佢唔支持中文，有廣告，界面仲醜醜哋。\nDespicable Me Wiki\rdespicableme.fandom.com\n","date":"2024-09-30","id":3,"permalink":"/zh-hk/toys/minions-wiki/","summary":"\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cp\u003e偶然間發現 \u003ccode\u003eminions.wiki\u003c/code\u003e 嘅域名仲未註冊，於是就整咗一個乾淨純粹嘅小黃人百科。\n不過入面嘅小黃人仲未完整，有空嘅時候我會繼續完善，如果你有興趣，歡迎提交 PR。\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://minions.wiki\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eMinions Wiki\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003e小黃人百科\u003c/p\u003e","tags":[],"title":"小黃人百科"},{"content":"Linux Torvalds 呢個名嘅發音要點讀呢，幾好奇，搵咗一下，仲真係有人搞咗個集合，救命啊哈哈哈。\n您的瀏覽器不支持嵌入式視頻，但別擔心，您可以下載它並用您喜歡的視頻播放器觀看！ Linux 定義 根據維基百科嘅資料，Linux 既係一個 Unix-like 核心， 又係一個基於 Linux 核心嘅開源 Unix-like 操作系統嘅統稱。 Linux 核心由 Linus Torvalds 喺 1991 年 9 月 17 日首次發佈， 佢通常會被打包成一個發行版本，其中包括核心以及好多由 GNU 項目提供嘅系統軟件同埋庫。\nLinux 歷史 1990 年，Linux Torvalds 喺 Helsinki 大學上咗一門 Unix 課程。 1991 年，佢對操作系統產生咗興趣，但係課本入面嘅 Minix 系統（Minimal Unix-like 操作系統）嘅許可證只能用於教學。 於是佢自己寫咗一個操作系統核心，呢個就係 Linux 核心嘅第一版。\n後來 Linux Torvalds 把核心發佈到 Internet 上徵求大家嘅意見。 就咁樣，一個集合全球智慧嘅開源操作系統從此誕生咗，仲配套咗一系列由 GNU 組織開發嘅系統軟件同埋庫。\nLinux 名字由來 Torvalds 一開始想把操作系統命名為 Freax，呢個係 free、freak、x（Unix）嘅混成詞。 起初佢都有諗過用 Linux 呢個名，但覺得太自負，所以冇用。 佢嘅同事 Ari Lemmke，係當時 FTP 嘅管理員之一，覺得 Freax 唔好，未經 Torvalds 同意嘅情況下，將項目命名為 Linux。 後來，Torvalds 都同意咗 Linux 呢個名。\nLinux 吉祥物 Tux Torvalds 提到佢以前喺 Canberra 動物園俾一隻企鵝咬過。 佢覺得一隻食飽後坐住嘅稍微有啲肥嘅企鵝非常適合作為 Linux 嘅吉祥物。 第一個稱呢隻企鵝為 Tux 嘅人係 James Hughes，佢話呢個代表 (T)orvalds (u)ni(x)。 另外 Tux 亦係 Tuxedo (燕尾服)嘅縮寫，燕尾服同企鵝嘅外觀相似。\n","date":"2024-08-24","id":4,"permalink":"/zh-hk/linux/say-my-name/","summary":"\u003ch2 id=\"linux-torvalds\"\u003eLinux Torvalds\u003c/h2\u003e\n\u003cp\u003e呢個名嘅發音要點讀呢，幾好奇，搵咗一下，仲真係有人搞咗個集合，救命啊哈哈哈。\u003c/p\u003e\n\u003cvideo controls preload=\"auto\" width=\"100%\"  poster=\"/images/misc/say-my-name-poster.jpg\" playsinline class=\"html-video\"\u003e\n      \u003csource src=\"/videos/misc/say-my-name.mp4\" type=\"video/mp4\"\u003e\n    \u003cspan\u003e您的瀏覽器不支持嵌入式視頻，但別擔心，您可以\u003ca href=\"/videos/misc/say-my-name.mp4\"\u003e下載它\u003c/a\u003e並用您喜歡的視頻播放器觀看！\u003c/span\u003e\n  \u003c/video\u003e\n\u003ch2 id=\"linux-定義\"\u003eLinux 定義\u003c/h2\u003e\n\u003cp\u003e根據維基百科嘅資料，Linux 既係一個 Unix-like 核心，\n又係一個基於 Linux 核心嘅開源 Unix-like 操作系統嘅統稱。\nLinux 核心由 Linus Torvalds 喺 1991 年 9 月 17 日首次發佈，\n佢通常會被打包成一個發行版本，其中包括核心以及好多由 GNU 項目提供嘅系統軟件同埋庫。\u003c/p\u003e","tags":[],"title":"第一章：Say My Name"},{"content":"Keyboard System Preferences\nKey Repeat: Fast Delay Until Repeat: Short Modifier Keys: Caps Lock -\u0026gt; Escape defaults write -g ApplePressAndHoldEnabled -bool false\rShortcuts\nApp Shortcuts, + All Applications, Zoom, CMD+M All Applications, Minimize, CMD+H Chrome, Bookmark This Tab/Tab\u0026hellip;, CMD+L Chrome, Open Location\u0026hellip;, CMD+D Chrome, Downloads, SHIFT+CMD+D Input Sources Select the previous input source, CMD+E Spotlight Show Spotlight search: OPTION+SPACE Install Alfred iTerm2 iTerm2\rTerminal emulator for macOS.\nPreferences config\nSearch -\u0026gt; Dim inactive split panes Search -\u0026gt; Global key bindings, + Select Split Pane Above, CMD+I Select Split Pane on Left, CMD+J Select Split Pane Below, CMD+K Select Split Pane on Right, CMD+L Oh My Zsh Installation command\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34;\rCustom Alias:\n# custom aliases alias zsh=\u0026#39;vim ~/.zshrc\u0026#39; alias q=\u0026#39;exit\u0026#39; alias s=\u0026#39;sudo\u0026#39; alias v=\u0026#39;vim\u0026#39; alias g=\u0026#39;git\u0026#39; alias ga=\u0026#39;git add\u0026#39; alias gc=\u0026#39;git checkout\u0026#39; alias gs=\u0026#39;git status\u0026#39; alias gd=\u0026#39;git diff\u0026#39; alias sv=\u0026#39;sudo vim\u0026#39; alias sc=\u0026#34;source ~/.zshrc\u0026#34; alias ..=\u0026#39;cd ..\u0026#39; alias cls=\u0026#39;clear\u0026#39; alias nano=\u0026#34;vim\u0026#34; alias tailf=\u0026#34;tail -f\u0026#34; alias lf=\u0026#39;ll -p | grep -v /\u0026#39; alias ldir=\u0026#39;ls -ld -- */\u0026#39;\rHSTR HSTR\rEasily view, navigate and search your command history.\nbrew install hstr\rConfigure HSTR just by running:\nhstr --show-zsh-configuration \u0026gt;\u0026gt; ~/.zshrc\rGit Config Replace name, email, GitHub user.\n[user] name = kuga email = kuga@cestbon.mbp [alias] pr = pull --rebase br = branch -avv ci = commit co = checkout cm = checkout master mg = merge st = status l = log --color --graph --pretty=format:\u0026#39;%Cred%h%Creset -%C(bold yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --abbrev-commit accept-ours = \u0026#34;!f() { files=\\\u0026#34;$@\\\u0026#34;; [ -z $files ] \u0026amp;\u0026amp; files=\u0026#39;.\u0026#39;; git checkout --ours -- $files; git add -u $files; }; f\u0026#34; accept-theirs = \u0026#34;!f() { files=\\\u0026#34;$@\\\u0026#34;; [ -z $files ] \u0026amp;\u0026amp; files=\u0026#39;.\u0026#39;; git checkout --theirs -- $files; git add -u $files; }; f\u0026#34; diffeol = diff --ignore-space-at-eol [core] excludesfile = /Users/hairdresser/.gitignore [color] branch = auto diff = auto status = auto [GitHub] user = kuga [credential] helper = osxkeychain [pull] rebase = false\rKubernetes kubectl kubectl\rThe Kubernetes command-line tool.\nbrew install kubectl\rkubectx kubectx\rSwitch between contexts \u0026amp; namespaces.\nbrew install kubectx\rAdd the following to your .zshrc file:\n# kubectx alias kc=\u0026#34;kubectx\u0026#34; alias kn=\u0026#34;kubens\u0026#34; KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6)\rkube-ps1 kube-ps1\rKubernetes prompt for bash and zsh.\nbrew install kube-ps1\rAdd the following to your .zshrc file:\n# kube-ps1 # https://github.com/jonmosco/kube-ps1 # todo change source path source /usr/local/Cellar/kube-ps1/0.7.0/share/kube-ps1.sh PROMPT=\u0026#39;$(kube_ps1)\u0026#39;$PROMPT KUBE_PS1_PREFIX=\u0026#34;[\u0026#34; KUBE_PS1_SUFFIX=\u0026#34;]\u0026#34; KUBE_PS1_SYMBOL_ENABLE=false KUBE_PS1_CTX_COLOR=\u0026#34;83\u0026#34; KUBE_PS1_NS_COLOR=\u0026#34;201\u0026#34;\rkubectl-aliases kubectl-aliases\rConvenient shell aliases for kubectl.\nDownload .kubectl_aliases file \u0026amp; Add the following to your .zshrc file:\n# load kubectl aliases file [ -f ~/.kubectl_aliases ] \u0026amp;\u0026amp; source ~/.kubectl_aliases # Print the full command before running it function kubectl() { echo \u0026#34;+ kubectl $@\u0026#34;\u0026gt;\u0026amp;2; command kubectl $@; }\r","date":"2024-07-24","id":5,"permalink":"/zh-hk/tech/dev-env/macos/","summary":"\u003ch2 id=\"keyboard\"\u003eKeyboard\u003c/h2\u003e\n\u003cp\u003eSystem Preferences\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKey Repeat: Fast\u003c/li\u003e\n\u003cli\u003eDelay Until Repeat: Short\u003c/li\u003e\n\u003cli\u003eModifier Keys: Caps Lock -\u0026gt; Escape\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edefaults write -g ApplePressAndHoldEnabled -bool false\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eShortcuts\u003c/p\u003e","tags":[],"title":"MacOS"},{"content":"簡介 有一次我想把一段文本從一台電腦發到另一台電腦上，但發現如此簡單的需求卻冇直接了當嘅工具。 問咗一下 ChatGPT，總結咗一下現有嘅工具，發現都唔太好用。\n方法 缺點 Airdrop 創建文件同搜索設備 iMessage 登錄蘋果賬號 通用剪貼板 登錄蘋果賬號 微信/QQ 登錄兩個賬號 電郵 乜年代啦 咁不如自己寫一個聊天室，訪問一下網頁直接發送就得啦，用 Cursor 開發仲好開心。 聊天室對移動端都做咗啲簡單嘅適配，服務部署喺阿里雲廣州節點，訪問速度嘎嘎快。\nMinichat\r迷你聊天室\nGithub Repository\rkugarocks/minichat\n主題 服務啟動嘅時候可以指定主題，默認係小黃人。\ngo run main.go -theme onepiece\r小黃人 名稱 頭像 Stuart, Kevin Bob, Dave Jerry, Phil Tim, Mark 海賊王 名稱 頭像 Luffy, Zoro Nami, Sanji Robin, Franky Chopper, Usopp Brook 提示詞 提示詞都好簡單，只要定義好使用嘅技術棧，根據自己嘅需求一步步修改就得啦。 不過下面嘅提示詞只係好少一部分，因為成個過程仲包括大量嘅細節同優化，呢度就唔展開講啦。\n* 實現一個簡單嘅實時聊天室 * 服務端使用 Golang、Websocket * 客戶端使用網頁\r* 網頁左側顯示在線用戶列表 * 當網頁打開時自動生成用戶名 * 用戶名隨機從復仇者聯盟嘅角色中選取 * 唔可以選取重複嘅用戶名 * 用戶名嘅總數為 20 個\r* 網頁右側下方係消息輸入框 * 消息輸入框支持多行輸入 * 消息輸入框可以拖動調整大小\r* 聊天消息窗口支持多行顯示 * 聊天內容用邊框包圍 * 用戶名放喺邊框嘅外面，上方\r* 消息邊框嘅右上方添加複製按鈕 * 點擊複製按鈕後文字改為已複製 * 1 秒之後恢復為原來嘅文字\r* 消息輸入框同聊天消息窗口用一條線分隔 * 可以上下拖動呢條線嚟改變兩個窗口大小 * 頁面嘅風格改成終端形式\r* 用戶名嘅顏色用綠色 * 其他顏色用啲黑白灰\r","date":"2024-09-30","id":6,"permalink":"/zh-hk/toys/minichat/","summary":"\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cp\u003e有一次我想把一段文本從一台電腦發到另一台電腦上，但發現如此簡單的需求卻冇直接了當嘅工具。\n問咗一下 ChatGPT，總結咗一下現有嘅工具，發現都唔太好用。\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e方法\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e缺點\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eAirdrop\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e創建文件同搜索設備\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eiMessage\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e登錄蘋果賬號\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e通用剪貼板\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e登錄蘋果賬號\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e微信/QQ\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e登錄兩個賬號\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e電郵\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e乜年代啦\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e咁不如自己寫一個聊天室，訪問一下網頁直接發送就得啦，用 Cursor 開發仲好開心。\n聊天室對移動端都做咗啲簡單嘅適配，服務部署喺阿里雲廣州節點，訪問速度嘎嘎快。\u003c/p\u003e","tags":[],"title":"迷你聊天室"},{"content":"早期終端 早期嘅終端係一種獨立嘅硬件設備，用嚟連接到主計算機或者伺服器。佢哋通常包括：\n輸入設備：例如鍵盤，用嚟輸入命令同數據。 輸出設備：例如顯示器或者打印機，用嚟顯示計算結果同系統反饋。 例如：早期嘅 Teletype (tty) 終端、DEC VT100 終端。\n現代終端 現代終端更多係以軟件形式存在，即係終端模擬器（Terminal Emulator）， 佢哋喺現代操作系統中（例如 Linux、macOS、Windows）作為應用程序運行，模擬早期硬件終端嘅功能。\n常見終端模擬器 終端模擬器 描述 iTerm2 macOS 系統上嘅高級終端模擬器，提供咗豐富嘅功能，例如分屏、標籤頁、搜索等。 GNOME Terminal 常見於 Linux 系統嘅默認終端模擬器，功能強大且易於使用。 PuTTY Windows 系統上廣泛使用嘅 SSH 客戶端，適用於遠程連接同管理。 Windows Terminal Windows 系統上嘅現代終端模擬器，支持多個命令行環境，例如 PowerShell、CMD、WSL。 Teletype 雖然 Teletype 設備而家已經唔再使用，但佢嘅概念同功能依然保留喺 Linux 中。\n/dev/tty 可以睇到佢嘅文件類型係 c（字符設備），代表當前進程所連接嘅終端設備。\nls -l /dev/tty\rcrw-rw-rw- 1 root tty 5, 0 Aug 7 22:33 /dev/tty\r佢嘅權限係 666，主設備號係 5，次設備號係 0，呢個就係我哋常常睇到嘅標準輸入/輸出。\necho \u0026#34;Hello, World\u0026#34; \u0026gt; /dev/tty\rread -p \u0026#34;Enter your name: \u0026#34; name \u0026lt; /dev/tty echo \u0026#34;Hello, $name\u0026#34;\r/dev/pts PTS 係偽終端嘅簡寫（Pseudo-Terminal），/dev/pts 係一個目錄，用嚟存放偽終端設備文件。\nls -l /dev/pts/\rcrw------- 1 root tty 136, 0 Aug 8 09:52 0 c--------- 1 root root 5, 2 Aug 7 21:30 ptmx\r列出 /dev/pts 目錄嘅文件，一般情況下會睇到兩類文件。\nptmx：Master Device，主設備，用嚟創建同管理偽終端對。 0/1/2：Slave Device，從設備，每一個 ssh 會話對應一個數字。 喺命令行輸入 tty 命令可以睇到當前連接嘅偽終端設備文件。\ntty\r/dev/pts/0\rman tty\rtty - print the file name of the terminal connected to standard input\r當前登錄嘅用戶 最常用嘅方法係 w 命令。\nw\r11:18:19 up 15 days, 20:08, 2 users, load average: 0.00, 0.01, 0.05 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/0 120.231.138.130 10:59 3.00s 0.02s 0.00s w root pts/1 120.231.138.130 11:11 6:41 0.01s 0.01s -bash\r仲可以使用 who 命令。\nwho\rroot pts/0 2024-08-04 10:59 (120.231.138.130) root pts/1 2024-08-04 11:11 (120.231.138.130)\r當然你要直接用 ls 都得。\nls -l /dev/pts/\rcrw------- 1 root tty 136, 0 Aug 8 2024 0 crw------- 1 root tty 136, 1 Aug 8 09:53 1 c--------- 1 root root 5, 2 Aug 7 21:30 ptmx\r特定 PTS 發送消息 echo \u0026#34;hello, world\u0026#34; \u0026gt; /dev/pts/1\r強制退出特定 PTS ps -t /dev/pts/1\rkill -9 PID\r","date":"2024-08-24","id":7,"permalink":"/zh-hk/linux/terminal/","summary":"\u003ch2 id=\"早期終端\"\u003e早期終端\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/ibm-2260_hu8804125439870718022.webp\"\r\n  width=\"717\"\r\n  height=\"579\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"ibm-2260\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e\n\u003cp\u003e早期嘅終端係一種獨立嘅硬件設備，用嚟連接到主計算機或者伺服器。佢哋通常包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e輸入設備\u003c/strong\u003e：例如鍵盤，用嚟輸入命令同數據。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e輸出設備\u003c/strong\u003e：例如顯示器或者打印機，用嚟顯示計算結果同系統反饋。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：早期嘅 Teletype (tty) 終端、DEC VT100 終端。\u003c/p\u003e\n\u003ch2 id=\"現代終端\"\u003e現代終端\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/iterm2-cover_hu8964007120718632924.webp\"\r\n  width=\"1600\"\r\n  height=\"624\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"iterm2\"id=\"h-rh-i-1\"\r\n/\u003e\u003c/p\u003e\n\u003cp\u003e現代終端更多係以軟件形式存在，即係終端模擬器（Terminal Emulator），\n佢哋喺現代操作系統中（例如 Linux、macOS、Windows）作為應用程序運行，模擬早期硬件終端嘅功能。\u003c/p\u003e\n\u003ch2 id=\"常見終端模擬器\"\u003e常見終端模擬器\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e終端模擬器\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e描述\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eiTerm2\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003emacOS 系統上嘅高級終端模擬器，提供咗豐富嘅功能，例如分屏、標籤頁、搜索等。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eGNOME Terminal\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e常見於 Linux 系統嘅默認終端模擬器，功能強大且易於使用。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003ePuTTY\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eWindows 系統上廣泛使用嘅 SSH 客戶端，適用於遠程連接同管理。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eWindows Terminal\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eWindows 系統上嘅現代終端模擬器，支持多個命令行環境，例如 PowerShell、CMD、WSL。\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"teletype\"\u003eTeletype\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/teletype-model-33_hu1566251502718545479.webp\"\r\n  width=\"1024\"\r\n  height=\"683\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"teletype-model-33\"id=\"h-rh-i-2\"\r\n/\u003e\u003c/p\u003e","tags":[],"title":"第二章：終端"},{"content":"\r# If you come from bash you might have to change your $PATH. # export PATH=$HOME/bin:/usr/local/bin:$PATH # Path to your oh-my-zsh installation. export ZSH=\u0026#34;$HOME/.oh-my-zsh\u0026#34; # Set name of the theme to load --- if set to \u0026#34;random\u0026#34;, it will # load a random theme each time oh-my-zsh is loaded, in which case, # to know which specific one was loaded, run: echo $RANDOM_THEME # See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes ZSH_THEME=\u0026#34;robbyrussell\u0026#34; # Set list of themes to pick from when loading at random # Setting this variable when ZSH_THEME=random will cause zsh to load # a theme from this variable instead of looking in $ZSH/themes/ # If set to an empty array, this variable will have no effect. # ZSH_THEME_RANDOM_CANDIDATES=( \u0026#34;robbyrussell\u0026#34; \u0026#34;agnoster\u0026#34; ) # Uncomment the following line to use case-sensitive completion. # CASE_SENSITIVE=\u0026#34;true\u0026#34; # Uncomment the following line to use hyphen-insensitive completion. # Case-sensitive completion must be off. _ and - will be interchangeable. # HYPHEN_INSENSITIVE=\u0026#34;true\u0026#34; # Uncomment one of the following lines to change the auto-update behavior # zstyle \u0026#39;:omz:update\u0026#39; mode disabled # disable automatic updates # zstyle \u0026#39;:omz:update\u0026#39; mode auto # update automatically without asking # zstyle \u0026#39;:omz:update\u0026#39; mode reminder # just remind me to update when it\u0026#39;s time # Uncomment the following line to change how often to auto-update (in days). # zstyle \u0026#39;:omz:update\u0026#39; frequency 13 # Uncomment the following line if pasting URLs and other text is messed up. # DISABLE_MAGIC_FUNCTIONS=\u0026#34;true\u0026#34; # Uncomment the following line to disable colors in ls. # DISABLE_LS_COLORS=\u0026#34;true\u0026#34; # Uncomment the following line to disable auto-setting terminal title. # DISABLE_AUTO_TITLE=\u0026#34;true\u0026#34; # Uncomment the following line to enable command auto-correction. # ENABLE_CORRECTION=\u0026#34;true\u0026#34; # Uncomment the following line to display red dots whilst waiting for completion. # You can also set it to another string to have that shown instead of the default red dots. # e.g. COMPLETION_WAITING_DOTS=\u0026#34;%F{yellow}waiting...%f\u0026#34; # Caution: this setting can cause issues with multiline prompts in zsh \u0026lt; 5.7.1 (see #5765) # COMPLETION_WAITING_DOTS=\u0026#34;true\u0026#34; # Uncomment the following line if you want to disable marking untracked files # under VCS as dirty. This makes repository status check for large repositories # much, much faster. # DISABLE_UNTRACKED_FILES_DIRTY=\u0026#34;true\u0026#34; # Uncomment the following line if you want to change the command execution time # stamp shown in the history command output. # You can set one of the optional three formats: # \u0026#34;mm/dd/yyyy\u0026#34;|\u0026#34;dd.mm.yyyy\u0026#34;|\u0026#34;yyyy-mm-dd\u0026#34; # or set a custom format using the strftime function format specifications, # see \u0026#39;man strftime\u0026#39; for details. # HIST_STAMPS=\u0026#34;mm/dd/yyyy\u0026#34; # Would you like to use another custom folder than $ZSH/custom? # ZSH_CUSTOM=/path/to/new-custom-folder # Which plugins would you like to load? # Standard plugins can be found in $ZSH/plugins/ # Custom plugins may be added to $ZSH_CUSTOM/plugins/ # Example format: plugins=(rails git textmate ruby lighthouse) # Add wisely, as too many plugins slow down shell startup. plugins=(git) source $ZSH/oh-my-zsh.sh # User configuration # export MANPATH=\u0026#34;/usr/local/man:$MANPATH\u0026#34; # You may need to manually set your language environment # export LANG=en_US.UTF-8 # Preferred editor for local and remote sessions # if [[ -n $SSH_CONNECTION ]]; then # export EDITOR=\u0026#39;vim\u0026#39; # else # export EDITOR=\u0026#39;mvim\u0026#39; # fi # Compilation flags # export ARCHFLAGS=\u0026#34;-arch x86_64\u0026#34; # Set personal aliases, overriding those provided by oh-my-zsh libs, # plugins, and themes. Aliases can be placed here, though oh-my-zsh # users are encouraged to define aliases within the ZSH_CUSTOM folder. # For a full list of active aliases, run `alias`. # # Example aliases # alias zshconfig=\u0026#34;mate ~/.zshrc\u0026#34; # alias ohmyzsh=\u0026#34;mate ~/.oh-my-zsh\u0026#34; # custom aliases alias zsh=\u0026#39;vim ~/.zshrc\u0026#39; alias q=\u0026#39;exit\u0026#39; alias s=\u0026#39;sudo\u0026#39; alias v=\u0026#39;vim\u0026#39; alias g=\u0026#39;git\u0026#39; alias ga=\u0026#39;git add\u0026#39; alias gc=\u0026#39;git checkout\u0026#39; alias gs=\u0026#39;git status\u0026#39; alias gd=\u0026#39;git diff\u0026#39; alias sv=\u0026#39;sudo vim\u0026#39; alias sc=\u0026#34;source ~/.zshrc\u0026#34; alias ..=\u0026#39;cd ..\u0026#39; alias cls=\u0026#39;clear\u0026#39; alias nano=\u0026#34;vim\u0026#34; alias tailf=\u0026#34;tail -f\u0026#34; alias lf=\u0026#39;ll -p | grep -v /\u0026#39; alias ldir=\u0026#39;ls -ld -- */\u0026#39; # kubectx alias kc=\u0026#34;kubectx\u0026#34; alias kn=\u0026#34;kubens\u0026#34; KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) # kube-ps1 # https://github.com/jonmosco/kube-ps1 # todo change source path source /usr/local/Cellar/kube-ps1/0.8.0/share/kube-ps1.sh PROMPT=\u0026#39;$(kube_ps1)\u0026#39;$PROMPT KUBE_PS1_PREFIX=\u0026#34;[\u0026#34; KUBE_PS1_SUFFIX=\u0026#34;]\u0026#34; KUBE_PS1_SYMBOL_ENABLE=false KUBE_PS1_CTX_COLOR=\u0026#34;83\u0026#34; KUBE_PS1_NS_COLOR=\u0026#34;201\u0026#34; # kubectl alias # load kubectl aliases file [ -f ~/.kubectl_aliases ] \u0026amp;\u0026amp; source ~/.kubectl_aliases # Print the full command before running it function kubectl() { echo \u0026#34;+ kubectl $@\u0026#34;\u0026gt;\u0026amp;2; command kubectl $@; } # HSTR configuration - add this to ~/.zshrc alias hh=hstr # hh to be alias for hstr setopt histignorespace # skip cmds w/ leading space from history export HSTR_CONFIG=hicolor # get more colors bindkey -s \u0026#34;\\C-r\u0026#34; \u0026#34;\\C-a hstr -- \\C-j\u0026#34; # bind hstr to Ctrl-r (for Vi mode check doc) export HSTR_TIOCSTI=y # snippet export PATH=/Users/kuga/snippet:$PATH # LANG Config export LANG=en_US.UTF-8 export LC_CTYPE=en_US.UTF-8\r","date":"2024-07-24","id":8,"permalink":"/zh-hk/tech/dev-env/zshrc/","summary":"\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# If you come from bash you might have to change your $PATH.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export PATH=$HOME/bin:/usr/local/bin:$PATH\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Path to your oh-my-zsh installation.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eZSH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$HOME\u003c/span\u003e\u003cspan class=\"s2\"\u003e/.oh-my-zsh\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Set name of the theme to load --- if set to \u0026#34;random\u0026#34;, it will\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# load a random theme each time oh-my-zsh is loaded, in which case,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# to know which specific one was loaded, run: echo $RANDOM_THEME\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eZSH_THEME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;robbyrussell\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Set list of themes to pick from when loading at random\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Setting this variable when ZSH_THEME=random will cause zsh to load\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# a theme from this variable instead of looking in $ZSH/themes/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# If set to an empty array, this variable will have no effect.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ZSH_THEME_RANDOM_CANDIDATES=( \u0026#34;robbyrussell\u0026#34; \u0026#34;agnoster\u0026#34; )\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to use case-sensitive completion.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# CASE_SENSITIVE=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to use hyphen-insensitive completion.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Case-sensitive completion must be off. _ and - will be interchangeable.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# HYPHEN_INSENSITIVE=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment one of the following lines to change the auto-update behavior\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; mode disabled  # disable automatic updates\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; mode auto      # update automatically without asking\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; mode reminder  # just remind me to update when it\u0026#39;s time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to change how often to auto-update (in days).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; frequency 13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line if pasting URLs and other text is messed up.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_MAGIC_FUNCTIONS=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to disable colors in ls.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_LS_COLORS=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to disable auto-setting terminal title.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_AUTO_TITLE=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to enable command auto-correction.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ENABLE_CORRECTION=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to display red dots whilst waiting for completion.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# You can also set it to another string to have that shown instead of the default red dots.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# e.g. COMPLETION_WAITING_DOTS=\u0026#34;%F{yellow}waiting...%f\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Caution: this setting can cause issues with multiline prompts in zsh \u0026lt; 5.7.1 (see #5765)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# COMPLETION_WAITING_DOTS=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line if you want to disable marking untracked files\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# under VCS as dirty. This makes repository status check for large repositories\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# much, much faster.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_UNTRACKED_FILES_DIRTY=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line if you want to change the command execution time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# stamp shown in the history command output.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# You can set one of the optional three formats:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# \u0026#34;mm/dd/yyyy\u0026#34;|\u0026#34;dd.mm.yyyy\u0026#34;|\u0026#34;yyyy-mm-dd\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# or set a custom format using the strftime function format specifications,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# see \u0026#39;man strftime\u0026#39; for details.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# HIST_STAMPS=\u0026#34;mm/dd/yyyy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Would you like to use another custom folder than $ZSH/custom?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ZSH_CUSTOM=/path/to/new-custom-folder\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Which plugins would you like to load?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Standard plugins can be found in $ZSH/plugins/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Custom plugins may be added to $ZSH_CUSTOM/plugins/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Example format: plugins=(rails git textmate ruby lighthouse)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Add wisely, as too many plugins slow down shell startup.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eplugins\u003c/span\u003e\u003cspan class=\"o\"\u003e=(\u003c/span\u003egit\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ZSH\u003c/span\u003e/oh-my-zsh.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# User configuration\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export MANPATH=\u0026#34;/usr/local/man:$MANPATH\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# You may need to manually set your language environment\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export LANG=en_US.UTF-8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Preferred editor for local and remote sessions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# if [[ -n $SSH_CONNECTION ]]; then\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#   export EDITOR=\u0026#39;vim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# else\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#   export EDITOR=\u0026#39;mvim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# fi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Compilation flags\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export ARCHFLAGS=\u0026#34;-arch x86_64\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Set personal aliases, overriding those provided by oh-my-zsh libs,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# plugins, and themes. Aliases can be placed here, though oh-my-zsh\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# users are encouraged to define aliases within the ZSH_CUSTOM folder.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# For a full list of active aliases, run `alias`.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Example aliases\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# alias zshconfig=\u0026#34;mate ~/.zshrc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# alias ohmyzsh=\u0026#34;mate ~/.oh-my-zsh\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# custom aliases\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ezsh\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;vim ~/.zshrc\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;exit\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;sudo\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;vim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003eg\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ega\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git add\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003egc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git checkout\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003egs\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git status\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003egd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git diff\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003esv\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;sudo vim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003esc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;source ~/.zshrc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e ..\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;cd ..\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ecls\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;clear\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003enano\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;vim\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003etailf\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;tail -f\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003elf\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ll -p | grep -v /\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003eldir\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ls -ld -- */\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# kubectx\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ekc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;kubectx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ekn\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;kubens\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBECTX_CURRENT_FGCOLOR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003etput setaf 6\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# kube-ps1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# https://github.com/jonmosco/kube-ps1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# todo change source path\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e /usr/local/Cellar/kube-ps1/0.8.0/share/kube-ps1.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003ePROMPT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;$(kube_ps1)\u0026#39;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$PROMPT\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_PREFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_SUFFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;]\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_SYMBOL_ENABLE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_CTX_COLOR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;83\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_NS_COLOR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;201\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# kubectl alias\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# load kubectl aliases file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e -f ~/.kubectl_aliases \u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003esource\u003c/span\u003e ~/.kubectl_aliases\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Print the full command before running it\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e kubectl\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;+ kubectl \u003c/span\u003e\u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e2\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e kubectl \u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# HSTR configuration - add this to ~/.zshrc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ehh\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehstr                    \u003cspan class=\"c1\"\u003e# hh to be alias for hstr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esetopt histignorespace           \u003cspan class=\"c1\"\u003e# skip cmds w/ leading space from history\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHSTR_CONFIG\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehicolor       \u003cspan class=\"c1\"\u003e# get more colors\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebindkey -s \u003cspan class=\"s2\"\u003e\u0026#34;\\C-r\u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\\C-a hstr -- \\C-j\u0026#34;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# bind hstr to Ctrl-r (for Vi mode check doc)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHSTR_TIOCSTI\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ey\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# snippet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ePATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/Users/kuga/snippet:\u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# LANG Config\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eLANG\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003een_US.UTF-8\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eLC_CTYPE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003een_US.UTF-8\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"zshrc"},{"content":"With Bubbletea Coming soon\u0026hellip;\n","date":"2024-09-30","id":9,"permalink":"/zh-hk/toys/terminal-tool/","summary":"\u003ch2 id=\"with-bubbletea\"\u003eWith Bubbletea\u003c/h2\u003e\n\u003cp\u003eComing soon\u0026hellip;\u003c/p\u003e","tags":[],"title":"命令行工具"},{"content":"GNU Bash Manual Bash 係 Linux 中嘅默認 Shell，官方手冊係永遠嘅神。\nBash Reference Manual\rBash 參考手冊\nShell 嘅定義 喺 Linux 中，Shell 係一個命令解釋器（軟件程序），負責接收用戶輸入嘅命令並將其傳遞畀操作系統內核執行。 Shell 提供咗一種用戶同操作系統交互嘅接口，係操作系統嘅最外層。 另外佢仲支持編程，包括變量、循環、條件判斷等，呢個就係我哋常常所講嘅 Shell 腳本。 常見嘅 Shell 按時間排序有以下幾種：\nShell 描述 Sh Bourne Shell，最早期嘅 Shell，作者係 Stephen Bourne。 Bash Bourne Again Shell，Linux 最常用嘅 Shell，由 GNU 開發。 Dash Debian Almquist Shell，常見於 Ubuntu。 Zsh Z Shell，功能更強大，macOS 默認 Shell。 同終端嘅關係 我哋而家所講嘅終端一般係指終端模擬器，常見嘅有 GNOME Terminal、iTerm2 等等。 終端提供咗一個界面，用戶可以通過該界面同 Shell 進行交互。 終端唔會執行任何命令，佢只係負責接收輸入並顯示輸出。 Shell 係喺終端中運行嘅進程，負責實際嘅命令解釋同執行工作。 唔好混淆終端同 Shell 嘅概念，例如下面嘅對話內容係唔準確嘅。\nA：你平時用咩 Shell\nB：我用 iTerm2\nA：打開 Shell，然後輸入\u0026hellip;\niTerm2 唔係 Shell，係終端，另外 Shell 係唔需要打開嘅，終端打開嘅時候就會默認啟動。\n唔同 Shell 嘅區別 歷史同起源 sh 係 Unix 系統嘅原始 Shell，提供基本功能。 bash 係 sh 嘅增強版，功能更加豐富，係 Linux 上嘅主流 Shell。 zsh 係一種功能更強大且可高度定制嘅 Shell，結合咗多個 Shell 嘅優勢。 功能性 sh 提供基礎嘅命令同腳本執行功能，主要用於簡單腳本同系統任務。 bash 增加咗交互式功能（如命令歷史、補全），適合日常使用同複雜嘅腳本編寫。 zsh 擁有最豐富嘅功能，特別係喺自動補全、命令行提示、語法高亮等方面。 交互體驗 sh 嘅交互體驗較為基礎，冇現代化嘅功能。 bash 提供咗豐富嘅命令行交互體驗，支持命令補全、歷史等。 zsh 喺交互體驗上更進一步，支持更高級嘅補全、自動建議同錯誤更正。 定制化 sh 幾乎冇定制化選項。 bash 支持一啲定制化，但相比 zsh 仍然有限。 zsh 可以通過框架（如 Oh My Zsh）輕鬆定制，支持插件、主題等。 ","date":"2024-08-24","id":10,"permalink":"/zh-hk/linux/shell/intro/","summary":"\u003ch2 id=\"gnu-bash-manual\"\u003eGNU Bash Manual\u003c/h2\u003e\n\u003cp\u003eBash 係 Linux 中嘅默認 Shell，\u003cstrong\u003e官方手冊係永遠嘅神\u003c/strong\u003e。\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/bash.html\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eBash Reference Manual\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eBash 參考手冊\u003c/p\u003e","tags":[],"title":"Shell 簡介"},{"content":"更換國內源 主倉庫配置 cd $(brew --repo) \u0026amp;\u0026amp; git remote -v\rorigin https://github.com/Homebrew/brew.git (fetch) origin https://github.com/Homebrew/brew.git (push)\r核心倉庫配置 cd $(brew --repo homebrew/core) \u0026amp;\u0026amp; git remote -v\rorigin https://github.com/Homebrew/homebrew-core.git (fetch) origin https://github.com/Homebrew/homebrew-core.git (push)\r阿里雲鏡像 git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\rgit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\rexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles\r中科大鏡像 git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/brew.git\rgit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\rexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles\r清華大學鏡像 git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\rgit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\rexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\r驗證源配置 完成更換源操作後，可以執行以下命令驗證源配置是否成功。\nbrew update\rbrew config | grep -E \u0026#39;ORIGIN|BOTTLE\u0026#39;\r通過 brew config 命令，你可以檢查當前使用嘅倉庫源同 Bottle 源。\n常見報錯 如果報 homebrew/core 目錄唔存在，可以使用以下命令檢查。\nbrew tap\r如果冇輸出 homebrew/core，可以使用以下命令強制安裝。\nbrew tap --force homebrew/core\r","date":"2024-08-22","id":11,"permalink":"/zh-hk/tech/fourd-pocket/homebrew/","summary":"\u003ch2 id=\"更換國內源\"\u003e更換國內源\u003c/h2\u003e\n\u003ch3 id=\"主倉庫配置\"\u003e主倉庫配置\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git remote -v\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/brew.git \u003cspan class=\"o\"\u003e(\u003c/span\u003efetch\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/brew.git \u003cspan class=\"o\"\u003e(\u003c/span\u003epush\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"核心倉庫配置\"\u003e核心倉庫配置\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git remote -v\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/homebrew-core.git \u003cspan class=\"o\"\u003e(\u003c/span\u003efetch\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/homebrew-core.git \u003cspan class=\"o\"\u003e(\u003c/span\u003epush\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"阿里雲鏡像\"\u003e阿里雲鏡像\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHOMEBREW_BOTTLE_DOMAIN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps://mirrors.aliyun.com/homebrew/homebrew-bottles\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"中科大鏡像\"\u003e中科大鏡像\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.ustc.edu.cn/brew.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHOMEBREW_BOTTLE_DOMAIN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps://mirrors.ustc.edu.cn/homebrew-bottles\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"清華大學鏡像\"\u003e清華大學鏡像\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHOMEBREW_BOTTLE_DOMAIN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"驗證源配置\"\u003e驗證源配置\u003c/h3\u003e\n\u003cp\u003e完成更換源操作後，可以執行以下命令驗證源配置是否成功。\u003c/p\u003e","tags":[],"title":"Homebrew"},{"content":"神奇嘅 ^[[A 首先喺命令行啟動一個新嘅 Shell /bin/sh。\n/bin/sh\r然後輸入以下命令，一切正常。\nls -l\r按一下方向鍵 ⬆️ 睇下上一條命令。\n^[[A\r你會發現睇唔到上一條命令，取而代之嘅係呢幾個字符 ^[[A。 呢個係因為早期嘅 sh 並唔支持睇命令嘅歷史記錄，直到 bash 先加咗呢個功能。\nANSI 轉義序列 ^[[A 係一個 ANSI 嘅轉義序列，表示上方向鍵。\n^[：表示 Esc 鍵（ASCII 編碼 27），係轉義序列嘅開始。 [A：表示具體嘅操作，[A 表示上方向鍵。 當喺終端中按下上方向鍵時，終端會發送 ^[[A 呢個字符序列畀程序， 通常用於調用命令歷史記錄中嘅上一條命令。 由於 sh 並唔支持睇命令嘅歷史記錄，佢會原樣輸出鍵位嘅字符序列。\nUbuntu 中嘅 sh 喺 Ubuntu 中，sh 其實係一個指向 dash 嘅鏈接。\nfile /bin/sh\r/bin/sh: symbolic link to dash\r所以 dash 都唔支持睇命令嘅歷史記錄。\n歷史記錄功能 history 命令 唔帶參數會輸出所有歷史記錄。\nhistory\r亦可以使用簡短命令，效果一樣。\n!!\r.bash_history 文件 命令歷史記錄嘅持久化文件。\n-rw------- 1 kuga kuga 5516 Aug 24 08:23 /home/kuga/.bash_history\r喺同 Shell 交互嘅過程中，命令嘅歷史記錄會被保存在內存入面。 使用 history 命令可以實時睇歷史記錄嘅變化， 但係只有當退出 Shell，歷史記錄先會被寫入到 .bash_history 文件中。 如果想即刻寫到歷史記錄嘅文件中，可以使用以下命令。\nhistory -a\r環境變量 HISTFILE 歷史記錄文件路徑。\necho $HISTFILE\r/home/kuga/.bash_history\rHISTFILESIZE 歷史記錄文件大小。\necho $HISTFILESIZE\r2000\rHISTSIZE 內存中歷史記錄列表嘅大小。\necho $HISTSIZE\r1000\r","date":"2024-08-24","id":12,"permalink":"/zh-hk/linux/shell/command-history/","summary":"\u003ch2 id=\"神奇嘅-a\"\u003e神奇嘅 ^[[A\u003c/h2\u003e\n\u003cp\u003e首先喺命令行啟動一個新嘅 Shell \u003ccode\u003e/bin/sh\u003c/code\u003e。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/bin/sh\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e然後輸入以下命令，一切正常。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els -l\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e按一下方向鍵 ⬆️ 睇下上一條命令。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e^\u003cspan class=\"o\"\u003e[[\u003c/span\u003eA\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e你會發現睇唔到上一條命令，取而代之嘅係呢幾個字符 \u003ccode\u003e^[[A\u003c/code\u003e。\n呢個係因為早期嘅 sh 並唔支持睇命令嘅歷史記錄，直到 bash 先加咗呢個功能。\u003c/p\u003e","tags":[],"title":"命令行歷史記錄"},{"content":"ChatGPT 對話 🤡：用 Python 寫爬蟲，可輸入 URL 🤖：畀咗一個 Beautiful Soup 嘅例子 🤡：有咩方法可抓取 JS 動態生成嘅內容 🤖：可使用 Selenium、Scrapy + Splash 🤡：使用 Scrapy + Splash 嘅方法 🤖：以下係使用 Scrapy 嘅腳本示例 跑咗一下，發現日誌全打喺屏幕上，於是去官網睇咗一下配置，發現可以指定日誌文件、抓取深度、優先級等等。 再問一下 GPT 讓佢畀啲配置嘅例子同註釋，最後整理優化一下，得出咗下面最終嘅輸入。\n寫一個 python 爬蟲腳本 - 一共 4 個輸入參數 - 第 1 個參數：開始抓取嘅 URL - 第 2 個參數：匹配嘅關鍵字，支持多個 - 第 3 個參數：設置多個關鍵字匹配嘅與或關係 - 第 4 個參數：設置爬蟲抓取嘅深度 - 當一個網頁成功匹配多個關鍵字時，只記錄一次 - 把匹配內容嘅 URL 輸出到屏幕，一行一個 - 使用 splash 同 scrapy 技術 - scrapy 項目名稱為 mycrawler - scrapy 嘅日誌級別為 INFO，日誌文件為 spider.log - scrapy 嘅配置單獨放到 settings.py - settings.py 中添加抓取深度嘅相關配置 - settings.py 中嘅每個配置添加中文註釋\rChatGPT 回答 下面係 ChatGPT 嘅回答，但我做咗啲修改同優化。\n安裝 Splash 安裝 Scrapy-Splash 以及 Splash 服務：\npip install scrapy scrapy-splash\r創建 Scrapy 項目 首先，喺命令行中創建一個新嘅 Scrapy 項目：\nscrapy startproject mycrawler\rDocker 運行 Splash docker run -p 8050:8050 scrapinghub/splash\r修改 settings.py # -*- coding: utf-8 -*- # Scrapy settings for mycrawler project BOT_NAME = \u0026#39;mycrawler\u0026#39; SPIDER_MODULES = [\u0026#39;mycrawler.spiders\u0026#39;] NEWSPIDER_MODULE = \u0026#39;mycrawler.spiders\u0026#39; # 使用 Splash 渲染 JavaScript 頁面 SPLASH_URL = \u0026#39;http://localhost:8050\u0026#39; DOWNLOADER_MIDDLEWARES = { \u0026#39;scrapy_splash.SplashCookiesMiddleware\u0026#39;: 723, \u0026#39;scrapy_splash.SplashMiddleware\u0026#39;: 725, \u0026#39;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware\u0026#39;: 810, } SPIDER_MIDDLEWARES = { \u0026#39;scrapy_splash.SplashDeduplicateArgsMiddleware\u0026#39;: 100, } DUPEFILTER_CLASS = \u0026#39;scrapy_splash.SplashAwareDupeFilter\u0026#39; # 抓取深度設置 DEPTH_LIMIT = 3 # 設置抓取深度限制 # 每次抓取嘅深度 DEPTH_STATS = True # 啟用深度統計 # 啟用抓取深度統計 DEPTH_PRIORITY = 1 # 啟用抓取深度優先級 # 設置抓取深度優先級，1 表示深度優先，-1 表示廣度優先 # 日誌設置 LOG_LEVEL = \u0026#39;INFO\u0026#39; # 日誌級別 # 設置日誌記錄嘅級別為 INFO LOG_FILE = \u0026#39;spider.log\u0026#39; # 日誌文件 # 指定日誌文件嘅路徑 # 其他配置 ROBOTSTXT_OBEY = True # 遵守 robots.txt 規則 # 爬蟲是否遵守 robots.txt 規則，默認為 True # 設置 User-Agent，模擬常見瀏覽器 #USER_AGENT = \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\u0026#39;\r創建爬蟲 喺 mycrawler/spiders 目錄中創建一個新嘅爬蟲文件 my_spider.py，內容如下：\nimport scrapy from scrapy_splash import SplashRequest class MySpider(scrapy.Spider): name = \u0026#34;my_spider\u0026#34; # 定義爬蟲嘅名稱 def __init__(self, start_url, keywords, logic, depth, *args, **kwargs): super(MySpider, self).__init__(*args, **kwargs) self.start_urls = [start_url] # 初始化抓取嘅起始 URL self.keywords = keywords.split(\u0026#39;,\u0026#39;) # 將關鍵字字符串拆分為列表 self.logic = logic # 設置關鍵字匹配嘅邏輯關係（與或關係） self.custom_settings = {\u0026#39;DEPTH_LIMIT\u0026#39;: int(depth)} # 設置抓取深度限制 def start_requests(self): # 生成初始請求 for url in self.start_urls: yield SplashRequest(url, self.parse, args={\u0026#39;wait\u0026#39;: 1}) def parse(self, response): # 解析響應內容 # 獲取頁面文本並轉為小寫 page_text = response.text.lower() # 檢查每個關鍵字是否喺頁面文本中出現 matches = [kw.lower() in page_text for kw in self.keywords] # 根據邏輯關係判斷是否匹配成功 if (self.logic == \u0026#39;and\u0026#39; and all(matches)) or (self.logic == \u0026#39;or\u0026#39; and any(matches)): # 記錄匹配嘅 URL self.log(f\u0026#39;Matched URL: {response.url}\u0026#39;) print(response.url) # 獲取頁面中嘅所有鏈接，並進行遞歸抓取 for next_page in response.css(\u0026#39;a::attr(href)\u0026#39;).getall(): if next_page: yield SplashRequest(response.urljoin(next_page), self.parse, args={\u0026#39;wait\u0026#39;: 1})\r運行爬蟲 使用命令行運行爬蟲：\nscrapy crawl my_spider -a start_url=\u0026#39;http://example.com\u0026#39; -a keywords=\u0026#39;keyword1,keyword2\u0026#39; -a logic=\u0026#39;and\u0026#39; -a depth=3\r呢個腳本會根據輸入參數抓取網頁，匹配關鍵字並輸出匹配嘅 URL。\n總結 ChatGPT 更似係一個引導嘅角色。 有時你需要一個工具，可能你並唔知道呢個工具最後長咩樣。 但只要通過不斷對話，一步步打磨，佢總能畀出你想要嘅答案。 呢個過程仲可以學到唔少嘢，只要你懂得點樣提問。\n","date":"2024-07-24","id":13,"permalink":"/zh-hk/tech/fourd-pocket/chatgpt-crawler/","summary":"\u003ch2 id=\"chatgpt-對話\"\u003eChatGPT 對話\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e🤡：用 Python 寫爬蟲，可輸入 URL\u003c/li\u003e\n\u003cli\u003e🤖：畀咗一個 Beautiful Soup 嘅例子\u003c/li\u003e\n\u003cli\u003e🤡：有咩方法可抓取 JS 動態生成嘅內容\u003c/li\u003e\n\u003cli\u003e🤖：可使用 Selenium、Scrapy + Splash\u003c/li\u003e\n\u003cli\u003e🤡：使用 Scrapy + Splash 嘅方法\u003c/li\u003e\n\u003cli\u003e🤖：以下係使用 Scrapy 嘅腳本示例\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e跑咗一下，發現日誌全打喺屏幕上，於是去官網睇咗一下配置，發現可以指定日誌文件、抓取深度、優先級等等。\n再問一下 GPT 讓佢畀啲配置嘅例子同註釋，最後整理優化一下，得出咗下面最終嘅輸入。\u003c/p\u003e","tags":[],"title":"用 ChatGPT 寫爬蟲"},{"content":"查看終端默認嘅 Shell echo $SHELL\r/bin/bash\r如果你喺當前終端中啟動咗一個新嘅 Shell（例如從 Bash 切換到 Zsh）， 呢個命令顯示嘅仍然係默認嘅登錄 Shell，呢個配置係存放喺 /etc/passwd 裡面嘅。\ngrep root /etc/passwd\rroot:x:0:0:root:/root:/bin/bash\r喺 macOS 中，默認嘅 Shell 信息通常係存儲喺用戶賬戶設置中嘅，而唔係 /etc/passwd 文件中。 從 macOS Catalina（10.15）開始，默認嘅 shell 已更改為 zsh，之前嘅默認 Shell 係 bash。 可以通過以下方法查看默認 shell。\ndscl . -read /Users/$(whoami) UserShell\rUserShell: /bin/zsh\r查看緊運行嘅 Shell $0 喺 Shell 中運行返回 Shell 名稱，喺腳本中運行返回腳本名稱/路徑。\necho $0\r-bash\r前面嘅連字符 - 表示該 Shell 係用戶嘅登錄 Shell。\n亦可以通過 ps 命令查看進程狀態。\nps -p $$\rPID TTY TIME CMD 17216 pts/0 00:00:00 bash\r如果你喺當前終端中啟動咗一個新嘅 Shell（從 Bash 切換到 Sh），上面嘅兩種方法會顯示 sh。\n查看支持嘅 Shell cat /etc/shells\r# /etc/shells: valid login shells /bin/sh /bin/bash /usr/bin/bash /bin/rbash /usr/bin/rbash /usr/bin/sh /bin/dash /usr/bin/dash /usr/bin/tmux /usr/bin/screen\r修改默認嘅 Shell 修改成功後，/etc/passwd 中嘅內容會隨之更新。\nchsh 修改當前用戶嘅登錄 Shell 會要求輸入用戶密碼。\nchsh -s /bin/bash\r使用 root 用戶或者 sudo 仲可以修改其他用戶嘅登錄 Shell。\nsudo chsh -s /bin/bash kuga\r注意：如果我哋輸入一個唔存在嘅 Shell。\nchsh -s /bin/foo\rchsh: /bin/foo is an invalid shell\r佢會檢查輸入嘅 Shell 係咪喺 /etc/shells 文件中，防止因為輸入咗唔合法嘅 Shell 而導致登錄失敗。\nusermod 使用呢個命令需要 root 用戶或者擁有 sudo 權限嘅用戶。\nsudo usermod -s /bin/dash kuga\r注意\nusermod 唔會檢查 Shell 嘅合法性，唔建議使用。\nsudo usermod -s /bin/notexist kuga\r上面嘅命令唔會報錯，但會導致 kuga 用戶無法登錄。\n添加 sudo 權限 查看 sudo 組嘅成員列表。\ngetent group sudo\r畀用戶添加 sudo 組嘅權限，需要 root 執行。\nusermod -aG sudo username\r唔好直接編輯 passwd 如果唔小心寫錯配置，好有可能會導致成個系統無法登錄。\n盡量唔好使用 root 我就係唔小心把 root 嘅登錄 Shell 改成咗 zsh， 但 Ubuntu 並冇安裝 zsh，所以 root 就登唔上去。 好彩我另外一個用戶有 sudo 權限，仲可以正常登錄， 我先成功把 root 嘅 Shell 改返嚟。 如果運氣唔好，冇 sudo 權限嘅用戶，咁就麻煩咗。\nsudo chsh -s /bin/bash root\r","date":"2024-08-24","id":14,"permalink":"/zh-hk/linux/shell/basic-operations/","summary":"\u003ch2 id=\"查看終端默認嘅-shell\"\u003e查看終端默認嘅 Shell\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$SHELL\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e如果你喺當前終端中啟動咗一個新嘅 Shell（例如從 Bash 切換到 Zsh），\n呢個命令顯示嘅仍然係默認嘅登錄 Shell，呢個配置係存放喺 \u003ccode\u003e/etc/passwd\u003c/code\u003e 裡面嘅。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egrep root /etc/passwd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eroot:x:0:0:root:/root:/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e喺 macOS 中，默認嘅 Shell 信息通常係存儲喺用戶賬戶設置中嘅，而唔係 \u003ccode\u003e/etc/passwd\u003c/code\u003e 文件中。\n從 macOS Catalina（10.15）開始，默認嘅 shell 已更改為 \u003ccode\u003ezsh\u003c/code\u003e，之前嘅默認 Shell 係 \u003ccode\u003ebash\u003c/code\u003e。\n可以通過以下方法查看默認 shell。\u003c/p\u003e","tags":[],"title":"Shell 基本操作"},{"content":"背景 出於種種原因，要喺一台蘋果電腦上安裝舊版本嘅 macOS 係一件唔容易嘅事。 因為蘋果官網嘅下載連結會引導你到 App Store， 當佢發現你要下載嘅系統版本比你而家用緊嘅系統仲要舊嘅時候， 係唔會提供下載嘅，只能下載更新嘅版本。\n前幾日我一個朋友啱啱高中畢業，大學想要學計算機，我就推薦佢買蘋果電腦。 但佢之前都冇用過 macOS，所以我打算把我嗰台 2014 年嘅 MacBook Air 畀佢體驗一下。 當時呢台電腦嘅系統係 High Sierra 10.13， 我諗住搞個 USB 啟動盤重裝一下系統，順手把磁盤嘅數據都抹掉， 冇諗到呢一頓操作之後，我人麻咗。\n證書過期 我喺網上隨便搵咗一個 High Sierra 鏡像，因為蘋果官網根本下載唔到舊版本嘅 macOS。 引導盤做好咗之後，一切都好順利，直到佢畀咗我一個驚喜。（呢個圖我係網上搵嘅）\n查咗一下資料，好多都話係證書過期嘅問題，因為以前蘋果發佈嘅證書有啲係喺 2019 年過期嘅。\n解決方案 下載最新官方鏡像（推薦） 一個鏡像能唔能用唔淨係證書嘅問題，所以最可靠嘅方法係從蘋果官網下載最新嘅安裝包。 但前面講咗 App Store 根本唔提供下載， 幸運嘅係我哋可以通過 softwareupdate 呢個命令，去下載而家電腦所支持嘅系統版本。\nsoftwareupdate --list-full-installers\rFinding available software Software Update found the following full installers: * Title: macOS Sonoma, Version: 14.6, Size: 13339695KiB, Build: 23G80 * Title: macOS Sonoma, Version: 14.5, Size: 13353373KiB, Build: 23F79 * Title: macOS Sonoma, Version: 14.4.1, Size: 13298513KiB, Build: 23E224 * Title: macOS Ventura, Version: 13.6.8, Size: 11922165KiB, Build: 22G820 * Title: macOS Ventura, Version: 13.6.7, Size: 11924125KiB, Build: 22G720 * Title: macOS Ventura, Version: 13.6.6, Size: 11917983KiB, Build: 22G630 * Title: macOS Monterey, Version: 12.7.6, Size: 12118346KiB, Build: 21H1320 * Title: macOS Monterey, Version: 12.7.5, Size: 12116686KiB, Build: 21H1222 * Title: macOS Monterey, Version: 12.7.4, Size: 12117810KiB, Build: 21H1123 * Title: macOS Big Sur, Version: 11.7.10, Size: 12125478KiB, Build: 20G1427 * Title: macOS Catalina, Version: 10.15.7, Size: 8055650KiB, Build: 19H15 * Title: macOS Catalina, Version: 10.15.7, Size: 8055522KiB, Build: 19H2 * Title: macOS Catalina, Version: 10.15.6, Size: 8055450KiB, Build: 19G2021 * Title: macOS Mojave, Version: 10.14.6, Size: 5896894KiB, Build: 18G103 * Title: macOS Mojave, Version: 10.14.4, Size: 5894794KiB, Build: 18E2034\rsoftwareupdate --fetch-full-installer --full-installer-version 10.14.6\r因為我另一台電腦支持嘅最舊版本係 Mojave，唔係 High Sierra，所以最後我安裝咗 10.14.6。\n安裝時修改系統時間 打開 Utilities -\u0026gt; Terminal，使用 date 命令修改時間。\ndate 010101012018\r知其所以然 雖然問題係解決咗，但我更想驗證一下到底係唔係證書過期嘅問題。\nHigh Sierra：報錯，application is damaged Mojave：成功安裝 呢兩個安裝包都係後綴為 .app 嘅文件（其實都係目錄）， 唔似上面嘅 .pkg 文件，直接打開就能睇到證書信息，需要使用其他方法。\n查看證書信息 我哋可以通過 pkgutil 查看 .app 嘅證書信息。\npkgutil --check-signature Install\\ macOS\\ High\\ Sierra.app\rPackage \u0026#34;Install macOS High Sierra\u0026#34;: Status: signed by untrusted certificate Certificate Chain: 1. Software Signing SHA256 Fingerprint: 2A A4 B9 97 3B 7B A0 7A DD 44 7E E4 DA 8B 53 37 C3 EE 2C 3A 99 19 11 E8 0E 72 82 E8 A7 51 FC 32 ------------------------------------------------------------------------ 2. Apple Code Signing Certification Authority Expires: 2026-10-24 17:39:41 +0000 SHA256 Fingerprint: 5B DA B1 28 8F C1 68 92 FE F5 0C 65 8D B5 4F 1E 2E 19 CF 8F 71 CC 55 F7 7D E2 B9 5E 05 1E 25 62 ------------------------------------------------------------------------ 3. Apple Root CA Expires: 2035-02-09 21:40:36 +0000 SHA256 Fingerprint: B0 B1 73 0E CB C7 FF 45 05 14 2C 49 F1 29 5E 6E DA 6B CA ED 7E 2C 68 C5 BE 91 B5 A1 10 01 F0 24\r可以睇到，呢度嘅證書信息包含咗 3 個部分，但只有 2，3 部分有過期信息，且均冇過期。 更離譜嘅係，我都查咗 Mojave 嘅證書信息，同上面嘅 High Sierra 係一模一樣嘅。 咁到底係咩問題？後來我發現可以使用 codesign 查看更詳細嘅證書信息。\ncodesign --display --extract-certificates Install\\ macOS\\ High\\ Sierra.app\r呢個命令會喺當前目錄生成 3 個證書文件。\ncodesign0 codesign1 codesign2\r再使用 qlmanage 命令查看證書信息。\nqlmanage -c public.x509-certificate -p codesign0\r可以睇到 Software Signing 嘅過期時間係 2021 年 4 月 13 日， 亦正係上面 pkgutil 第一部分所缺失嘅信息。 當我以為真相大白嘅時候，同樣嘅命令，Mojave 嘅過期時間亦係 2021 年 4 月 13 日。 呢我就唔明咗，咁應該兩個安裝包都唔得先啱，但係我又問咗一下 ChatGPT。\n🤡：點解 macos 嘅安裝程序中 Software Signing 證書過期，仲可以正常運行\n🤖：喺 macOS 中，安裝程序中嘅 Software Signing 證書過期後依然能夠正常運行嘅原因係因為系統嘅設計方式。喺創建安裝程序時，只要證書喺簽署時係有效嘅，macOS 會忽略證書嘅過期日期，從而允許已簽署嘅應用程序繼續運行。以下係具體原因：\n簽署時嘅有效性：喺安裝程序創建時，只要證書係有效嘅，簽署過程就會成功完成。呢意味住安裝程序喺創建時已經被認證為安全嘅，即使之後證書過期，系統依然認可該簽署嘅合法性。 系統設計：macOS 嘅設計理念係為咗確保應用程序嘅連續性同用戶體驗嘅穩定性。為咗避免因證書過期而導致用戶無法使用已安裝嘅應用程序，macOS 喺運行時會忽略已簽署應用程序嘅證書過期問題。 減少用戶同開發者嘅負擔：如果每次證書過期都要求用戶重新安裝應用程序，或者開發者必須頻繁更新證書，呢將會畀用戶同開發者帶嚟極大嘅不便。忽略過期證書可以避免呢種情況，確保用戶能夠持續使用佢哋依賴嘅應用程序。 實際操作中嘅容錯性：雖然理論上證書有有效期，但實際操作中，macOS 嘅容錯性設計允許過期證書簽署嘅應用程序繼續運行。呢種設計係為咗確保系統嘅靈活性同可靠性。 綜上所述，macOS 嘅安裝程序中，Software Signing 證書過期後依然能夠正常運行，係由於系統喺簽署時驗證有效性，並喺運行時忽略證書過期日期，從而確保應用程序嘅連續性同用戶體驗嘅穩定性。\n所以到呢度我係唔係可以認為兩個安裝包嘅證書都係冇問題嘅？\nApple Installer Checksums 似乎我哋仲可以驗證一下安裝包嘅完整性，Mac OSX Installers SHA1 Checksums。\nshasum /Applications/Install*OS*.app/Contents/SharedSupport/{Base,Install}*.dmg\r但我都試咗，結果係一樣嘅，呢亦代表唔到咩。\n真相到底係咩 It doesn\u0026rsquo;t work，but I don\u0026rsquo;t know why.\n事情發展到呢度，我已經唔知道係咩原因導致 High Sierra 安裝包報錯咗。\n參考 https://eclecticlight.co/2019/10/18/beware-apple-security-certificates-after-24-october-they-may-have-expired/ https://www.youtube.com/watch?v=E4Mu4tI8-iw https://github.com/notpeter/apple-installer-checksums ","date":"2024-08-02","id":15,"permalink":"/zh-hk/tech/fourd-pocket/old-macos/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e出於種種原因，要喺一台蘋果電腦上安裝舊版本嘅 macOS 係一件唔容易嘅事。\n因為蘋果官網嘅下載連結會引導你到 App Store，\n當佢發現你要下載嘅系統版本比你而家用緊嘅系統仲要舊嘅時候，\n係唔會提供下載嘅，只能下載更新嘅版本。\u003c/p\u003e\n\u003cp\u003e前幾日我一個朋友啱啱高中畢業，大學想要學計算機，我就推薦佢買蘋果電腦。\n但佢之前都冇用過 macOS，所以我打算把我嗰台 2014 年嘅 MacBook Air 畀佢體驗一下。\n當時呢台電腦嘅系統係 High Sierra 10.13，\n我諗住搞個 USB 啟動盤重裝一下系統，順手把磁盤嘅數據都抹掉，\n冇諗到呢一頓操作之後，我人麻咗。\u003c/p\u003e","tags":[],"title":"安裝舊版 macOS"},{"content":"內建命令 Builtin Commands。 內建命令係由 Shell 自身實現嘅命令，佢哋喺 Shell 內部運行， 無需啟動新進程或者調用外部程序，係 Shell 操作嘅基本功能。\n常見嘅內建命令 cd：更改當前工作目錄。 echo：輸出字符串到終端。 exit：退出當前 Shell 會話。 export：設置或者導出環境變量。 alias：為命令創建別名。 set：設置 Shell 選項同變量。 read：從標準輸入讀取一行並賦值畀變量。 完整嘅內建命令 Bash Builtin Commands\rBash 內建命令\n外部命令 External Commands。 外部命令係指嗰啲唔係由 Shell 自身實現嘅命令，而係系統中嘅可執行文件。 當你運行一個外部命令時，Shell 會通過查找 PATH 環境變量中嘅目錄， 搵到對應嘅可執行文件，並啟動一個新進程嚟運行該命令。\n常見嘅外部命令 /bin/ls：列出目錄內容。 /usr/bin/grep：搜索文件中內容。 /bin/cat：顯示文件內容。 /bin/mkdir：創建目錄。 區分內建命令與外部命令 使用 type 命令 type cd\rcd is a shell builtin\rtype cat\rcat is /usr/bin/cat\r列出所有實現 type -a pwd\rpwd is a shell builtin pwd is /usr/bin/pwd pwd is /bin/pwd\r上面列出咗 pwd 嘅內建實現同外部實現，如果要使用外部實現，需要使用完整路徑。\n列出命令嘅別名 type -a ls\rls is aliased to `ls --color=auto\u0026#39; ls is /usr/bin/ls ls is /bin/ls\r另外使用 which 命令只會顯示外部命令。\n","date":"2024-08-24","id":16,"permalink":"/zh-hk/linux/shell/command-type/","summary":"\u003ch2 id=\"內建命令\"\u003e內建命令\u003c/h2\u003e\n\u003cp\u003eBuiltin Commands。\n內建命令係由 Shell 自身實現嘅命令，佢哋喺 Shell 內部運行，\n\u003cstrong\u003e無需啟動新進程\u003c/strong\u003e或者調用外部程序，係 Shell 操作嘅基本功能。\u003c/p\u003e\n\u003ch3 id=\"常見嘅內建命令\"\u003e常見嘅內建命令\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecd\u003c/code\u003e：更改當前工作目錄。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eecho\u003c/code\u003e：輸出字符串到終端。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexit\u003c/code\u003e：退出當前 Shell 會話。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexport\u003c/code\u003e：設置或者導出環境變量。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ealias\u003c/code\u003e：為命令創建別名。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eset\u003c/code\u003e：設置 Shell 選項同變量。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eread\u003c/code\u003e：從標準輸入讀取一行並賦值畀變量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"完整嘅內建命令\"\u003e完整嘅內建命令\u003c/h3\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eBash Builtin Commands\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eBash 內建命令\u003c/p\u003e","tags":[],"title":"內建命令與外部命令"},{"content":"網絡診斷 ping.pe ping.pe\r全球網絡延遲同路由監控工具\n","date":"2024-08-22","id":17,"permalink":"/zh-hk/tech/fourd-pocket/useful-tool/","summary":"\u003ch2 id=\"網絡診斷\"\u003e網絡診斷\u003c/h2\u003e\n\u003ch3 id=\"pingpe\"\u003eping.pe\u003c/h3\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://ping.pe\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eping.pe\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003e全球網絡延遲同路由監控工具\u003c/p\u003e\r\n      \u003c/div\u003e\r\n      \u003cdiv class=\"d-flex flex-column justify-content-center\"\u003e\r\n        \u003csvg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-arrow-right\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\r\n          \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"\u003e\u003c/path\u003e\r\n          \u003cpath d=\"M5 12l14 0\"\u003e\u003c/path\u003e\r\n          \u003cpath d=\"M13 18l6 -6\"\u003e\u003c/path\u003e\r\n          \u003cpath d=\"M13 6l6 6\"\u003e\u003c/path\u003e\r\n        \u003c/svg\u003e\r\n      \u003c/div\u003e\r\n    \u003c/div\u003e\r\n  \u003c/div\u003e\r\n  \u003c/div\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/ping-pe_hu9632169485666567800.webp\"\r\n  width=\"1980\"\r\n  height=\"508\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"ping-pe\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e","tags":[],"title":"有用嘅工具"},{"content":"背景 2019-2020，當時用 PHP 寫嘅呢個活動模板項目，雖然已經停止開發咗，但而家仲喺運行，喺上面跑嘅活動已經有 400 多個咗。 我記得我離職嘅時候先 50 多個，而家 PHP 喺國內已經唔係咁流行咗，要唔係因為遷移成本大，早就改成 Java 咗。 不過得知自己寫嘅代碼仲喺運行，仲上線咗咁多活動，滿打滿算都省咗唔少開發成本，心裏仲係幾開心嘅。\n今次打算把活動模板再次搭建起嚟，亦記錄一下當中碰到嘅問題。 畢竟對於一個 5 年前嘅老項目，好多依賴嘅軟件都更新咗，會出現各種各樣嘅問題。\nPHP 7.2 2024 年嘅 PHP 已經去到 8.X 咗，有啲特性已經唔再支持，所以只能安裝舊版。 不過 Homebrew 嘅官方唔提供舊版本嘅下載，需要使用 shivammathur/homebrew-php。\nshivammathur/homebrew-php\rHomebrew 嘅 PHP 擴展\nHomebrew brew update\rbrew tap shivammathur/php\rbrew install shivammathur/php/php@7.2\recho \u0026#39;export PATH=\u0026#34;/usr/local/opt/php@7.2/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo \u0026#39;export PATH=\u0026#34;/usr/local/opt/php@7.2/sbin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc\r啟動服務 brew services start php@7.2\r查看服務 brew services list\rphp@7.2 started kuga ~/Library/LaunchAgents/homebrew.mxcl.php@7.2.plist\rMySQL 8.4 MySQL 也從 5 跳到 8 了，呢度直接安裝 8.4。\nbrew install mysql@8.4\r身份驗證報錯 PHP 7.2 連接數據庫嘅時候會報以下錯誤。\nCDbConnection failed to open the DB connection: SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client\r出於安全考慮，MySQL 8.0 之後引入咗新嘅驗證方法 caching_sha2_password， 呢個同舊版本客戶端使用嘅 mysql_native_password 唔兼容。 解決方法有兩個，一係升級客戶端，二係啟用舊版模塊。 呢度最簡單嘅方法當然係讓 MySQL 8.4 啟用 mysql_native_password 模塊。\nvim /usr/local/etc/my.cnf\r喺 [mysqld] 模塊中添加以下配置。\nmysql_native_password=ON\r重啟 MySQL 服務。\nbrew services restart mysql@8.4\r","date":"2024-09-07","id":18,"permalink":"/zh-hk/tech/fourd-pocket/act-tpl/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e2019-2020，當時用 PHP 寫嘅呢個活動模板項目，雖然已經停止開發咗，但而家仲喺運行，喺上面跑嘅活動已經有 400 多個咗。\n我記得我離職嘅時候先 50 多個，而家 PHP 喺國內已經唔係咁流行咗，要唔係因為遷移成本大，早就改成 Java 咗。\n不過得知自己寫嘅代碼仲喺運行，仲上線咗咁多活動，滿打滿算都省咗唔少開發成本，心裏仲係幾開心嘅。\u003c/p\u003e\n\u003cp\u003e今次打算把活動模板再次搭建起嚟，亦記錄一下當中碰到嘅問題。\n畢竟對於一個 5 年前嘅老項目，好多依賴嘅軟件都更新咗，會出現各種各樣嘅問題。\u003c/p\u003e\n\u003ch2 id=\"php-72\"\u003ePHP 7.2\u003c/h2\u003e\n\u003cp\u003e2024 年嘅 PHP 已經去到 8.X 咗，有啲特性已經唔再支持，所以只能安裝舊版。\n不過 Homebrew 嘅官方唔提供舊版本嘅下載，需要使用 \u003ccode\u003eshivammathur/homebrew-php\u003c/code\u003e。\u003c/p\u003e","tags":[],"title":"活動模板-搭建環境"},{"content":"Shell 變量 Shell 變量係一個統稱，如果用嘅係某個特定嘅 Shell，例如 Bash，咁可以稱佢為 Bash 變量。 但係呢度必須要注意，Shell 變量唔係環境變量，唔好畀佢嘅大寫迷惑咗，以下係相關嘅官方文檔。\nShell Variables\rShell 變量\nBash Variables\rBash 變量\n使用 man 指令，然後搜索 Shell Variables 都可以睇到。\nman bash\r/Shell Variables\r常見 Shell 變量 PS1 Shell 命令提示符。\necho $PS1\r\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$\rUID 當前用戶 ID。\necho $UID\r1000\rPPID ps -fp $PPID\rUID PID PPID C STIME TTY TIME CMD kuga 46635 46570 0 10:56 ? 00:00:00 sshd: kuga@pts/0\r可以睇到 bash 嘅父進程係 sshd。\nBASH_VERSION echo $BASH_VERSION\r5.1.16(1)-release\rBASH_SUBSHELL Subshell 嘅嵌套級別，從 0 開始。\necho $BASH_SUBSHELL\r0\rSECONDS Shell 啟動到而家嘅秒數。\necho $SECONDS\r13963\rRANDOM 0 到 32767 嘅隨機數。\necho $RANDOM\r1024\r自定義 Shell 變量 參考後面環境變量嘅章節\n","date":"2024-08-26","id":19,"permalink":"/zh-hk/linux/shell/shell-variables/","summary":"\u003ch2 id=\"shell-變量\"\u003eShell 變量\u003c/h2\u003e\n\u003cp\u003eShell 變量係一個統稱，如果用嘅係某個特定嘅 Shell，例如 Bash，咁可以稱佢為 Bash 變量。\n但係呢度必須要注意，Shell 變量唔係環境變量，唔好畀佢嘅大寫迷惑咗，以下係相關嘅官方文檔。\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/html_node/Shell-Variables.html\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eShell Variables\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eShell 變量\u003c/p\u003e","tags":[],"title":"Shell 變量"},{"content":"Prompt 修改代碼類型 修改 markdown 嘅代碼框類型。\n把 markdown 嘅代碼框類型全部改成 bash {frame=\u0026#34;none\u0026#34;}\r我使用嘅模型係 cursor-small。 呢度加咗全部範圍，所以會修改所有代碼框類型。 如果唔加全部，會檢測代碼框類型係咪 bash。 係：修改。 唔係：唔修改。 中文翻譯英文 翻譯成英文，如果係標題，則每個單詞嘅首字母大寫。\r中文翻譯繁體-HK 把中文翻譯成香港嘅粵語繁體中文。\r","date":"2024-09-08","id":20,"permalink":"/zh-hk/tech/cursor/prompt/","summary":"\u003ch2 id=\"prompt\"\u003ePrompt\u003c/h2\u003e\n\u003ch3 id=\"修改代碼類型\"\u003e修改代碼類型\u003c/h3\u003e\n\u003cp\u003e修改 markdown 嘅代碼框類型。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e把 markdown 嘅代碼框類型全部改成 bash {frame=\u0026#34;none\u0026#34;}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e我使用嘅模型係 \u003ccode\u003ecursor-small\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e呢度加咗全部範圍，所以會修改所有代碼框類型。\u003c/li\u003e\n\u003cli\u003e如果唔加全部，會檢測代碼框類型係咪 \u003ccode\u003ebash\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e係：修改。\u003c/li\u003e\n\u003cli\u003e唔係：唔修改。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"中文翻譯英文\"\u003e中文翻譯英文\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e翻譯成英文，如果係標題，則每個單詞嘅首字母大寫。\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"中文翻譯繁體-hk\"\u003e中文翻譯繁體-HK\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e把中文翻譯成香港嘅粵語繁體中文。\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"常用提示詞"},{"content":"Subshell Subshell 嘅定義喺一啲書本或者資料中模糊唔清，畀出嘅解釋往往同某啲例子自相矛盾，令人捉摸唔透。 所以，為咗避免呢種語義同邏輯上嘅問題，呢度唔會畀出佢嘅定義（建議參考官方 BASH 手冊）， 亦唔會用 “子 Shell” 呢個翻譯，只係從佢嘅實際表現去理解佢嘅定義。 下面列舉嘅變量同 Subshell 概念有密切嘅關係。\nBash Reference Manual\rBash 參考手冊\nBASH_SUBSHELL Shell 變量，非環境變量，官方手冊解釋。\nIncremented by one within each subshell or subshell environment when the shell begins executing in that environment. The initial value is 0. If BASH_SUBSHELL is unset, it loses its special properties, even if it is subsequently reset.\r亦可以用 man 命令，內容可能會有啲唔同。\nman bash | grep -A 3 \u0026#39;BASH_SUBSHELL\u0026#39; | head -n 4\recho $BASH_SUBSHELL\r0\rSHLVL 環境變量，官方手冊解釋。\nIncremented by one each time a new instance of Bash is started. This is intended to be a count of how deeply your Bash shells are nested.\r用 man 命令。\nman bash | grep \u0026#39;SHLVL\u0026#39;\r呢個值係從 1 開始嘅。\necho $SHLVL\r1\r命令分組 全稱 Command Grouping，Bash 提供兩種方法創建命令分組。\n括號：() 呢個方法會創建一個 Subshell 環境去處理命令分組。\n(pwd; echo $BASH_SUBSHELL)\r/home/kuga 1\r(pwd; (echo $BASH_SUBSHELL))\r/home/kuga 2 (pwd; (echo $SHLVL))\r1\r可以得出以下結論。\nBASH_SUBSHELL：每創建一個 Subshell 就加 1。 SHLVL：無論創建幾多個 Subshell，都唔變。 花括號：{} 呢個方法唔會創建 Subshell，命令分組係喺當前 Shell 嘅上下文中處理嘅。 喺語法上，花括號同命令之間嘅空格唔可以省略，每個命令結尾嘅分號亦係必須嘅。\n{ pwd; { echo $BASH_SUBSHELL; } }\r/home/kuga 0\r{ pwd; { echo $SHLVL; } }\r/home/kuga 1\rShell PID 可以通過 BASHPID 或者 $$ 睇 Shell 嘅 PID，但佢哋係有區別嘅。\nBASHPID Shell 變量，非環境變量，官方解釋。\nExpands to the process ID of the current Bash process. This differs from $$ under certain circumstances, such as subshells that do not require Bash to be re-initialized. Assignments to BASHPID have no effect. If BASHPID is unset, it loses its special properties, even if it is subsequently reset.\recho $BASHPID\r56414\r用 () 睇 BASHPID。\n(ps -f --forest; echo $BASHPID)\rUID PID PPID C STIME TTY TIME CMD kuga 56414 56412 0 10:11 pts/0 00:00:00 -bash kuga 57325 56414 0 15:13 pts/0 00:00:00 \\_ -bash kuga 57326 57325 0 15:13 pts/0 00:00:00 \\_ ps -f --forest 57325\r可以睇到，BASHPID 輸出咗 Subshell 嘅 PID。\n特殊參數 $$ 官方解釋。\n($$) Expands to the process ID of the shell. In a subshell, it expands to the process ID of the invoking shell, not the subshell.\r喺 Subshell 中，$$ 表示嘅係 invoking shell 嘅 PID。\n(pwd; (ps -f --forest; echo $$))\r/home/kuga UID PID PPID C STIME TTY TIME CMD kuga 56414 56412 0 10:11 pts/0 00:00:00 -bash kuga 57347 56414 0 15:20 pts/0 00:00:00 \\_ -bash kuga 57348 57347 0 15:20 pts/0 00:00:00 \\_ -bash kuga 57349 57348 0 15:20 pts/0 00:00:00 \\_ ps -f --forest 56414\r可以睇到，無論有幾多個 Subshells，$$ 始終表示頂層 Bash 嘅 PID。\n創建 Bash 實例 喺 Bash 中輸入 bash 就可以創建一個全新嘅 Bash 實例。\nbash\rps -f --forest\rUID PID PPID C STIME TTY TIME CMD kuga 56414 56412 0 10:11 pts/0 00:00:00 -bash kuga 57359 56414 0 15:29 pts/0 00:00:00 \\_ bash kuga 57402 57359 0 15:30 pts/0 00:00:00 \\_ ps -f --forest\r呢個時候再觀察一下上面提到嘅變量。\necho $BASH_SUBSHELL $SHLVL $BASHPID $$\r0 2 57359 57359\rBASH_SUBSHELL：冇變。 SHLVL：從 1 -\u0026gt; 2。 BASHPID：新 Bash 實例嘅 PID。 $$：新 Bash 實例嘅 PID。 如果話呢種創建 Bash 嘅方式都係 Subshell 嘅話，語義同表現上就會自相矛盾。\n","date":"2024-08-27","id":21,"permalink":"/zh-hk/linux/shell/subshell/","summary":"\u003ch2 id=\"subshell\"\u003eSubshell\u003c/h2\u003e\n\u003cp\u003eSubshell 嘅定義喺一啲書本或者資料中模糊唔清，畀出嘅解釋往往同某啲例子自相矛盾，令人捉摸唔透。\n所以，為咗避免呢種語義同邏輯上嘅問題，呢度唔會畀出佢嘅定義（建議參考官方 BASH 手冊），\n亦唔會用 “子 Shell” 呢個翻譯，只係從佢嘅實際表現去理解佢嘅定義。\n下面列舉嘅變量同 Subshell 概念有密切嘅關係。\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/bash.html\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eBash Reference Manual\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eBash 參考手冊\u003c/p\u003e","tags":[],"title":"Subshell"},{"content":"Orbstack 在 macOS 上使用 Orbstack 構建和安裝 Shadow 項目。\nbrew install orbstack\r打開 Orbstack 應用（更換鏡像倉庫，可選）。\n安裝依賴 進入容器。\ndocker run -it --name shadow ubuntu:22.04 /bin/bash\r先更新軟件包，否則無法安裝任何東西。\napt-get update\r安裝 vim 和 git。\napt-get install -y vim git\r參考 shadow 項目文檔，安裝相關依賴。\napt-get build-dep -y shadow\r通常會報以下錯誤。\nE: You must put some \u0026#39;deb-src\u0026#39; URIs in your sources.list\r使用 vim 編輯 /etc/apt/sources.list，添加 deb-src 源。\n# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to # newer versions of the distribution. deb http://archive.ubuntu.com/ubuntu/ jammy main restricted # deb-src http://archive.ubuntu.com/ubuntu/ jammy main restricte\r把上面的 # deb-src 註釋去掉就行，再次運行。\napt-get update\r再次安裝相關依賴，這次應該不會報錯了。\napt-get build-dep -y shadow\r配置 下載源碼。\ngit clone https://github.com/shadow-maint/shadow.git\r運行項目的配置腳本 autogen.sh。\n./autogen.sh --without-selinux --enable-man --with-yescrypt\r報錯如下。\nautoreconf: configure.ac: not using Intltool autoreconf: configure.ac: not using Gtkdoc autoreconf: running: aclocal --force autoreconf: running: /usr/bin/autoconf --force configure.ac:35: error: possibly undefined macro: LT_LIB_DLLOAD If this token and others are legitimate, please use m4_pattern_allow. See the Autoconf documentation. configure.ac:135: error: possibly undefined macro: AC_MSG_WARN autoreconf: error: /usr/bin/autoconf failed with exit status: 1\r這裡有幾個錯誤，先處理 LT_LIB_DLLOAD。\napt-get install -y libltdl-dev\r再運行 ./autogen.sh。\nconfigure.ac:135: error: possibly undefined macro: AC_MSG_WARN If this token and others are legitimate, please use m4_pattern_allow. See the Autoconf documentation. autoreconf: error: /usr/bin/autoconf failed with exit status: 1\r再安裝 pkg-config。\napt-get install -y pkg-config\r再次運行 ./autogen.sh 還會報錯。\nconfigure: error: readpassphrase() is missing, either from libc or libbsd\r安裝 libbsd-dev。\napt-get install -y libbsd-dev\r再次運行 ./autogen.sh 應該不會報錯了。\n構建安裝 make -j4\rmake install\r","date":"2024-10-03","id":22,"permalink":"/zh-hk/tech/fourd-pocket/shadow-install/","summary":"\u003ch2 id=\"orbstack\"\u003eOrbstack\u003c/h2\u003e\n\u003cp\u003e在 macOS 上使用 Orbstack 構建和安裝 Shadow 項目。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebrew install orbstack\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e打開 Orbstack 應用（更換鏡像倉庫，可選）。\u003c/p\u003e\n\u003ch2 id=\"安裝依賴\"\u003e安裝依賴\u003c/h2\u003e\n\u003cp\u003e進入容器。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run -it --name shadow ubuntu:22.04 /bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e先更新軟件包，否則無法安裝任何東西。\u003c/p\u003e","tags":[],"title":"Shadow 構建和安裝"},{"content":"MAN 呢個指令可以睇手冊頁中唔同嘅章節（Section）。\nman man\rman - an interface to the system reference manuals The table below shows the section numbers of the manual followed by the types of pages they contain. 1 Executable programs or shell commands 2 System calls (functions provided by the kernel) 3 Library calls (functions within program libraries) 4 Special files (usually found in /dev) 5 File formats and conventions, e.g. /etc/passwd 6 Games 7 Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7) 8 System administration commands (usually only for root) 9 Kernel routines [Non standard]\rSection man 1 ls/cp/mv man 2 write/open/close man 3 printf/malloc/free man 4 tty/null/random man 5 passwd/fstab man 7 man man 8 ifconfig/iptables/mount man 9 fork # not work\rGames fortune 可以隨機嘅名言警句同笑話。\napt install fortune/fortune-mod/fortunes-zh\rman 6 fortune\rfortune - print a random, hopefully interesting, adage\r可以結合 cowsay 同 lolcat 一齊玩。\nfortune | cowsay | lolcat\rPWD Print Working Directory。\nman pwd\rpwd - print name of current/working directory\rCAT man cat\rcat - concatenate files and print on the standard output\r顯示行號 - 包括空行 cat -n FILE\r顯示行號 - 唔包括空行 cat -b FILE\rLS man ls\rls - list directory contents\r文件詳細信息 ls -lh\rdrwx------ 9 root root 4.0K Aug 7 22:38 root crw-rw-rw- 1 root tty 5, 0 Aug 7 22:33 /dev/tty brw-rw---- 1 root disk 252, 0 Aug 7 21:30 /dev/vda\r文件類型：d 目錄，- 文件，l 鏈接，c 字符設備，b 塊設備。 文件權限：700，Owner: 7，Group: 0, Other: 0 硬鏈接數：9 文件屬主：root 文件組別：root 文件大小：4.0K 修改時間：Aug 7 22:38 文件名稱：root 主設備號：Major Number，5/252，標識設備驅動程序 次設備號：Minor Number，0，標識同一類設備中嘅某個設備實例 只顯示目錄 ls -ld */\r包括隱藏文件\nls -ld .*/ */\r顯示特定目錄信息 ls -ld /usr\r喺文件後面添加類型符號 ls -lF /\r/：目錄 *：可執行文件 @：符號鏈接 |：命名管道 =：套接字 隱藏字符 ls ~ | wc -l\rls 命令嘅輸出中有隱藏字符 \\n。\nls ~ | od -c\r0000000 f i l e \\n f o o \\n f o o b a r \\n 0000020\r仲可以用 cat -A。\nls ~ | cat -A\rfile$ foo$ foobar$\rFILE 顯示文件類型\nman file\rfile — determine file type\r字符/塊設備 file /dev/tty\r/dev/tty: character special (5/0)\rfile /dev/vda\r/dev/vda: block special (252/0)\r鏈接文件 注意結尾斜杆。\nfile /bin\r/bin: symbolic link to usr/bin\rfile /bin/\r/bin/: directory\rLESS more 命令只能按回車加載，less 命令更強大，因為 less is more。\nman less\rless - opposite of more\rUSERMOD man usermod\rusermod - modify a user account\r禁止賬號登錄 usermod -s /sbin/nologin kuga\r呢個命令會喺 /etc/passwd 中把 bin/sh 改為 /sbin/nologin\nkuga:x:1000:1000::/home/kuga:/sbin/nologin\r授權用戶組 下面嘅命令會俾 kuga 用戶授權 sudo 用戶組。\nusermod -aG sudo kuga\rLN man ln\rln - make links between files\r軟鏈接 go rocks\nDF man df\rdf - report file system disk space usage\r以可讀格式輸出 df -h\r指定文件系統類型 df -h -t ext4\rdf -h -t apfs\rext4 係 Linux 嘅文件系統類型，apfs 係 macOS 嘅文件系統類型。\nDU Disk Usage\nman du\rdu - estimate file space usage\r睇文件/目錄總大小 du -sh ~/Downloads\r排序文件 - 含子目錄 du -ah ~/Downloads/* | sort -rh | head -n 5\rdu -ah ~/Downloads --max-depth=1 | sort -rh | head -n 10\r排序文件 - 唔含子目錄 du -sh ~/Downloads/* | sort -rh | head -n 5\r","date":"2024-08-24","id":23,"permalink":"/zh-hk/linux/cmd/common-1/","summary":"\u003ch2 id=\"man\"\u003eMAN\u003c/h2\u003e\n\u003cp\u003e呢個指令可以睇手冊頁中唔同嘅章節（Section）。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman man\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\" text-wrap=\"wrap\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman - an interface to the system reference manuals\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThe table below shows the section numbers of the manual followed by the types of pages they contain.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e Executable programs or shell commands\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e System calls \u003cspan class=\"o\"\u003e(\u003c/span\u003efunctions provided by the kernel\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e Library calls \u003cspan class=\"o\"\u003e(\u003c/span\u003efunctions within program libraries\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e Special files \u003cspan class=\"o\"\u003e(\u003c/span\u003eusually found in /dev\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e5\u003c/span\u003e File formats and conventions, e.g. /etc/passwd\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e6\u003c/span\u003e Games\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e7\u003c/span\u003e Miscellaneous \u003cspan class=\"o\"\u003e(\u003c/span\u003eincluding macro packages and conventions\u003cspan class=\"o\"\u003e)\u003c/span\u003e, e.g. man\u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e, groff\u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e8\u003c/span\u003e System administration commands \u003cspan class=\"o\"\u003e(\u003c/span\u003eusually only \u003cspan class=\"k\"\u003efor\u003c/span\u003e root\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e9\u003c/span\u003e Kernel routines \u003cspan class=\"o\"\u003e[\u003c/span\u003eNon standard\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"section\"\u003eSection\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e1\u003c/span\u003e ls/cp/mv\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e2\u003c/span\u003e write/open/close\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e3\u003c/span\u003e printf/malloc/free\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e4\u003c/span\u003e tty/null/random\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e5\u003c/span\u003e passwd/fstab\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e7\u003c/span\u003e man\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e8\u003c/span\u003e ifconfig/iptables/mount\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e9\u003c/span\u003e fork \u003cspan class=\"c1\"\u003e# not work\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"games\"\u003eGames\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003efortune\u003c/code\u003e 可以隨機嘅名言警句同笑話。\u003c/p\u003e","tags":[],"title":"常用命令-1"},{"content":"SORT 預設按字符嘅編碼排序，唔係數值。\nsort - sort lines of text files\r按逆序排列 sort -r file\r按數值排序 sort -n file\r按月份排序 月份格式：Jan、Feb、Mar。\nsort -M file\r指定列 預設按（連續嘅）空格或者制表符分隔。\nsort -k 1 file\r指定分隔符同列 -k 下標由 1 開始，第 3 列係用戶 ID。\nsort -t \u0026#39;:\u0026#39; -k 3 -n /etc/passwd\r忽略大小寫 sort -f file\r結果去重 sort -u file\rALIAS sort - sort lines of text files\r睇可能嘅別名 alias -p\rTYPE 外/內部命令 可以睇命令係咪內部命令，內部命令同 Shell 編譯成一體，同外部命令唔同，唔使子進程執行。\ntype cd\rcd is a shell builtin\rtype ps\rps is hashed (/usr/bin/ps)\r睇所有實現 type -a echo\recho is a shell builtin echo is /usr/bin/echo echo is /bin/echo\r睇命令嘅別名 type ll\rll is aliased to `ls -alF\u0026#39;\rtype -a ls\rls is aliased to `ls --color=auto\u0026#39; ls is /usr/bin/ls ls is /bin/ls\rREADLINK readlink - print resolved symbolic links or canonical file names\r睇最後嘅鏈接 唔使一個一個睇。\nreadlink -f /bin/vim\r/usr/bin/vim.basic\r","date":"2024-08-24","id":24,"permalink":"/zh-hk/linux/cmd/common-2/","summary":"\u003ch2 id=\"sort\"\u003eSORT\u003c/h2\u003e\n\u003cp\u003e預設按字符嘅編碼排序，唔係數值。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esort - sort lines of text files\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"按逆序排列\"\u003e按逆序排列\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esort -r file\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"按數值排序\"\u003e按數值排序\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esort -n file\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"按月份排序\"\u003e按月份排序\u003c/h3\u003e\n\u003cp\u003e月份格式：\u003ccode\u003eJan\u003c/code\u003e、\u003ccode\u003eFeb\u003c/code\u003e、\u003ccode\u003eMar\u003c/code\u003e。\u003c/p\u003e","tags":[],"title":"常用命令-2"},{"content":"簡介 全稱 Global Regular Expression Print，來源於一個 Unix 編輯器 ed 中嘅命令 g/re/p， 其中 g（global）係全局匹配，re（regular expression）係正則表達式，p（print）係打印。 所以，grep 工具本質上就係用嚟全局匹配正則表達式並打印結果。\nman grep\rgrep, egrep, fgrep, rgrep - print lines that match patterns\r另外 egrep、fgrep 、rgrep 分別同 grep -E、grep -F 、grep -r 一樣。 呢啲變體已經被棄用，但為咗向後兼容仍然提供。 另外如果唔使用正則表達式，使用 -F 選項會快啲， 因為預設情況下，即使冇使用正則表達式，grep 仍然會將模式視為正則表達式。\n正則表達式 grep 預設使用POSIX嘅正則表達式，根據唔同選項分為以下幾種：\n基本正則表達式（Basic Regular Expressions，BRE）： 預設模式，POSIX 標準，某啲元字符（如 ?、+、{}）需要通過反斜杠 \\ 嚟轉義。\n擴展正則表達式（Extended Regular Expressions，ERE）： 通過 grep -E 或 egrep 使用，像 ?、+、{} 等元字符可以直接使用，唔使轉義。\nPerl 風格嘅正則表達式（Perl-Compatible Regular Expressions，PCRE）： 某啲 grep 實現（如 GNU grep）提供咗 -P 選項，用於啟用 Perl 風格嘅正則表達式。\nNote\n某啲 grep 實現（如 GNU grep）提供咗 -P 選項，用於啟用 Perl 風格嘅正則表達式。\n常用例子 反向匹配 grep -v foo file\r忽略大小寫 grep -i Foo file\r統計匹配行數 grep -c foo file\r固定字符串匹配 grep -F foo file\r遞歸搜索目錄文件 grep -r foo /path\r列出匹配嘅文件名 grep -l foo *.txt\r列出唔匹配嘅文件名 grep -rL foo /path\r匹配行及後面 N 行 After\ngrep -A 3 foo file\r匹配行及前面 N 行 Before\ngrep -B 3 foo file\r匹配行及前後 N 行 Context\ngrep -C 3 foo file\r匹配多個單詞 grep -E \u0026#39;foo|bar\u0026#39; file\rgrep -e \u0026#39;foo\u0026#39; -e \u0026#39;bar\u0026#39; file\r排除目錄某啲文件 grep foo --exclude=\u0026#34;*.log\u0026#34; /path\r匹配目錄某啲文件 grep foo --include=\u0026#34;*.txt\u0026#34; /path\r","date":"2024-08-24","id":25,"permalink":"/zh-hk/linux/cmd/grep/","summary":"\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cp\u003e全稱 \u003cstrong\u003eGlobal Regular Expression Print\u003c/strong\u003e，來源於一個 Unix 編輯器 \u003ccode\u003eed\u003c/code\u003e 中嘅命令 \u003ccode\u003eg/re/p\u003c/code\u003e，\n其中 \u003ccode\u003eg\u003c/code\u003e（global）係全局匹配，\u003ccode\u003ere\u003c/code\u003e（regular expression）係正則表達式，\u003ccode\u003ep\u003c/code\u003e（print）係打印。\n所以，\u003ccode\u003egrep\u003c/code\u003e 工具本質上就係用嚟全局匹配正則表達式並打印結果。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman grep\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egrep, egrep, fgrep, rgrep - print lines that match patterns\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e另外 \u003ccode\u003eegrep\u003c/code\u003e、\u003ccode\u003efgrep\u003c/code\u003e 、\u003ccode\u003ergrep\u003c/code\u003e 分別同 \u003ccode\u003egrep -E\u003c/code\u003e、\u003ccode\u003egrep -F\u003c/code\u003e 、\u003ccode\u003egrep -r\u003c/code\u003e 一樣。\n呢啲變體已經被棄用，但為咗向後兼容仍然提供。\n另外如果唔使用正則表達式，\u003cstrong\u003e使用 \u003ccode\u003e-F\u003c/code\u003e 選項會快啲\u003c/strong\u003e，\n因為預設情況下，即使冇使用正則表達式，\u003ccode\u003egrep\u003c/code\u003e  仍然會將模式視為正則表達式。\u003c/p\u003e","tags":[],"title":"GREP 命令"},{"content":"登錄信息 w\r13:46:05 up 3 days, 16:15, 2 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/0 120.231.138.139 13:43 1.00s 0.00s 0.00s w kuga pts/1 120.231.138.139 13:44 53.00s 0.02s 0.02s -bash\r下面執行的命令都是基於以上的環境配置。\n進程狀態 PS 全稱是 Process Status。\nman ps\rps - report a snapshot of the current processes.\r風格 來源 前綴 Unix 貝爾實驗室的 AT\u0026amp;T 系統 - BSD 伯克利軟件發行版 無 GNU GNU 組織的改進版本 -- 因為歷史的原因 ps 命令混雜著各種不同的風格，有時候確跟 💩 一樣。\n不添加任何選項 ps\rPID TTY TIME CMD 20274 pts/0 00:00:00 bash 20714 pts/0 00:00:00 sleep 20715 pts/0 00:00:00 ps\r不添加任何選項時，它會顯示所有與當前終端相關的進程。 簡單來說，如果當前終端的 TTY 是 pts/0，那麼他會顯示所有 TTY 是 pts/0 的進程。 通常包括 Shell 進程、從這個終端啟動的任何進程（無論是前台還是後台），以及 ps 命令本身。 上面的 sleep 進程是我使用後台進程的方式啟動的。\nnohup sleep 60 \u0026amp;\r基礎選項 選項：a 顯示與終端相關的所有進程，不僅僅是當前終端或當前用戶。\nps a\rPID TTY STAT TIME COMMAND 821 ttyS0 Ss+ 0:00 /sbin/agetty -o -p -- \\u --keep-baud 115200,57600,38400,9600 ttyS0 vt220 845 tty1 Ss+ 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux 23300 pts/0 Ss 0:00 -bash 23393 pts/1 Ss+ 0:00 -bash 23475 pts/0 R+ 0:00 ps a\r上面的結果是從 pts/0 終端執行的，可以看到，終端為 ttyS0、tty1、pts/1 的進程都顯示出來了， 也沒有區分用戶，pts/0、ttyS0 、tty1 是 root 的，pts/1 是 kuga 的。\n選項：u 以用戶友好的格式顯示進程信息。\nps u\rUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 821 0.0 0.0 5800 1092 ttyS0 Ss+ Aug07 0:00 /sbin/agetty -o -p -- \\u --keep-baud 115200,57600,3 root 845 0.0 0.0 6176 1072 tty1 Ss+ Aug07 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux root 23300 0.0 0.3 8792 5616 pts/0 Ss 13:43 0:00 -bash root 23480 0.0 0.0 10072 1588 pts/0 R+ 14:01 0:00 ps u\r如果這個選項只跟顯示字段有關，那它的進程集應該和沒有添加任何選項的 ps 命令一樣。 然而上面的結果表明，除了自身終端 pts/0 的進程，它也顯示了別的終端進程， 但它沒有顯示 pts/1 的終端進程（用戶是 kuga）。\n可以簡單得出結論，u 選項的進程集就是：與當前用戶終端相關的所有進程。 上面就是與 root 用戶相關的所有終端進程，如果在 kuga 用戶的終端執行 ps u， 可以得到下面的結果，完全符合預期。\nps u\rUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND kuga 23393 0.0 0.3 8660 5452 pts/1 Ss 13:44 0:00 -bash kuga 23496 0.0 0.0 10072 1608 pts/1 R+ 14:22 0:00 ps u\r另外這個進程集的定義不是 u 選項特有的，它和 BSD 風格有關。\n選項：x 顯示屬於當前用戶的所有進程。\nps x\rPID TTY STAT TIME COMMAND 23330 ? Ss 0:00 /lib/systemd/systemd --user 23331 ? S 0:00 (sd-pam) 23392 ? R 0:00 sshd: kuga@pts/1 23393 pts/1 Ss 0:00 -bash 23719 pts/1 R+ 0:00 ps x\r上面的結果是在 kuga 用戶的終端執行的，所以進程數量不會太多。\n選項：-e 顯然所有進程。\nman ps | grep \u0026#34;\\-e \u0026#34;\r-e Select all processes. Identical to -A.\r選項：-f 以全格式（full-format）顯示進程信息，可以與其他 UNIX-style 的選項組合使用。\nman ps | grep \u0026#34;\\-f \u0026#34;\r-f Do full-format listing. This option can be combined with many other UNIX-style options to add\rps -f\rUID PID PPID C STIME TTY TIME CMD root 23300 23163 0 13:43 pts/0 00:00:00 -bash root 24317 23300 0 16:53 pts/0 00:00:00 ps -f\r選項：-o 自定義輸出字段，不能與 -f 和 u 選項共用。\nps -o uid,user,pid,%cpu,%mem,cmd\rUID USER PID %CPU %MEM CMD 0 root 23300 0.0 0.3 -bash 0 root 24311 0.0 0.0 ps -o uid,user,pid,%cpu,%mem,cmd\r注意這裡的 uid 和使用 -f 選項顯示的內容不一樣，這裡是數字 ID，但 -f 會顯示用戶名。\n選項：-p 指定進程 PID。\nps up 1\rUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.7 167696 13328 ? Ss Aug07 0:08 /lib/systemd/systemd --system --deserialize 36 noib\r選項：--forest 以 ASCII 顯示進程與子進程的樹狀結構。\nman ps | grep -A 1 \u0026#34;\\--forest\u0026#34;\r--forest ASCII art process tree.\rps -o pid,ppid,cmd --forest\rPID PPID CMD 23300 23163 -bash 24537 23300 \\_ ps -o pid,ppid,cmd --forest\r不同風格的進程集 不同風格的選項進程集是不一樣的，但只要細心觀察，還是能發現一些規律。\nps：不添加任何選項\nps\rPID TTY TIME CMD 2090 pts/0 00:00:00 bash 2261 pts/0 00:00:00 ps\rps -l：Unix 風格，-l 表示以長格式顯示。\nps -l\rF S UID PID PPID C PRI NI ADDR SZ WCHAN TTY TIME CMD 4 S 0 2090 2034 0 80 0 - 2198 do_wai pts/0 00:00:00 bash 4 R 0 2262 2090 0 80 0 - 2518 - pts/0 00:00:00 ps\rps l：BSD 風格，l 表示以 BSD 長格式顯示。\nps l\rF UID PID PPID PRI NI VSZ RSS WCHAN STAT TTY TIME COMMAND 4 0 760 1 20 0 5800 1160 do_sel Ss+ ttyS0 0:00 /sbin/agetty -o -p -- \\u --keep-baud 115200,57600,38400,9600 ttyS0 vt220 4 0 779 1 20 0 6176 1108 do_sel Ss+ tty1 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux 4 0 2090 2034 20 0 8792 5492 do_wai Ss pts/0 0:00 -bash 4 0 2298 2090 20 0 10072 1608 - R+ pts/0 0:00 ps l\rps --forest：GNU 風格，--forest 表示以進程樹的方式顯示。\nps --forest\rPID TTY TIME CMD 2090 pts/0 00:00:00 bash 2316 pts/0 00:00:00 \\_ ps\r上面的例子中，所用的選項都是和進程集無關的，可以總結出如下規律：\n風格 進程集 無選項 顯示所有與當前終端相關的進程 Unix 與不添加選項一致 BSD 顯示與當前用戶終端相關的所有進程 GNU 與不添加選項一致 顯然，Unix 和 GNU 風格看上去更符合邏輯，因為它們的進程集和不添加選項時的進程集是一樣的， 但 BSD 風格就自己加戲了，把當前用戶其他終端相關的進程也包含進來了。 不同風格的選項可以一起使用，但如果兩個選項都是指定顯示格式，會無法執行。 另外，如果多個風格中包含了 BSD 風格，但選項中又沒有指定進程集，那麼默認會使用 BSD 的進程集。\n常用功能 列出用戶進程 ps -fu kuga\r列出所有進程 ps -ef\r-e 顯示所有進程，-f 以全格式顯示，這沒什麼好說的。\nps aux\r奇怪的是 aux 的進程集，從上面的分析可以知道：\na：顯示與終端相關的所有進程，不僅僅是當前終端或當前用戶。 x：顯示屬於當前用戶的所有進程。 顯然 ax 加起來也只是當前用戶的所有進程和不區分用戶的所有終端進程，但如果再看一下官方的文檔。\na ... or to list all processes when used together with the x option. x ... or to list all processes when used together with the a option.\rax 一起用的時候代表所有進程，我們也可以驗證一下進程數。\nps aux | wc -l\rps -ef | ec -l\r可以看到 aux 和 -ef 的進程集數量是一樣的，我很細節的，我說的是數量🤪。\n占用內存排名 go rocks\n特殊字段說明 VSZ Virtual Memory Size，虛擬內存大小，以 KB 為單位。\nRSS Resident Set Size，常駐內存大小，以 KB 為單位。\nTTY 進程關聯的終端。如果進程與某個終端關聯，它會顯示終端的名稱；如果未關聯終端，則顯示 ?。\nSTAT 進程的狀態碼。常見的狀態碼包括：\nR: 運行中（Running）。 S: 睡眠中（Sleeping），等待某個事件完成。 D: 不可中斷的睡眠狀態（Uninterruptible Sleep），通常是等待 I/O。 T: 暫停或跟踪中（Stopped or Traced）。 Z: 僵尸進程（Zombie），進程已經終止，但未被父進程清理。 I: 空閒內核線程（Idle Kernel Thread）。 Ss: 主進程處於睡眠狀態。 R+: 運行中的進程，並且在前台顯示。 go rocks 需要深入理解不同的進程狀態\nSTART 進程啟動的時間或日期。對於新進程，顯示的是時間，對於舊進程，顯示的是日期。\nTIME 進程使用 CPU 的累計時間，表示該進程總共占用了多少 CPU 時間。\nC 進程的 CPU 使用率。這個字段顯示的是自進程啟動以來，CPU 時間的累積使用百分比。\n","date":"2024-08-24","id":26,"permalink":"/zh-hk/linux/cmd/ps/","summary":"\u003ch2 id=\"登錄信息\"\u003e登錄信息\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ew\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e 13:46:05 up \u003cspan class=\"m\"\u003e3\u003c/span\u003e days, 16:15,  \u003cspan class=\"m\"\u003e2\u003c/span\u003e users,  load average: 0.00, 0.00, 0.00\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eroot     pts/0    120.231.138.139  13:43    1.00s  0.00s  0.00s w\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ekuga     pts/1    120.231.138.139  13:44   53.00s  0.02s  0.02s -bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e下面執行的命令都是基於以上的環境配置。\u003c/p\u003e","tags":[],"title":"PS 命令"},{"content":"簡介 man top\rtop - display Linux processes\rtop 命令預設按進程 CPU 使用率嘅倒序嚟排序，並動態展示結果。\ntop - 09:19:05 up 6 days, 10:02, 2 users, load average: 0.13, 0.05, 0.01 Tasks: 126 total, 1 running, 125 sleeping, 0 stopped, 0 zombie %Cpu(s): 0.5 us, 0.0 sy, 0.0 ni, 99.5 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st MiB Mem : 1673.0 total, 252.3 free, 299.5 used, 1121.3 buff/cache MiB Swap: 0.0 total, 0.0 free, 0.0 used. 1197.7 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 988 root 20 0 90428 14260 11860 S 0.7 0.8 58:31.33 AliYunDun 1008 root 20 0 139912 36880 18280 S 0.7 2.2 99:59.21 AliYunDunMonito 39433 root 20 0 10508 3912 3304 R 0.3 0.2 0:00.03 top 1 root 20 0 167744 13388 8416 S 0.0 0.8 0:07.59 systemd\r頭部信息 系統信息 top - 09:19:05 up 6 days, 10:02, 2 users, load average: 0.13, 0.05, 0.01\r當前系統時間：09:19:05 系統運行時間：6 日 10 小時 2 分鐘 當前登入用戶：2 個 系統平均負載：1 分鐘、5 分鐘、15 分鐘 進程概要 Tasks: 126 total, 1 running, 125 sleeping, 0 stopped, 0 zombie\r總進程數：126 正在運行嘅進程數：1 睡眠狀態嘅進程數：125 停止狀態嘅進程數：0 僵屍狀態嘅進程數：0 CPU 使用情況 %Cpu(s): 0.5 us, 0.0 sy, 0.0 ni, 99.5 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st\r用戶進程嘅 CPU 佔比：0.5, user 系統進程嘅 CPU 佔比：0.0, system 包含 nice value 進程嘅 CPU 佔比：0.0 空閒 CPU 佔比：99.5, idle 等待 IO 操作嘅 CPU 佔比：0.0, wait 處理硬件中斷嘅 CPU 佔比：0.0, hardware interrupts 處理軟件中斷嘅 CPU 佔比：0.0, software interrupts 被虛擬化程序偷走嘅 CPU 佔比：0.0, stolen 記憶體使用情況 MiB Mem : 1673.0 total, 252.3 free, 299.5 used, 1121.3 buff/cache\r單位：MiB, Million Byte 總數：1673.0 MB 空閒：252.3 MB 已用：299.5 MB 緩存：1121.3 MB 交換區使用情況 MiB Swap: 0.0 total, 0.0 free, 0.0 used. 1197.7 avail Mem\r總數：0.0 空閒：0.0 已用：0.0 可用：1197.7 MB（buff/cache） 總數為 0 有可能係因為冇配置交換區，可以使用以下命令檢查。\nswapon --show\r如果乜都冇輸出，就表示冇配置交換區。\n字段管理模式 按下 f 或 Shift + f 鍵，此時會進入字段管理模式。\nFields Management for window 1:Def, whose current sort field is %CPU Navigate with Up/Dn, Right selects for move then \u0026lt;Enter\u0026gt; or Left commits, \u0026#39;d\u0026#39; or \u0026lt;Space\u0026gt; toggles display, \u0026#39;s\u0026#39; sets sort. Use \u0026#39;q\u0026#39; or \u0026lt;Esc\u0026gt; to end!\rwindow 1:Def 窗口編號係 1，使用默認（Default）嘅字段配置。\n修改字段顯示順序 按右方向鍵選擇需要移動嘅字段，上下移動後，按回車或左方向鍵提交。\n設定是否顯示字段 選擇好字段後，按 d 或空格鍵。\n設定當前排序字段 選擇好字段後，按 s 鍵，只喺當前會話生效。\n其他非常用字段 go rocks\n多窗口模式 按下 Shift + A 鍵，會出現 4 個 top 窗口，左上角會顯示窗口嘅名稱， 每個窗口顯示嘅字段同排序嘅方式唔同，都可以通過字段管理模式修改。\n常用操作 返回單窗口模式：Shift + A 選擇下一個窗口：a 鍵。 選擇上一個窗口：w 鍵。 選擇指定嘅窗口：g 鍵，選 1-4 。 修改窗口嘅名稱：Shift + G，輸入 1-3 個字符。 進入字段管理模式：Shift + F。 常見窗口 1:Def：編號 1，按 %CPU 逆序排序。 2:Job：編號 2，按 PID 逆序排序。 3:Mem：編號 3，按 %Mem 逆序排序。 4:Usr：編號 4，按 USER 逆序排序。 個性化窗口顏色 Shift + Z 進入顏色配置模式，下面已經寫得明明白白了。\nHelp for color mapping - \u0026#34;Current Window\u0026#34; = 1:Def color - 04:25:44 up 8 days, 50 min, 7 users, load average: Tasks: 64 total, 2 running, 62 sleeping, 0 stopped, %Cpu(s): 76.5 user, 11.2 system, 0.0 nice, 12.3 idle Nasty Message! -or- Input Prompt PID TTY PR NI %CPU TIME+ VIRT SWAP S COMMAND 17284 pts/2 8 0 0.0 0:00.75 1380 0 S /bin/bash 8601 pts/1 7 -10 0.4 0:00.03 916 0 R color -b -z 11005 ? 9 0 0.0 0:02.50 2852 1008 S amor -sessi available toggles: B =disable bold globally (Off), z =color/mono (On), b =tasks \u0026#34;bold\u0026#34;/reverse (On) 1) Select a target as an upper case letter, current target is T : S = Summary Data, M = Messages/Prompts, H = Column Heads, T = Task Information 2) Select a color as a number or use the up/down arrow keys to raise/lower the 256 colors value, current color is 1 : 0 = black, 1 = red, 2 = green, 3 = yellow, 4 = blue, 5 = magenta, 6 = cyan, 7 = white 3) Then use these keys when finished: \u0026#39;q\u0026#39; or \u0026lt;Esc\u0026gt; to abort changes to window \u0026#39;1:Def\u0026#39; \u0026#39;a\u0026#39; or \u0026#39;w\u0026#39; to commit \u0026amp; change another, \u0026lt;Enter\u0026gt; to commit and end\r可修改不同窗口（1:Def）的配置，按 a 或 w 選擇。 可用開關：Shift + B、z、b。 可修改 4 個部分的顏色，Shift + S/M/H/T。 修改的顏色可以輸入數字，也可以使用上下鍵選擇。 q 或 Esc 取消配置，Enter 提交配置。 退出顏色模式後，如果想持久化配置，需要按 Shift + W，文件保存路徑：\n~/.config/procps/toprc\r注意，如果保存的時候在多窗口模式，下次打開也會是多窗口模式。\n常用快捷鍵 部分快捷鍵也會修改當前 top 命令會話窗口嘅屬性。\nh：顯示幫助菜單，列出所有可用嘅命令。 0：切換值為 0 嘅字段顯示/隱藏。 1：切換顯示每個 CPU 核心嘅使用情況。 k：終止進程，輸入 PID。 r：調整進程嘅優先級（renice）。 z：切換顏色顯示模式。 x：高亮顯示當前排序嘅列。 c：切換命令行顯示/隱藏。 n：改變顯示進程嘅數量，輸入顯示嘅進程數。 Shift + W：保存當前配置。 Shift + Z：進入顏色模式。 Shift + P：按 CPU 使用率排序。 Shift + M：按內存使用率排序。 Shift + N：按 PID 排序。 Shift + T：按進程運行時間排序。 特殊字段說明 PR 優先級。\nNI Nice Value。\nVIRT Virtual Image (KiB)。\nRES Resident Size (KiB)。\nSHR 共享內存大小。\nS 進程狀態，參考 PS 命令。\nTIME+ CPU Time, hundredths，進程啟動後佔用嘅 CPU 時間總和。\n","date":"2024-08-24","id":27,"permalink":"/zh-hk/linux/cmd/top/","summary":"\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman top\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etop - display Linux processes\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003etop 命令預設按進程 \u003cstrong\u003eCPU 使用率嘅倒序\u003c/strong\u003e嚟排序，並動態展示結果。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etop - 09:19:05 up \u003cspan class=\"m\"\u003e6\u003c/span\u003e days, 10:02,  \u003cspan class=\"m\"\u003e2\u003c/span\u003e users,  load average: 0.13, 0.05, 0.01\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTasks: \u003cspan class=\"m\"\u003e126\u003c/span\u003e total,   \u003cspan class=\"m\"\u003e1\u003c/span\u003e running, \u003cspan class=\"m\"\u003e125\u003c/span\u003e sleeping,   \u003cspan class=\"m\"\u003e0\u003c/span\u003e stopped,   \u003cspan class=\"m\"\u003e0\u003c/span\u003e zombie\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e%Cpu\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e:  0.5 us,  0.0 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMiB Mem :   1673.0 total,    252.3 free,    299.5 used,   1121.3 buff/cache\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMiB Swap:      0.0 total,      0.0 free,      0.0 used.   1197.7 avail Mem\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"m\"\u003e988\u003c/span\u003e root      \u003cspan class=\"m\"\u003e20\u003c/span\u003e   \u003cspan class=\"m\"\u003e0\u003c/span\u003e   \u003cspan class=\"m\"\u003e90428\u003c/span\u003e  \u003cspan class=\"m\"\u003e14260\u003c/span\u003e  \u003cspan class=\"m\"\u003e11860\u003c/span\u003e S   0.7   0.8  58:31.33 AliYunDun\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"m\"\u003e1008\u003c/span\u003e root      \u003cspan class=\"m\"\u003e20\u003c/span\u003e   \u003cspan class=\"m\"\u003e0\u003c/span\u003e  \u003cspan class=\"m\"\u003e139912\u003c/span\u003e  \u003cspan class=\"m\"\u003e36880\u003c/span\u003e  \u003cspan class=\"m\"\u003e18280\u003c/span\u003e S   0.7   2.2  99:59.21 AliYunDunMonito\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"m\"\u003e39433\u003c/span\u003e root      \u003cspan class=\"m\"\u003e20\u003c/span\u003e   \u003cspan class=\"m\"\u003e0\u003c/span\u003e   \u003cspan class=\"m\"\u003e10508\u003c/span\u003e   \u003cspan class=\"m\"\u003e3912\u003c/span\u003e   \u003cspan class=\"m\"\u003e3304\u003c/span\u003e R   0.3   0.2   0:00.03 top\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"m\"\u003e1\u003c/span\u003e root      \u003cspan class=\"m\"\u003e20\u003c/span\u003e   \u003cspan class=\"m\"\u003e0\u003c/span\u003e  \u003cspan class=\"m\"\u003e167744\u003c/span\u003e  \u003cspan class=\"m\"\u003e13388\u003c/span\u003e   \u003cspan class=\"m\"\u003e8416\u003c/span\u003e S   0.0   0.8   0:07.59 systemd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"頭部信息\"\u003e頭部信息\u003c/h2\u003e\n\u003ch3 id=\"系統信息\"\u003e系統信息\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etop - 09:19:05 up \u003cspan class=\"m\"\u003e6\u003c/span\u003e days, 10:02,  \u003cspan class=\"m\"\u003e2\u003c/span\u003e users,  load average: 0.13, 0.05, 0.01\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e當前系統時間：09:19:05\u003c/li\u003e\n\u003cli\u003e系統運行時間：6 日 10 小時 2 分鐘\u003c/li\u003e\n\u003cli\u003e當前登入用戶：2 個\u003c/li\u003e\n\u003cli\u003e系統平均負載：1 分鐘、5 分鐘、15 分鐘\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"進程概要\"\u003e進程概要\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTasks: \u003cspan class=\"m\"\u003e126\u003c/span\u003e total,   \u003cspan class=\"m\"\u003e1\u003c/span\u003e running, \u003cspan class=\"m\"\u003e125\u003c/span\u003e sleeping,   \u003cspan class=\"m\"\u003e0\u003c/span\u003e stopped,   \u003cspan class=\"m\"\u003e0\u003c/span\u003e zombie\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e總進程數：126\u003c/li\u003e\n\u003cli\u003e正在運行嘅進程數：1\u003c/li\u003e\n\u003cli\u003e睡眠狀態嘅進程數：125\u003c/li\u003e\n\u003cli\u003e停止狀態嘅進程數：0\u003c/li\u003e\n\u003cli\u003e僵屍狀態嘅進程數：0\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"cpu-使用情況\"\u003eCPU 使用情況\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e%Cpu\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e:  0.5 us,  0.0 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e用戶進程嘅 CPU 佔比：0.5, user\u003c/li\u003e\n\u003cli\u003e系統進程嘅 CPU 佔比：0.0, system\u003c/li\u003e\n\u003cli\u003e包含 \u003ccode\u003enice value\u003c/code\u003e 進程嘅 CPU 佔比：0.0\u003c/li\u003e\n\u003cli\u003e空閒 CPU 佔比：99.5, idle\u003c/li\u003e\n\u003cli\u003e等待 IO 操作嘅 CPU 佔比：0.0, wait\u003c/li\u003e\n\u003cli\u003e處理硬件中斷嘅 CPU 佔比：0.0, hardware interrupts\u003c/li\u003e\n\u003cli\u003e處理軟件中斷嘅 CPU 佔比：0.0, software interrupts\u003c/li\u003e\n\u003cli\u003e被虛擬化程序偷走嘅 CPU 佔比：0.0, stolen\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"記憶體使用情況\"\u003e記憶體使用情況\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMiB Mem :   1673.0 total,    252.3 free,    299.5 used,   1121.3 buff/cache\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e單位：MiB, Million Byte\u003c/li\u003e\n\u003cli\u003e總數：1673.0 MB\u003c/li\u003e\n\u003cli\u003e空閒：252.3 MB\u003c/li\u003e\n\u003cli\u003e已用：299.5 MB\u003c/li\u003e\n\u003cli\u003e緩存：1121.3 MB\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"交換區使用情況\"\u003e交換區使用情況\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMiB Swap:      0.0 total,      0.0 free,      0.0 used.   1197.7 avail Mem\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e總數：0.0\u003c/li\u003e\n\u003cli\u003e空閒：0.0\u003c/li\u003e\n\u003cli\u003e已用：0.0\u003c/li\u003e\n\u003cli\u003e可用：1197.7 MB（buff/cache）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e總數為 0 有可能係因為冇配置交換區，可以使用以下命令檢查。\u003c/p\u003e","tags":[],"title":"TOP 命令"},{"content":"KILL 命令 其實佢係一個畀進程發信號嘅工具，唔一定係殺進程。\nman kill\rkill - send a signal to a process\r默認信號 kill 命令嘅默認信號係 SIGTERM，對應數字 15，優雅終止。\n列出可用信號 kill -l\r1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM ......\rkill -l 9 15\rKILL TERM\r指定信號類型 kill -s SIGKILL \u0026lt;PID\u0026gt;\rkill -9 \u0026lt;PID\u0026gt;\r發畀多個進程 kill -15 \u0026lt;PID\u0026gt; \u0026lt;PID\u0026gt; \u0026lt;PID\u0026gt;\r特殊進程號 -1 -1 進程號表示所有進程，以下命令會終止你（當前用戶）能終止嘅所有進程。\n危險\n唔好喺 root 用戶執行\nkill -9 -1\r假如我想喺 kuga 用戶執行，可以先喺 root 用戶睇下該用戶嘅進程。\nps -fu kuga\rUID PID PPID C STIME TTY TIME CMD kuga 42994 1 0 14:13 ? 00:00:00 /lib/systemd/systemd --user kuga 42995 42994 0 14:13 ? 00:00:00 (sd-pam) kuga 43056 42991 0 14:13 ? 00:00:00 sshd: kuga@pts/0 kuga 43057 43056 0 14:13 pts/0 00:00:00 -bash\r然後再到 kuga 終端執行命令 kill -9 -1。\nConnection to x.x.x.x closed by remote host. Connection to x.x.x.x closed.\r會即刻斷開連接，喺 root 上睇 kuga 用戶進程會發現全冇咗。\nPKILL 命令 通過進程嘅名稱嚟搵並發信號畀匹配嘅進程。\nman pkill\rsignal for processes based on name and other attributes\r默認信號 pkill 命令嘅默認信號係 SIGTERM，對應數字 15，優雅終止。\n指定信號類型 pkill -SIGKILL bash\rpkill -9 bash\r指定用戶進程 pkill -u kuga\rpkill -9 -u kuga bash\r精確匹配進程名稱 pkill -x sshd\rPGREP 通過進程嘅名稱嚟搵進程 ID。\nman pgrep\rlook up for processes based on name and other attributes 忽略大小寫 pgrep -i BASH\r指定用戶進程 pgrep -u kuga\r44087 44088 44149 44150\r列出進程 ID 和名稱 沒有 -l 就只會顯示進程 ID。\npgrep -l bash\r42977 bash 44150 bash\r列出匹配進程嘅數量 pgrep -c bash\r2\r指定父進程 ID pgrep -P 1729\r42912 44084\r最近啟動嘅進程 pgrep -n -l\rpgrep -n bash -l\r最早啟動嘅進程 pgrep -o -l\r1 systemd\r精確匹配進程名稱 pgrep -x sshd\r常用信號 SIGTERM - 15 請求進程終止。這個信號係「友好」嘅終止請求，進程可以捕捉到這個信號並執行清理工作，然後退出。 它係 kill 和 pkill 命令嘅默認信號。 通常用於優雅地終止進程，畀進程時間來處理未完成嘅任務。\nSIGKILL - 9 強制終止進程。此信號唔能被進程捕捉、阻塞或忽略，進程會立即被終止。 發送 SIGKILL 會直接停止進程，唔允許進程進行任何清理操作。 用於無法正常終止嘅進程，當 SIGTERM 無效時使用。\nSIGINT - 2 中斷信號，通常由用戶通過 Ctrl+C 發送，用於中斷前台運行嘅進程。 用於手動中斷進程，尤其是交互式進程。\nSIGQUIT - 3 退出信號，通常由用戶通過 Ctrl+\\ 發送，表示希望進程生成核心轉儲（core dump）並退出。 用於調試，當希望進程生成核心轉儲以便分析問題時使用。\nSIGHUP - 1 掛起信號，通常表示終端或控制台斷開連接。 許多守護進程在接收到 SIGHUP 信號時，會重新加載其配置文件。 用於重新加載守護進程嘅配置，或讓守護進程重啟。\n","date":"2024-08-24","id":28,"permalink":"/zh-hk/linux/cmd/terminate/","summary":"\u003ch2 id=\"kill-命令\"\u003eKILL 命令\u003c/h2\u003e\n\u003cp\u003e其實佢係一個畀進程發信號嘅工具，唔一定係殺進程。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman kill\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ekill\u003c/span\u003e - send a signal to a process\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"默認信號\"\u003e默認信號\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ekill\u003c/code\u003e 命令嘅默認信號係 \u003ccode\u003eSIGTERM\u003c/code\u003e，對應數字 \u003ccode\u003e15\u003c/code\u003e，優雅終止。\u003c/p\u003e","tags":[],"title":"終止進程"},{"content":"todorocks\n","date":"2024-08-24","id":29,"permalink":"/zh-hk/linux/cmd/compression/","summary":"\u003cp\u003etodorocks\u003c/p\u003e","tags":[],"title":"壓縮同解壓"},{"content":"起源 Linux 中嘅環境變量源自早期 UNIX 系統嘅設計需求。 通過環境變量，用戶同進程能夠動態咁影響系統行為，而唔需要修改系統嘅核心代碼。 呢種靈活性同可配置性使環境變量成為 Linux 系統同應用程序配置嘅關鍵部分。\n喺 UNIX 中，每個進程都有自己嘅環境（即一組環境變量），呢啲環境變量喺進程嘅啟動時由父進程傳遞畀子進程。 最典型嘅例子係當用戶登錄系統時，系統啟動嘅 Shell 進程會繼承一組默認嘅環境變量，例如用戶嘅主目錄、Shell 類型等。 用戶可以喺呢個基礎上修改或添加環境變量，影響自己啟動嘅程序或進程嘅行為。\n概念勘誤 有啲書籍同文章會把環境變量分為全局環境變量同局部環境變量，但呢種分類係唔準確嘅， 因為喺官方嘅文檔中，從來冇呢兩種分類嘅定義，甚至連英文名稱都冇。 因此，為咗避免語義上嘅邏輯問題，本文唔會對環境變量進行上述嘅分類。\n《Linux 命令行與Shell 腳本編程大全》\n《Linux Command Line and Shell Scripting Bible》\n上面呢本書關於環境變量嘅章節係有問題嘅，唔係翻譯嘅問題，原版就有問題。\n打印環境變量 命令：printenv 唔帶參數會打印所有環境變量。\nprintenv | head -n 3\rSHELL=/bin/bash PWD=/home/kuga LOGNAME=kuga\r打印指定環境變量。\nprintenv PATH\r/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r命令：env 唔帶參數會打印所有環境變量。\nenv | head -n 3\rSHELL=/bin/bash PWD=/home/kuga LOGNAME=kuga\r命令：echo 打印指定變量，可以係環境變量或 Shell 變量。\necho $HOME\r/home/kuga\r自定義 Shell 變量 定義名為 soda 嘅 Shell 變量，值為 green。\nsoda=green\recho $soda\rgreen\r使用 printenv 訪問 printenv soda\r輸出為空，因為 soda 唔係環境變量，佢只係一個 Shell 變量。\n使用命令分組 () 訪問 (echo $soda)\rgreen\r使用命令分組 () 修改 (soda=yellow; echo $soda); echo $soda\ryellow green\rSubshell 內部嘅修改唔會影響外部嘅數據。\n創建 Bash 實例訪問 bash\recho $soda\r輸出為空，呢就係普通 Shell 變量嘅基本作用域。\n自定義環境變量 可以通過 export 指令把 Shell 變量轉變為環境變量，官方手冊嘅定義如下。\nMark each name to be passed to child processes in the environment.\r翻譯：標記變量名稱，使其喺環境中可以傳遞畀子進程。\r可以同時定義和導出變量，或分開操作。\nexport soda=green\rsoda=green; export soda;\r使用 printenv 訪問 轉變為環境變量之後，使用 printenv 就能正常打印了。\nprintenv soda\rgreen\r使用命令分組 () 訪問 (printenv soda)\rgreen\r使用命令分組 () 修改 (soda=yellow; echo $soda); echo $soda\ryellow green\r同樣，內部修改環境變量是唔會影響外部嘅數據。\n創建 Bash 實例訪問 bash -c \u0026#34;printenv soda\u0026#34;\rgreen\r環境變量喺新創建嘅 Bash 實例中係能訪問嘅。\n查看所有 export 變量 唔帶參數，或使用 -p 就能打印所有 export 變量。\nexport\rexport | grep soda\rdeclare -x soda=\u0026#34;green\u0026#34;\r取消 export 環境變量 使用 -n 選項就能取消 export，變回普通嘅 Shell 變量。\nexport -n soda\rprintenv soda; echo $soda\rprintenv 無輸出，echo 正常輸出，因為 soda 已經唔再係環境變量。\n刪除變量 下面會刪除整個變量，無論係環境變量或 Shell 變量。\nunset soda\recho $soda\r命令：declare 用於聲明變量和屬性，唔帶任何參數就輸出所有嘅變量聲明和當前值。\nDeclare variables and give them attributes. If no names are given, then display the values of variables instead.\r常用參數：\n-i：將變量聲明為整數。 -r：將變量聲明為只讀。 -x：將變量導出為環境變量。 -p：顯示變量嘅聲明和當前值。 不帶參數聲明 效果和普通嘅 Shell 變量一樣。\ndeclare soda=\u0026#34;green\u0026#34;\recho $soda\r顯示當前變量嘅聲明 declare -p soda\rdeclare -- soda=\u0026#34;green\u0026#34;\r顯示所有變量嘅聲明 declare -p\r聲明環境變量 declare -x soda=\u0026#34;green\u0026#34;\rprintenv soda\rgreen\r喺 export 中亦能睇到 soda 嘅定義。\nexport | grep soda\r-x 與 -- 嘅區別 不難發現，可以通過聲明嘅符號區分不同嘅變量類型。\n-x：環境變量嘅聲明。 --：普通 Shell 變量嘅聲明。 declare -p soda\rdeclare -x soda=\u0026#34;green\u0026#34;\r取消 export 後。\nexport -n soda\rdeclare -p soda\rdeclare -- soda=\u0026#34;green\u0026#34;\r內建命令手冊 有啲內建命令使用 man 係無法查看手冊嘅，但可以使用 help 命令，或 --help 選項。\nexport type -a export\rexport is a shell builtin\rhelp export\rexport --help\rdeclare 同上\nunset 同上\n","date":"2024-08-24","id":30,"permalink":"/zh-hk/linux/env/concept/","summary":"\u003ch2 id=\"起源\"\u003e起源\u003c/h2\u003e\n\u003cp\u003eLinux 中嘅環境變量源自早期 UNIX 系統嘅設計需求。\n通過環境變量，用戶同進程能夠動態咁影響系統行為，而唔需要修改系統嘅核心代碼。\n呢種靈活性同可配置性使環境變量成為 Linux 系統同應用程序配置嘅關鍵部分。\u003c/p\u003e\n\u003cp\u003e喺 UNIX 中，每個進程都有自己嘅環境（即一組環境變量），呢啲環境變量喺進程嘅啟動時由父進程傳遞畀子進程。\n最典型嘅例子係當用戶登錄系統時，系統啟動嘅 Shell 進程會繼承一組默認嘅環境變量，例如用戶嘅主目錄、Shell 類型等。\n用戶可以喺呢個基礎上修改或添加環境變量，影響自己啟動嘅程序或進程嘅行為。\u003c/p\u003e\n\u003ch2 id=\"概念勘誤\"\u003e概念勘誤\u003c/h2\u003e\n\u003cp\u003e有啲書籍同文章會把環境變量分為\u003cdel\u003e全局環境變量同局部環境變量\u003c/del\u003e，但呢種分類係唔準確嘅，\n因為喺官方嘅文檔中，從來冇呢兩種分類嘅定義，甚至連英文名稱都冇。\n因此，為咗避免語義上嘅邏輯問題，本文唔會對環境變量進行上述嘅分類。\u003c/p\u003e","tags":[],"title":"重要概念"},{"content":"Shell 嘅啟動方式 Shell 嘅啟動方式會影響環境變量嘅加載過程，可以分為以下幾種。\n互動式（Interactive） 登錄：以登錄方式啟動嘅 Shell 實例，例如 SSH 登錄。 非登錄： 喺 Shell 中輸入 Bash 新建 Shell 實例。 喺 GNOME Terminal 中打開一個新嘅終端會話。 非互動式（Non-Interactive） 喺腳本中啟動嘅 Shell 實例。 乜嘢係互動式 Shell What is an Interactive Shell\r乜嘢係互動式 Shell\nAn interactive shell is one started without non-option arguments (unless -s is specified) and without specifying the -c option, whose input and error output are both connected to terminals (as determined by isatty(3)), or one started with the -i option. An interactive shell generally reads from and writes to a user’s terminal. The -s invocation option may be used to set the positional parameters when an interactive shell is started.\r互動式 Shell 係指喺啟動時冇非選項參數（除非指定咗 -s 選項），並且冇指定 -c 選項，其輸入同錯誤輸出都連接到終端（由 isatty(3) 判斷），或者係通過 -i 選項啟動嘅 Shell。 互動式 Shell 通常從用戶嘅終端讀取並向終端寫入內容。 當啟動互動式 Shell 時，可以使用 -s 選項嚟設置位置參數。\r互動登錄式 喺 Ubuntu 中，使用 SSH 登錄時，文件嘅加載流程大致如下。\n/etc/profile：入口文件 - A，所有用戶都會執行。 /etc/bash.bashrc：全局環境配置文件，A 會加載此文件。 /etc/profile.d：全局環境配置目錄，A 會加載此目錄嘅所有文件。 ~/.profile：用戶環境配置入口文件 - B。 ~/.bashrc：用戶環境配置文件，B 會加載此文件。 rc（Run Commands），源於 Unix 傳統。\n/etc/profile system-wide：系統範圍嘅配置文件。\n# /etc/profile: system-wide .profile file for the Bourne shell (sh(1)) # and Bourne compatible shells (bash(1), ksh(1), ash(1), ...). # 檢查提示符變量 PS1 是否被設置 if [ \u0026#34;${PS1-}\u0026#34; ]; then # 檢查 BASH 變量是否被設置，且佢嘅值是否唔等於 /bin/sh if [ \u0026#34;${BASH-}\u0026#34; ] \u0026amp;\u0026amp; [ \u0026#34;$BASH\u0026#34; != \u0026#34;/bin/sh\u0026#34; ]; then # The file bash.bashrc already sets the default PS1. # PS1=\u0026#39;\\h:\\w\\$ \u0026#39; # 如果 bash.bashrc 文件存在，則加載 if [ -f /etc/bash.bashrc ]; then . /etc/bash.bashrc fi else # 當前用戶嘅 id 是否等於 0 (root) if [ \u0026#34;$(id -u)\u0026#34; -eq 0 ]; then # root 用戶提示符設為 # PS1=\u0026#39;# \u0026#39; else # 普通用戶提示符設為 $ PS1=\u0026#39;$ \u0026#39; fi fi fi # profile.d 目錄是否存在 if [ -d /etc/profile.d ]; then # 遍歷目錄下嘅所有 sh 文件 for i in /etc/profile.d/*.sh; do # 如果文件可讀，則加載 if [ -r $i ]; then . $i fi done unset i fi\r/etc/bash.bashrc 文件內容有啲多，就睇幾行註釋吧。\n# System-wide .bashrc file for interactive bash(1) shells. # To enable the settings / commands in this file for login shells as well, # this file has to be sourced in /etc/profile. # If not running interactively, don\u0026#39;t do anything [ -z \u0026#34;$PS1\u0026#34; ] \u0026amp;\u0026amp; return\r如果唔係互動式（PS1 變量冇設置），則直接退出。\n/etc/profile.d 睇一睇目錄嘅文件就好啦。\nls -l /etc/profile.d\rtotal 24 -rw-r--r-- 1 root root 96 Oct 15 2021 01-locale-fix.sh -rw-r--r-- 1 root root 835 Apr 8 2022 apps-bin-path.sh -rw-r--r-- 1 root root 726 Nov 16 2021 bash_completion.sh -rw-r--r-- 1 root root 1107 Mar 23 2022 gawk.csh -rw-r--r-- 1 root root 757 Mar 23 2022 gawk.sh -rw-r--r-- 1 root root 1557 Feb 17 2020 Z97-byobu.sh\r~/.profile 呢個文件會去加載我哋常常用到嘅 ~/.bashrc 文件。\n# ~/.profile: executed by the command interpreter for login shells. # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login # exists. # see /usr/share/doc/bash/examples/startup-files for examples. # the files are located in the bash-doc package. # the default umask is set in /etc/profile; for setting the umask # for ssh logins, install and configure the libpam-umask package. #umask 022 # if running bash if [ -n \u0026#34;$BASH_VERSION\u0026#34; ]; then # include .bashrc if it exists if [ -f \u0026#34;$HOME/.bashrc\u0026#34; ]; then . \u0026#34;$HOME/.bashrc\u0026#34; fi fi # set PATH so it includes user\u0026#39;s private bin if it exists if [ -d \u0026#34;$HOME/bin\u0026#34; ] ; then PATH=\u0026#34;$HOME/bin:$PATH\u0026#34; fi # set PATH so it includes user\u0026#39;s private bin if it exists if [ -d \u0026#34;$HOME/.local/bin\u0026#34; ] ; then PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34; fi\r看頭部註釋可以得知，如果 ~/.bash_profile 同 ~/.bash_login 存在咗話，~/.profile 係唔會被加載嘅，文件加載順序如下。\nbash_profile \u0026gt; bash_login \u0026gt; profile\r~/.bashrc 下面分析一下頭部就差不多啦。\n# ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac\r看第一行註釋，呢個文件會被非登錄 Shell 執行。 前面講到 ~/.profile 文件亦會加載呢個文件，也就係講登錄式 Shell 同非登錄式 Shell 都會用到呢個文件。\n再來分析一下呢啲魔法代碼（真係天才設計🤪）：\n# If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac\r$- 係一個特殊變量，表示當前 Shell 運行時啟用嘅選項，可以打印出來。\necho $-\rhimBHs\r*i* 係一個匹配條件： $- 中是否包含 i。 i 選項表示當前 Shell 係互動式嘅。 如果匹配成功，會退出 case。 如果匹配失敗，會執行 return，退出當前腳本。 總結：如果唔係喺互動式中運行，直接退出，唔做咩。\n互動非登錄式 呢度討論嘅係非登錄嘅情況。例如：\n喺 Shell 中輸入 Bash 新建一個 Shell 實例。 使用 () 執行命令分組時生成嘅 Subshell。 喺 GNOME Terminal 中打開一個新嘅終端會話。 一句話總結：唔加載 /etc/profile，只加載 ~/.bashrc。\n非互動式 呢種方式冇命令行提示符，唔會加載任可配置文件，即使手動加載 ~/.bashrc，亦唔會生效。 因為上面嘅分析裡提到，喺非互動式中，會直接退出，唔做咩。\n# If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac\r當然，你可以使用 BASH_ENV 變量嚟設置加載嘅文件，解釋如下。\nIf this variable is set when Bash is invoked to execute a shell script, its value is expanded and used as the name of a startup file to read before executing the script. See Bash Startup Files.\r環境變量嘅持久化 只需把環境變量寫喺對應嘅文件中，如：~/.bashrc。\necho \u0026#39;export MY_VARIABLE=\u0026#34;my_value\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc\rsource ~/.bashrc\r","date":"2024-08-27","id":31,"permalink":"/zh-hk/linux/env/shell-startup/","summary":"\u003ch2 id=\"shell-嘅啟動方式\"\u003eShell 嘅啟動方式\u003c/h2\u003e\n\u003cp\u003eShell 嘅啟動方式會影響環境變量嘅加載過程，可以分為以下幾種。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e互動式（Interactive）\n\u003cul\u003e\n\u003cli\u003e登錄：以登錄方式啟動嘅 Shell 實例，例如 SSH 登錄。\u003c/li\u003e\n\u003cli\u003e非登錄：\n\u003cul\u003e\n\u003cli\u003e喺 Shell 中輸入 Bash 新建 Shell 實例。\u003c/li\u003e\n\u003cli\u003e喺 GNOME Terminal 中打開一個新嘅終端會話。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e非互動式（Non-Interactive）\n\u003cul\u003e\n\u003cli\u003e喺腳本中啟動嘅 Shell 實例。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"乜嘢係互動式-shell\"\u003e乜嘢係互動式 Shell\u003c/h2\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/bash.html#What-is-an-Interactive-Shell_003f\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eWhat is an Interactive Shell\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003e乜嘢係互動式 Shell\u003c/p\u003e","tags":[],"title":"Shell 嘅啟動過程"},{"content":"SHELL 當前使用嘅 Shell。\nprintenv SHELL\r/bin/bash\rHOME 用戶主目錄路徑。\nprintenv HOME\r/home/kuga\rPWD 當前目錄嘅路徑。\nprintenv PWD\r/home/kuga\rUSER 當前用戶。\nprintenv USER\rkuga\rPATH 可執行程序搜索嘅路徑，以冒號分隔。\nprintenv PATH\r/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\rSHLVL Shell 嘅層級，從 1 開始。\nprintenv SHLVL\r1\r","date":"2024-08-27","id":32,"permalink":"/zh-hk/linux/env/variables/","summary":"\u003ch2 id=\"shell\"\u003eSHELL\u003c/h2\u003e\n\u003cp\u003e當前使用嘅 Shell。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprintenv SHELL\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"home\"\u003eHOME\u003c/h2\u003e\n\u003cp\u003e用戶主目錄路徑。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprintenv HOME\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/home/kuga\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"pwd\"\u003ePWD\u003c/h2\u003e\n\u003cp\u003e當前目錄嘅路徑。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprintenv PWD\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/home/kuga\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"user\"\u003eUSER\u003c/h2\u003e\n\u003cp\u003e當前用戶。\u003c/p\u003e","tags":[],"title":"常見環境變量"},{"content":"簡介 Shebang 係 Unix 同類 Unix 操作系統中嘅一個特殊符號，由字符 #! 組成， 用嚟指示腳本文件應該由邊個解釋器嚟執行。佢通常出喺腳本文件嘅第一行，後面跟住解釋器嘅路徑。 Shebang 使得腳本文件能夠好似可執行程序一樣直接運行，而唔使手動調用解釋器。\n名稱由來 # 喺英文中表示 hash 或 sharp，! 喺編程同命令行中表示 bang， 呢兩個符號組合埋一齊就成咗 hash-bang 或 sharp-bang。 隨住時間嘅推移，hash-bang 最終簡化為 shebang。\n指定解釋器 Shebang 後面指定嘅路徑係解釋器嘅位置，例如：\n#!/bin/bash\r系統會使用該路徑下嘅 bash 嚟執行呢個腳本內容。\n統一執行形式 唔同類型嘅腳本可以統一使用 ./file 嘅形式執行，無需顯式調用解釋器。\n#!/bin/bash\r無需使用 bash file 執行，直接使用 ./file。\n#!/bin/python3\r無需使用 python file 執行，直接使用 ./file。\n常見例子 我哋喺 bash 腳本中常常會見到下面嘅例子。\n#!/usr/bin/env bash\renv 係一個與環境變量相關嘅命令。 當後面跟嘅參數係 bash 時，佢會根據環境變量 PATH 提供嘅路徑查找 bash 嘅解釋器。 咁樣做嘅好處係無需寫死 bash 解釋器嘅路徑，因為喺唔同嘅系統中，bash 解釋器可能會喺唔同嘅位置。\ntype -a bash\rbash is /usr/bin/bash bash is /bin/bash\r對於上面嘅 python 例子，更好嘅 Shebang 係使用 env。\n#!/usr/bin/env python\r手動調用 如果冇 Shebang，可以手動調用解釋器。\nbash script.sh\r","date":"2024-08-27","id":33,"permalink":"/zh-hk/linux/env/shebang/","summary":"\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cp\u003eShebang 係 Unix 同類 Unix 操作系統中嘅一個特殊符號，由字符 \u003ccode\u003e#!\u003c/code\u003e 組成，\n用嚟指示腳本文件應該由邊個解釋器嚟執行。佢通常出喺腳本文件嘅第一行，後面跟住解釋器嘅路徑。\nShebang 使得腳本文件能夠好似可執行程序一樣直接運行，而唔使手動調用解釋器。\u003c/p\u003e\n\u003ch2 id=\"名稱由來\"\u003e名稱由來\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e#\u003c/code\u003e 喺英文中表示 hash 或 sharp，\u003ccode\u003e!\u003c/code\u003e 喺編程同命令行中表示 bang，\n呢兩個符號組合埋一齊就成咗 hash-bang 或 sharp-bang。\n隨住時間嘅推移，hash-bang 最終簡化為 shebang。\u003c/p\u003e","tags":[],"title":"Shebang"},{"content":"用戶賬號 /etc/passwd Linux 使用 /etc/passwd 文件嚟保存用戶賬號信息。 因為好多服務進程需要讀取用戶賬號嘅信息，可以見到呢個文件嘅權限都係可讀嘅。\n-rw-r--r-- 1 root root 2010 Aug 24 15:12 /etc/passwd\r查看某個用戶嘅賬號信息。\ngrep kuga /etc/passwd\rkuga:x:1000:1000:,,,:/home/kuga:/bin/bash\rKEY VALUE 用戶名 kuga 用戶密碼 x 用戶 ID 1000 用戶組 ID 1000 備註字段 ,,, 目錄位置 /home/kuga 默認 Shell /bin/bash 系統會預留一定嘅 UID 範圍，Ubuntu 新添加嘅用戶 ID 由 1000 開始。 下面嘅命令會按第 3 個字段 UID 逆序排序，然後輸出前 10 行，只顯示 136 字段（用戶名，UID，目錄位置）。\nsort -t \u0026#39;:\u0026#39; -k 3 -nr /etc/passwd | cut -d \u0026#39;:\u0026#39; -f1,3,6 | head -n 10\rnobody:65534:/nonexistent soda:1001:/home/soda kuga:1000:/home/kuga lxd:999:/var/snap/lxd/common/lxd ecs-instance-connect:998:/home/ecs-instance-connect fwupd-refresh:115:/run/systemd _chrony:114:/var/lib/chrony usbmux:112:/var/lib/usbmux landscape:111:/var/lib/landscape tss:110:/var/lib/tpm\r/etc/shadow 由於歷史原因，早期嘅用戶密碼使用 /etc/passwd 存儲，所以文件名係 passwd。 後來因為密碼容易被暴力破解，依家嘅密碼已經搬到新文件 /etc/shadow。 呢個文件只有 root 同 shadow 組可讀。\n-rw-r----- 1 root shadow 1255 Aug 24 15:08 /etc/shadow\r可以粗略睇睇呢個文件嘅內容。\nroot:*:19955:0:99999:7::: daemon:*:19103:0:99999:7::: bin:*:19103:0:99999:7::: sys:*:19103:0:99999:7::: sync:*:19103:0:99999:7:::\r呢啲字段一般都係管理密碼嘅（如幾多日後必須更改），呢度唔展開。\nUseradd HOME 目錄 默認唔創建用戶目錄。\nuseradd foo\r使用 -m 參數會創建用戶目錄。\nuseradd -m foo\r使用 -M 參數不會創建用戶目錄。\nuseradd -M foo\r查看默認配置 使用 -D 選項可以查看添加用戶時采用嘅默認配置。\nuseradd -D\rGROUP=100 HOME=/home INACTIVE=-1 EXPIRE= SHELL=/bin/sh SKEL=/etc/skel CREATE_MAIL_SPOOL=no\rGROUP：用戶默認組 ID。 HOME：用戶目錄位置。 INACTIVE：密碼過期後多少天禁用賬號。 EXPIRE：賬號過期日期。 SHELL：默認使用嘅登錄 Shell。 SKEL：Skeletal，該目錄內容會複製到用戶主目錄。 CREATE_MAIL_SPOOL：是否創建郵件存儲文件。 /etc/default/useradd useradd 命令嘅默認配置文件。\n-rw-r--r-- 1 root root 1118 Aug 28 10:58 /etc/default/useradd\rcat /etc/default/useradd | head -n 20\r# Default values for useradd(8) # # The SHELL variable specifies the default login shell on your # system. # Similar to DSHELL in adduser. However, we use \u0026#34;sh\u0026#34; here because # useradd is a low level utility and should be as general # as possible SHELL=/bin/sh # # The default group for users # 100=users on Debian systems # Same as USERS_GID in adduser # This argument is used when the -n flag is specified. # The default behavior (when -n and -g are not specified) is to create a # primary user group with the same name as the user being added to the # system. # GROUP=100 # # The default home directory. Same as DHOME for adduser # HOME=/home\r如果把 SHELL 改成 /bin/bash，那麼 useradd -D 就會自動更新。\n/etc/login.defs 用戶賬號同登錄管理嘅核心配置文件。 功能包括：密碼策略、UID/GID 範圍、HOME 目錄管理、用戶同組管理、登錄設置等等。 文件中嘅設置會影響著如 useradd、usermod、passwd 等命令嘅行為，修改前建議提前備份。\n-rw-r--r-- 1 root root 10734 Nov 11 2021 /etc/login.defs\r單獨睇一下 USERGROUPS_ENAB 參數。\ngrep -B 4 -E \u0026#34;USERGROUPS_ENAB (yes|no)\u0026#34; /etc/login.defs\r# If set to yes, userdel will remove the user\u0026#39;s group if it contains no # more members, and useradd will create by default a group with the name # of the user. # USERGROUPS_ENAB yes\r如果 USERGROUPS_ENAB 嘅值為 yes：\nuserdel：刪除用戶嘅時候，會同時刪除空嘅用戶用。 useradd：創建用戶嘅時候，會同時創建同用戶名一樣嘅組。 這就係為咗緊上面創建用戶嘅時候，沒有使用 GROUP=100 呢個默認參數。\n使用命令修改配置 修改默認登錄 Shell。\nsudo useradd -D -s /bin/bash\r修改默認組 ID。\nsudo useradd -D -g 100\r修改默認嘅 HOME 目錄。\nsudo useradd -D -b path\r執行命令後，你會發現，文件嘅權限由 644 -\u0026gt; 600。\n-rw------- 1 root root 1195 Aug 28 11:22 /etc/default/useradd\r權限更正如下。\nsudo chmod 644 /etc/default/useradd\r翻一下源碼，在 set_defaults(void) 方法中，執行過程大致如下：\n/* * set_defaults - write new defaults file * * set_defaults() re-writes the defaults file using the values that * are currently set. Duplicated lines are pruned, missing lines are * added, and unrecognized lines are copied as is. */ static int set_defaults(void) { ... }\r使用 mkstemp 函數創建臨時文件 A。 處理 /etc/default/useradd 文件並複製到 A 中。 備份原來嘅 useradd 文件，重命名為 useradd-。 把 A 文件覆蓋原來嘅 useradd 文件。 mkstemp 函數創建嘅文件權限係 0600。 查看 useradd 同它嘅備份 useradd-。\nls -li /etc/default/useradd*\r655124 -rw------- 1 root root 1197 Aug 28 16:28 /etc/default/useradd 655237 -rw------- 1 root root 1197 Aug 28 16:07 /etc/default/useradd-\r如果使用執行命令修改默認登錄 Shell。\nsudo useradd -D -s /bin/sh\r再次查看兩個文件嘅 inode。\n655454 -rw------- 1 root root 1195 Aug 28 17:27 /etc/default/useradd 655124 -rw------- 1 root root 1197 Aug 28 16:28 /etc/default/useradd-\r不難發現 useradd- 嘅 inode 就係修改前 useradd 嘅 inode。 關於權限被修改嘅問題，顯然係唔合理嘅，命令唔應該修改文件嘅權限。 在 GitHub 上可以查看這個 pull request。\nUsermod 更改用戶嘅登錄名 sudo usermod -l newuser olduser\r將用戶添加到一個組 -a 表示追加到組，而唔係替換當前組列表。\nsudo usermod -aG group user\r更改用戶嘅默認 Shell usermod 唔會檢查 Shell 嘅合法性，可用 chsh 代替。\nsudo chsh -s /bin/bash user\r更改用戶 ID sudo usermod -u newuid user\rPasswd 修改當前用戶嘅密碼 唔加參數就係修改當前用戶嘅密碼。\npasswd\r修改指定用戶嘅密碼 sudo passwd soda\r登錄管理 禁止密碼登錄 下面兩種方法係一樣嘅，而且唔會禁止 SSH 公鑰認證。\nsudo usermod -L user\rsudo passwd -l user\r執行後，/etc/shadow 文件嘅密碼字段前面會加 ! 。\nsudo grep user /etc/shadow\ruser:!$y...:19959:0:99999:7:::\r恢復密碼登錄 下面兩種方法係一樣嘅，可以混著用。\nsudo usermod -U user\rsudo passwd -u user\r執行後，/etc/shadow 文件嘅密碼字段前面會刪除 ! 。\n禁止 SSH 公鑰認證 沒有了登錄 Shell，自然密碼也係唔能登錄。\nsudo usermod -s /usr/sbin/nologin user\r恢復 SSH 公鑰認證 sudo usermod -s /bin/bash user\rUserdel 僅刪除用戶 呢種方法只刪除用戶，保留主目錄。\nsudo userdel user\r主目錄同郵件 不但刪除用戶，還要刪除主目錄同郵件。\nsudo userdel -r user\r如果文件或目錄沒不存在，會在終端提示。\nAdduser Package 呢個包提供兩個實用命令，adduser 同 deluser，屬於上層封裝好嘅工具。\n","date":"2024-08-27","id":34,"permalink":"/zh-hk/linux/perm/user-mgmt/","summary":"\u003ch2 id=\"用戶賬號\"\u003e用戶賬號\u003c/h2\u003e\n\u003ch3 id=\"etcpasswd\"\u003e/etc/passwd\u003c/h3\u003e\n\u003cp\u003eLinux 使用 \u003ccode\u003e/etc/passwd\u003c/code\u003e 文件嚟保存用戶賬號信息。\n因為好多服務進程需要讀取用戶賬號嘅信息，可以見到呢個文件嘅權限都係可讀嘅。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e root root \u003cspan class=\"m\"\u003e2010\u003c/span\u003e Aug \u003cspan class=\"m\"\u003e24\u003c/span\u003e 15:12 /etc/passwd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e查看某個用戶嘅賬號信息。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egrep kuga /etc/passwd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ekuga:x:1000:1000:,,,:/home/kuga:/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eKEY\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eVALUE\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用戶名\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ekuga\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用戶密碼\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用戶 ID\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用戶組 ID\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e備註字段\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e,,,\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e目錄位置\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e/home/kuga\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e默認 Shell\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e/bin/bash\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e系統會預留一定嘅 UID 範圍，Ubuntu 新添加嘅用戶 ID 由 1000 開始。\n下面嘅命令會按第 3 個字段 UID 逆序排序，然後輸出前 10 行，只顯示 136 字段（用戶名，UID，目錄位置）。\u003c/p\u003e","tags":[],"title":"用戶管理"},{"content":"用戶同組嘅關係 主組 - Primary Group 創建用戶嘅時候，會同時創建一個同名組，呢個就係主組。\ngrep soda /etc/passwd\rsoda:x:1001:1001:,,,:/home/soda:/bin/bash\r第 4 個字段表示主組 ID 1001，仲可以用 groups 命令嚟睇。\ngroups soda\rsoda : soda\r附加組 - Secondary Groups 用戶仲可以屬於多個附加組，用嚟做權限嘅訪問控制。\nID 指令 睇用戶組信息最實用嘅命令。\nid soda\ruid=1001(soda) gid=1001(soda) groups=1001(soda)\rgid 表示主組，groups 表示附加組。\n/etc/group 組嘅配置文件，用命令嚟改，唔好手動改，唔然改錯就麻煩。\n-rw-r--r-- 1 root root 886 Aug 28 21:00 /etc/group\r組信息 睇 sudo 組嘅信息\ngrep sudo /etc/group\rsudo:x:27:kuga\r組名：sudo 密碼：x 組ID：27 成員：kuga 組成員有多個時，以逗號分隔：kuga,soda。\n新建組 sudo groupadd rocks\rgrep rocks /etc/group\rrocks:x:1002:\r改組名 sudo groupmod -n newrocks rocks\r用戶分配組 保留附加組 呢個方法唔會覆蓋附加組列表。\nsudo usermod -aG rocks soda\rid soda\r... groups=1001(soda),1002(rocks)\r覆蓋附加組 去掉 -a (append) 選項會覆蓋成個附加組列表。\nsudo usermod -G sudo soda\rid soda\r... groups=1001(soda),27(sudo)\r顯然，soda 組唔見咗。\n刪除附加組 刪除 soda 用戶嘅 sudo 附加組。\nsudo gpasswd -d soda sudo\r仲可以用覆蓋嘅方式，只保留 soda 組。\nsudo usermod -G soda soda\r","date":"2024-08-27","id":35,"permalink":"/zh-hk/linux/perm/group-mgmt/","summary":"\u003ch2 id=\"用戶同組嘅關係\"\u003e用戶同組嘅關係\u003c/h2\u003e\n\u003ch3 id=\"主組---primary-group\"\u003e主組 - Primary Group\u003c/h3\u003e\n\u003cp\u003e創建用戶嘅時候，會同時創建一個同名組，呢個就係主組。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egrep soda /etc/passwd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esoda:x:1001:1001:,,,:/home/soda:/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e第 4 個字段表示主組 ID 1001，仲可以用 groups 命令嚟睇。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egroups soda\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esoda : soda\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"附加組---secondary-groups\"\u003e附加組 - Secondary Groups\u003c/h3\u003e\n\u003cp\u003e用戶仲可以屬於多個附加組，用嚟做權限嘅訪問控制。\u003c/p\u003e","tags":[],"title":"組管理"},{"content":"組成結構 -rwxr-xr--\r第一個字符表示文件嘅類型：\n-：文件，例如文本文件、二進制文件等。 d：目錄。 l：符號鏈接，Symbolic link (Soft link)。 b：塊設備，例如硬盤、光盤等。 c：字符設備，例如終端設備、鍵盤等。 p：管道，進程間通信。 s：套接字，網絡通信，進程間數據交換。 後面嘅字符 3 個為一組（r=可讀、w=可寫、x=可執行），分別對應：\n類別 權限 描述 擁有者 rwx 可讀/可寫/可執行 用戶組 r-x 可讀/不可寫/可執行 其他人 r-- 可讀/不可寫/不可執行 目錄嘅可執行權限 同文件嘅可執行權限一樣，如果要對目錄進行操作，目錄亦必須有可執行權限。\ncd /home\rls /home\r如果冇可執行權限，上面嘅命令會執行失敗。\nUmask 創建一個文件或目錄時，系統會使用 umask 嘅值嚟計算文件嘅權限。\numask\r0002\r第一位：特殊模式，呢度唔展開。 第二位：Owner，擁有者。 第三位：Group，組。 第四位：Others，其他人。 全權限 新文件：666（默認唔需要執行權限）。 新目錄：777（目錄都需要執行權限）。 權限計算 權限 = 全權限 - umask\n文件：666 - 002 = 664 目錄：777 - 002 = 775 umask 係掩碼，代表唔想授予嘅權限。\nchmod 修改文件權限嘅命令。\nchmod - change file mode bits\r八進制模式 chmod 755 file\r-rwxr-xr-x 1 kuga kuga 16 Aug 23 11:08 file\r字符模式 u 代表用戶：畀用戶添加執行權限。\nchmod u+x file\rg 代表組：畀組去掉寫權限。\nchmod g-w file\ro 代表其他人：畀其他人添加讀權限。\nchmod o+r file\ra 代表上面 3 個：畀所有人添加執行權限。\nchmod a+x file\rchown 修改文件嘅擁有者同組。\nchown - change file owner and group\r更改擁有者 chown user file\r遞歸更改擁有者 chown -R user dir\r更改擁有者同組 chown user:group file\r遞歸更改擁有者同組 chown -R user:group dir\r只更改組 chown :group file\rchgrp chgrp - change group ownership\rchgrp group file\r","date":"2024-08-27","id":36,"permalink":"/zh-hk/linux/perm/file-perm/","summary":"\u003ch2 id=\"組成結構\"\u003e組成結構\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-rwxr-xr--\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e第一個字符表示文件嘅類型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/strong\u003e：文件，例如文本文件、二進制文件等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ed\u003c/code\u003e\u003c/strong\u003e：目錄。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003el\u003c/code\u003e\u003c/strong\u003e：符號鏈接，Symbolic link (Soft link)。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eb\u003c/code\u003e\u003c/strong\u003e：塊設備，例如硬盤、光盤等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ec\u003c/code\u003e\u003c/strong\u003e：字符設備，例如終端設備、鍵盤等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ep\u003c/code\u003e\u003c/strong\u003e：管道，進程間通信。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003es\u003c/code\u003e\u003c/strong\u003e：套接字，網絡通信，進程間數據交換。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e後面嘅字符 3 個為一組（r=可讀、w=可寫、x=可執行），分別對應：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e類別\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e權限\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e描述\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e擁有者\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003erwx\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e可讀/可寫/可執行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用戶組\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003er-x\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e可讀/不可寫/可執行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e其他人\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003er--\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e可讀/不可寫/不可執行\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"目錄嘅可執行權限\"\u003e目錄嘅可執行權限\u003c/h2\u003e\n\u003cp\u003e同文件嘅可執行權限一樣，如果要對目錄進行操作，目錄亦必須有可執行權限。\u003c/p\u003e","tags":[],"title":"文件權限"},{"content":"ACL 訪問控制列表（Access Control List）係一種更為靈活同細粒度嘅權限管理機制， 用嚟定義同控制文件系統對象嘅訪問權限。相比傳統嘅文件權限系統，ACL 提供咗更細緻嘅權限控制， 容許你為唔同嘅用戶同用戶組設置特定嘅權限，唔再局限於傳統嘅三個角色（Owner、Group、Others）。\n安裝 如果未安裝，可以用以下命令。\nsudo apt-get install acl\rgetfacl 獲取文件嘅訪問控制列表\ngetfacl - get file access control lists\r使用例子 獲取 foo 文件嘅 ACL 信息。\ngetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- group::rw- other::r--\rsetfacl 設置文件嘅訪問控制列表。\nsetfacl - set file access control lists\r指定用戶授權 畀 soda 用戶添加對 foo 文件嘅讀寫權限。\nsetfacl -m u:soda:rw foo\rgetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- user:soda:rw- group::rw- mask::rw- other::r--\r指定組授權 畀 soda 組添加對 foo 文件嘅讀寫權限。\nsetfacl -m g:soda:rw foo\rgetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- user:soda:rw- group::rw- group:soda:rw- mask::rw- other::r--\r其它人授權 對其它人添加對 foo 文件嘅讀寫權限。\nsetfacl -m o::rw foo\rgetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- user:soda:rw- group::rw- group:soda:rw- mask::rw- other::rw-\r授權修改 命令採取覆蓋的形式。\nsetfacl -m o::r foo\rother::rw- 會變成 other::r--。\n清空授權 setfacl -m u:soda:- foo\rsetfacl -m o::- foo\ruser:soda:--- other::---\r刪除授權 setfacl -x u:soda foo\rsetfacl -m g:soda foo\ruser:soda、group:soda 這兩行會刪掉。\n末尾的 + 號 使用 ACL 的文件，權限列後面會有一個 + 號。\n-rw-rw-r--+\rRBAC 差不多 7-8 年前，曾經接觸過一個 ACL 的管理後台，後來改成了 RBAC。\n","date":"2024-08-29","id":37,"permalink":"/zh-hk/linux/perm/acl/","summary":"\u003ch2 id=\"acl\"\u003eACL\u003c/h2\u003e\n\u003cp\u003e訪問控制列表（Access Control List）係一種更為靈活同細粒度嘅權限管理機制，\n用嚟定義同控制文件系統對象嘅訪問權限。相比傳統嘅文件權限系統，ACL 提供咗更細緻嘅權限控制，\n容許你為唔同嘅用戶同用戶組設置特定嘅權限，唔再局限於傳統嘅三個角色（Owner、Group、Others）。\u003c/p\u003e\n\u003ch2 id=\"安裝\"\u003e安裝\u003c/h2\u003e\n\u003cp\u003e如果未安裝，可以用以下命令。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt-get install acl\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"getfacl\"\u003egetfacl\u003c/h2\u003e\n\u003cp\u003e獲取文件嘅訪問控制列表\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egetfacl - get file access control lists\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"使用例子\"\u003e使用例子\u003c/h3\u003e\n\u003cp\u003e獲取 foo 文件嘅 ACL 信息。\u003c/p\u003e","tags":[],"title":"訪問控制列表"},{"content":"Systemd 系統嘅第一個進程，進程號為 1。\nps -p 1\rPID TTY TIME CMD 1 ? 00:00:04 systemd\r但當我哋想顯示詳細信息嘅時候，結果會有啲唔同。\nps -p 1 -f\rUID PID PPID C STIME TTY TIME CMD root 1 0 0 Aug07 ? 00:00:04 /sbin/init noibrs\r其實呢兩個進程係一樣嘅，因為 init 指向嘅係 systemd。\nfile /sbin/init\r/sbin/init: symbolic link to /lib/systemd/systemd\rinit 係 Unix 最早嘅初始化進程，由於 systemd 取代咗 init， 為咗兼容性，/sbin/init 通常係一個指向 systemd 嘅軟鏈接。 名稱後面加 d 係 Unix 守護進程嘅命名規範，System D 係一個術語， 表示快速思考同解決問題嘅能力。systemd 誕生於 2010 年，之前用嘅係 SysVinit。\nSysVinit Unix System V 呢種初始化方法依家已經唔多用，但喺一啲舊嘅發行版中仲可以見到。\nrunlevel runlevel 亦係呢個 SysVinit 嘅產物。\nrunlevel\rN 5\r5 對應 graphical.target，N 表示上一次嘅 runlevel 為 No。\nwho -r\rrun-level 5 2024-08-07 21:30\r阿里雲嘅 Ubuntu 默認目標為 graphical.target， 呢個係為咗方便用戶使用圖形界面（VNC）嚟管理操作系統， 唔需要嘅話可以把目標換成 multi-user.target。\nsystemctl set-default multi-user.target\r/etc/rcX.d rc 係 run commands 嘅縮寫，.d 係目錄嘅意思，目的是為咗避免命名衝突。 呢個目錄包含咗特定運行級下啟動嘅進程，例如運行級 5 對應 /etc/rc5.d。\nls -l /etc/rc5.d\rlrwxrwxrwx 1 root root 13 Jul 10 11:08 K01fio -\u0026gt; ../init.d/fio lrwxrwxrwx 1 root root 20 Apr 21 2022 K01irqbalance -\u0026gt; ../init.d/irqbalance lrwxrwxrwx 1 root root 17 Jul 10 11:05 K01sysstat -\u0026gt; ../init.d/sysstat\r雖然依家使用嘅係 systemd，但為咗兼容性，呢啲目錄同腳本仍然保留住。\nUnit Files 單元文件係 systemd 嘅配置文件，用嚟定義同管理系統服務、設備、掛載點、套接字同其他系統資源。 每個單元文件都描述咗 systemd 點樣啟動、停止同監視相關資源。\n基本分類 類型 描述 擴展名 服務單元 系統服務 .service 掛載單元 文件系統掛載點 .mount 設備單元 定義設備 .device 套接字單元 套接字服務 .socket 計時器單元 定時任務 .timer 目標單元 系統目標狀態 .target 所在目錄 /etc/systemd/system/：系統管理員定義嘅單元文件。 /usr/lib/systemd/system/：發行版提供嘅單元文件。 /run/systemd/system/：運行時生成嘅單元文件。 Nginx 狀態 可以透過 Nginx 嘅狀態查看服務嘅單元文件路徑。\nsystemctl status nginx\r● nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2024-08-08 12:43:17 CST; 2h 1min ago Docs: man:nginx(8) Main PID: 11037 (nginx) Tasks: 3 (limit: 1917) Memory: 8.6M CPU: 29ms CGroup: /system.slice/nginx.service ├─11037 \u0026#34;nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\u0026#34; ├─11039 \u0026#34;nginx: worker process\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; └─11040 \u0026#34;nginx: worker process\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; Aug 08 12:43:17 guitarocks systemd[1]: Starting A high performance web server and a reverse proxy server... Aug 08 12:43:17 guitarocks systemd[1]: Started A high performance web server and a reverse proxy server.\rNginx 單元文件 /etc/systemd/system/multi-user.target.wants/nginx.service /lib/systemd/system/nginx.service /usr/lib/systemd/system/nginx.service\rNginx 服務嘅單元文件有好幾個路徑，第一個係軟鏈接。\nfile /etc/systemd/system/multi-user.target.wants/nginx.service\r...: symbolic link to /lib/systemd/system/nginx.service\r第二第三個係硬鏈接，佢哋嘅 inode 係一樣嘅，並且 /lib 係指向 /usr/lib 嘅軟鏈接。\nls -i /usr/lib/systemd/system/nginx.service\r265498 /usr/lib/systemd/system/nginx.service\rls -i /lib/systemd/system/nginx.service\r265498 /lib/systemd/system/nginx.service\rfile /lib\r/lib: symbolic link to usr/lib\r下面係單元文件嘅內容。\ncat /lib/systemd/system/nginx.service\r# Stop dance for nginx # ======================= # # ExecStop sends SIGSTOP (graceful stop) to the nginx process. # If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control # and sends SIGTERM (fast shutdown) to the main process. # After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends # SIGKILL to all the remaining processes in the process group (KillMode=mixed). # # nginx signals reference doc: # http://nginx.org/en/docs/control.html # # 定義咗服務嘅描述同依賴關系 [Unit] Description=A high performance web server and a reverse proxy server Documentation=man:nginx(8) After=network.target nss-lookup.target [Service] # forking 表示服務喺啟動時會創建子進程，父進程會退出 Type=forking # 存儲主進程嘅 ID PIDFile=/run/nginx.pid # 啟動準備，測試 nginx 配置 ExecStartPre=/usr/sbin/nginx -t -q -g \u0026#39;daemon on; master_process on;\u0026#39; # 啟動命令，-g 設置全局指定，會覆蓋Nginx配置文件嘅選項 ExecStart=/usr/sbin/nginx -g \u0026#39;daemon on; master_process on;\u0026#39; # 重載配置命令 ExecReload=/usr/sbin/nginx -g \u0026#39;daemon on; master_process on;\u0026#39; -s reload # 終止進程嘅命令 ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid # 終止服務嘅等待時間，超過 5 秒則強制終止 TimeoutStopSec=5 # 終止進程嘅方式，SIGTERM，超時，SIGKILL，優雅-\u0026gt;強制 KillMode=mixed # 如何安裝同啟用服務 [Install] WantedBy=multi-user.target\r常用命令 systemctl start [unit]：啟動單元。 systemctl stop [unit]：停止單元。 systemctl enable [unit]：啟用單元，使其喺引導時自動啟動。 systemctl disable [unit]：禁用單元。 systemctl status [unit]：查看單元狀態。 systemctl daemon-reload：喺修改或添加單元文件後重新加載 systemd 配置。 Targets 從上面可以看到，target 係一種單元文件嘅類型，同一般單元文件不同，佢代表嘅係系統當前嘅運行狀態， target 定義咗該狀態下需要啟動哪些進程同服務，所以 target 可以包含多個單元文件。 用下面嘅命令可以查看當前系統嘅 target。\nsystemctl get-default\rmulti-user.target # 多用戶模式，唔包含圖形界面\rmulti-user.target target 文件通常存儲喺 /usr/lib/systemd/system/ 或 /etc/systemd/system/ 目錄中。 每個 target 文件都包含關於該 target 嘅依賴關系同啟動順序嘅信息。 我哋可以睇下 multi-user.target 呢個文件內容。\ncat /lib/systemd/system/multi-user.target\r# SPDX-License-Identifier: LGPL-2.1-or-later # # This file is part of systemd. # # systemd is free software; you can redistribute it and/or modify it # under the terms of the GNU Lesser General Public License as published by # the Free Software Foundation; either version 2.1 of the License, or # (at your option) any later version. [Unit] Description=Multi-User System Documentation=man:systemd.special(7) Requires=basic.target Conflicts=rescue.service rescue.target After=basic.target rescue.service rescue.target AllowIsolate=yes\r下面兩個目錄包含咗 multi-user.target 狀態所需要嘅內容。\n/etc/systemd/system/multi-user.target.wants/ /lib/systemd/system/multi-user.target.wants/\r/etc 係用戶定義配置，/lib 係系統默認配置。 用戶定義配置：優先級更高，同一服務 systemd 會優先執行。 系統默認配置：系統或軟件包更新時，會隨之更新。 常用命令 設置默認 target：\nsystemctl set-default multi-user.target\r切換到指定 target：\nsystemctl isolate graphical.target\r查看可用 targets：\nsystemctl list-units --type=target\r","date":"2024-08-30","id":38,"permalink":"/zh-hk/linux/proc/systemd/","summary":"\u003ch2 id=\"systemd\"\u003eSystemd\u003c/h2\u003e\n\u003cp\u003e系統嘅第一個進程，進程號為 1。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eps -p \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ePID TTY          TIME CMD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"m\"\u003e1\u003c/span\u003e ?        00:00:04 systemd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e但當我哋想顯示詳細信息嘅時候，結果會有啲唔同。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eps -p \u003cspan class=\"m\"\u003e1\u003c/span\u003e -f\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUID  PID PPID C STIME TTY TIME     CMD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eroot   \u003cspan class=\"m\"\u003e1\u003c/span\u003e    \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e Aug07 ?   00:00:04 /sbin/init noibrs\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e其實呢兩個進程係一樣嘅，因為 \u003ccode\u003einit\u003c/code\u003e 指向嘅係 \u003ccode\u003esystemd\u003c/code\u003e。\u003c/p\u003e","tags":[],"title":"Systemd"},{"content":"基本概念 文件描述符（File Descriptor，FD）係喺操作系統中，用嚟表示已打開嘅文件或其他輸入/輸出資源嘅整數標識符。 佢係操作系統同應用程序之間進行文件操作嘅橋樑。\n喺 Linux 中，文件描述符係一個非負整數，操作系統為每個打開嘅文件或輸入/輸出（I/O）資源（如管道、網絡套接字等）分配一個文件描述符。 每當進程請求打開一個文件或資源時，操作系統會返回一個文件描述符，以後進程就可以通過呢個描述符嚟訪問該文件或資源。\n常見嘅文件描述符 所有進程都會自動打開下面 3 個文件描述符。\n描述符 名稱 描述 0 STDIN 標準輸入 1 STDOUT 標準輸出 2 STDERR 標準錯誤 例如：命令嘅重定向就直接使用咗上面嘅文件描述符。\ncmd \u0026gt; foo.log 2\u0026gt; err.log\r上面嘅 \u0026gt; 同 1\u0026gt; 係一樣嘅。\n代碼中嘅文件描述符 操作系統通過文件描述符嚟管理文件操作。常見嘅文件操作（如讀取、寫入、關閉）通常都需要文件描述符。 下面係一啲常見嘅操作及其文件描述符嘅使用：\n打開文件 open() 系統調用會返回一個文件描述符。\nint fd = open(\u0026#34;example.txt\u0026#34;, O_RDONLY);\r讀取文件 通過文件描述符讀取內容。\nchar buffer[100]; read(fd, buffer, sizeof(buffer));\r寫入文件 通過文件描述符將數據寫入文件。\nwrite(fd, \u0026#34;Hello, World!\u0026#34;, 13);\r關閉文件 關閉文件描述符，以釋放系統資源。\nclose(fd);\r進程中嘅文件描述符 每個進程都有一個對應嘅 /proc/PID/fd/ 目錄，其中包含咗所有該進程打開嘅文件描述符嘅符號鏈接。\nls -l /proc/NGINX_PID/fd\rlrwx------ 1 ... 0 -\u0026gt; /dev/null lrwx------ 1 ... 1 -\u0026gt; /dev/null lrwx------ 1 ... 10 -\u0026gt; \u0026#39;socket:[21631]\u0026#39; l-wx------ 1 ... 2 -\u0026gt; /var/log/nginx/error.log lrwx------ 1 ... 3 -\u0026gt; \u0026#39;socket:[21628]\u0026#39; l-wx------ 1 ... 4 -\u0026gt; /var/log/nginx/access.log l-wx------ 1 ... 5 -\u0026gt; /var/log/nginx/error.log lrwx------ 1 ... 6 -\u0026gt; \u0026#39;socket:[21614]\u0026#39; lrwx------ 1 ... 7 -\u0026gt; \u0026#39;socket:[21615]\u0026#39; lrwx------ 1 ... 8 -\u0026gt; \u0026#39;socket:[21629]\u0026#39; lrwx------ 1 ... 9 -\u0026gt; \u0026#39;socket:[21630]\u0026#39;\r總結 文件描述符為進程提供咗一種抽象。程序可以使用統一嘅接口進行各種 I/O 操作，而唔使關心底層嘅物理設備細節。 例如，讀取文件、從網絡套接字接收數據以及從管道中讀取數據，都可以使用相同嘅 read() 函數嚟實現，呢啲都係通過文件描述符嚟統一管理嘅。\n","date":"2024-08-30","id":39,"permalink":"/zh-hk/linux/proc/fd/","summary":"\u003ch2 id=\"基本概念\"\u003e基本概念\u003c/h2\u003e\n\u003cp\u003e文件描述符（File Descriptor，FD）係喺操作系統中，用嚟表示已打開嘅文件或其他輸入/輸出資源嘅\u003cstrong\u003e整數標識符\u003c/strong\u003e。\n佢係操作系統同應用程序之間進行文件操作嘅橋樑。\u003c/p\u003e\n\u003cp\u003e喺 Linux 中，文件描述符係一個非負整數，操作系統為每個打開嘅文件或輸入/輸出（I/O）資源（如管道、網絡套接字等）分配一個文件描述符。\n每當進程請求打開一個文件或資源時，操作系統會返回一個文件描述符，以後進程就可以通過呢個描述符嚟訪問該文件或資源。\u003c/p\u003e\n\u003ch2 id=\"常見嘅文件描述符\"\u003e常見嘅文件描述符\u003c/h2\u003e\n\u003cp\u003e所有進程都會自動打開下面 3 個文件描述符。\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e描述符\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e名稱\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e描述\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDIN\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e標準輸入\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDOUT\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e標準輸出\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDERR\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e標準錯誤\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e例如：命令嘅重定向就直接使用咗上面嘅文件描述符。\u003c/p\u003e","tags":[],"title":"文件描述符"},{"content":"基本概念 管道可以把一個命令嘅輸出作為下一個命令嘅輸入， 喺命令行環境中通過符號 | 嚟表示，係一種進程間嘅單向通信形式，基於文件描述符實現。\n工作原理 管道會創建咗內存緩衝區，兩個進程（命令）通過呢個緩衝區通信。\n創建管道 使用 | 創建管道時，Shell 會調用 pipe() 嚟創建管道，包含兩個文件描述符。\n寫入端文件描述符：A。 讀取端文件描述符：B。 命令連接 左側命令：把標準輸出（文件描述符 1）重定向到管道嘅寫入端 A。 右側命令：把標準輸入（文件描述符 0）重定向到管道嘅讀取端 B。 數據流動 實時數據傳輸：兩邊嘅命令會並行執行，唔會等前一個命令結束。 無臨時文件：數據喺內存中傳遞。 緩衝區大小：取決於系統。 查看緩衝區大小 cat /proc/sys/fs/pipe-max-size\r1048576\r局限性 單向通信：雙向通信需要使用其他機制，如命名管道（FIFO）或套接字。 緩衝區大小：如果緩衝區滿咗，上游命令會暫停。 ","date":"2024-08-30","id":40,"permalink":"/zh-hk/linux/proc/pipe/","summary":"\u003ch2 id=\"基本概念\"\u003e基本概念\u003c/h2\u003e\n\u003cp\u003e管道可以把一個命令嘅輸出作為下一個命令嘅輸入，\n喺命令行環境中通過符號 \u003ccode\u003e|\u003c/code\u003e 嚟表示，係一種進程間嘅單向通信形式，基於文件描述符實現。\u003c/p\u003e\n\u003ch2 id=\"工作原理\"\u003e工作原理\u003c/h2\u003e\n\u003cp\u003e管道會創建咗內存緩衝區，兩個進程（命令）通過呢個緩衝區通信。\u003c/p\u003e\n\u003ch3 id=\"創建管道\"\u003e創建管道\u003c/h3\u003e\n\u003cp\u003e使用 \u003ccode\u003e|\u003c/code\u003e 創建管道時，Shell 會調用 \u003ccode\u003epipe()\u003c/code\u003e 嚟創建管道，包含兩個文件描述符。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e寫入端文件描述符：\u003ccode\u003eA\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e讀取端文件描述符：\u003ccode\u003eB\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"命令連接\"\u003e命令連接\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e左側命令：把標準輸出（文件描述符 \u003ccode\u003e1\u003c/code\u003e）重定向到管道嘅寫入端 \u003ccode\u003eA\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e右側命令：把標準輸入（文件描述符 \u003ccode\u003e0\u003c/code\u003e）重定向到管道嘅讀取端 \u003ccode\u003eB\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"數據流動\"\u003e數據流動\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e實時數據傳輸：兩邊嘅命令會並行執行，唔會等前一個命令結束。\u003c/li\u003e\n\u003cli\u003e無臨時文件：數據喺內存中傳遞。\u003c/li\u003e\n\u003cli\u003e緩衝區大小：取決於系統。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"查看緩衝區大小\"\u003e查看緩衝區大小\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat /proc/sys/fs/pipe-max-size\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e1048576\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"局限性\"\u003e局限性\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e單向通信：雙向通信需要使用其他機制，如命名管道（FIFO）或套接字。\u003c/li\u003e\n\u003cli\u003e緩衝區大小：如果緩衝區滿咗，上游命令會暫停。\u003c/li\u003e\n\u003c/ul\u003e","tags":[],"title":"管道"},{"content":"todorocks\n","date":"2024-09-01","id":41,"permalink":"/zh-hk/linux/proc/lsof/","summary":"\u003cp\u003etodorocks\u003c/p\u003e","tags":[],"title":"LSOF 命令"},{"content":"todorocks\n","date":"2024-09-01","id":42,"permalink":"/zh-hk/linux/proc/ulimit/","summary":"\u003cp\u003etodorocks\u003c/p\u003e","tags":[],"title":"ULIMIT 命令"},{"content":"文件系統類型 可使用 df 命令的 -T 選項查看 Type 字段。\ndf -Th\rFilesystem Type Size Used Avail Use% Mounted on tmpfs tmpfs 168M 1.1M 167M 1% /run /dev/vda3 ext4 40G 3.2G 35G 9% / tmpfs tmpfs 837M 0 837M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/vda2 vfat 197M 6.1M 191M 4% /boot/efi tmpfs tmpfs 168M 4.0K 168M 1% /run/user/1000 tmpfs tmpfs 168M 4.0K 168M 1% /run/user/0\rEXT4 最常用的 Linux 文件系統，兼具穩定性和性能。\n最大文件 2 TB。 最大分區 32 TB。 默認日志模式是有序模式（Order）。 支持多種日志模式。 VFAT Linux 對 FAT 文件系統的支持，常用於與 Windows 系統共享數據。\nTMPFS 基於內存的虛擬文件系統，讀寫快。\n文件元數據 - inode 在 ext 文件系統中，元數據使用 inode 存儲。\n使用 ls -i` 查看 ls -i foo\r791470 foo\r會輸出 foo 文件的 inode 編號。\n使用 stat 命令 顯示文件的詳細信息。\nstat foo\rFile: foo Size: 0 Blocks: 0 IO Block: 4096 regular empty file Device: fc03h/64515d Inode: 791470 Links: 1 Access: (0664/-rw-rw-r--) Uid: ( 1000/ kuga) Gid: ( 1000/ kuga) Access: 2024-08-29 16:18:20.603296561 +0800 Modify: 2024-08-29 16:18:20.603296561 +0800 Change: 2024-08-29 16:38:49.498144965 +0800 Birth: 2024-08-29 16:18:20.603296561 +0800\rinode 的使用情況 df -i\rFilesystem Inodes IUsed IFree IUse% Mounted on tmpfs 214148 736 213412 1% /run /dev/vda3 2608144 100369 2507775 4% / tmpfs 214148 2 214146 1% /dev/shm tmpfs 214148 3 214145 1% /run/lock /dev/vda2 0 0 0 - /boot/efi tmpfs 42829 25 42804 1% /run/user/1000 tmpfs 42829 26 42803 1% /run/user/0\r新建文件會消耗一個 inode，例如下面的命令。\ntouch foobar\r/dev/vda3 2608144 100370 2507774 4% /\r可以看到 /dev/vda3 的 IFree 減 1 了。如果 inode 用完，就不能新建文件了。\n日志模式類型 文件系統一般分為 3 種日志模式：\nWriteback：回寫模式。 Ordered：有序模式。 Journal：完全日志模式。 Writeback - 回寫模式 特性：文件系統只記錄元數據的日志，實際的數據寫入操作和元數據的更新是異步進行的。也就是說，數據可能在元數據之前寫入磁盤，或者在元數據之後寫入。\n優點：性能較高，因為數據寫入的順序不受嚴格限制。\n缺點：由於數據和元數據之間的寫入順序可能不一致，如果系統崩潰，可能會導致元數據和數據不一致，進而出現數據損壞的風險。\nOrder - 有序模式 特性：文件系統確保所有的數據塊在元數據更新之前被寫入磁盤。換句話說，數據的寫入必須在元數據更新前完成。\n優點：比回寫模式安全得多，因為它減少了數據與元數據不一致的風險，同時保持了較好的性能。\n缺點：性能稍低於回寫模式，但仍然是很多場景下的良好平衡點。\nJournal - 完全日志模式 特性：文件系統不單止記錄元數據的日志，還記錄數據本身的日志。所有的數據和元數據在實際寫入磁盤之前，都會先記錄到日志中。\n優點：這種模式提供了最高的安全性，因為在任何時候，數據和元數據都可以從日志中恢復，即使系統崩潰，文件系統仍然可以保證數據的完整性。\n缺點：性能較低，因為每次寫入都要進行兩次寫操作（一次寫日志，一次寫實際數據）。\n","date":"2024-08-30","id":43,"permalink":"/zh-hk/linux/file-system/","summary":"\u003ch2 id=\"文件系統類型\"\u003e文件系統類型\u003c/h2\u003e\n\u003cp\u003e可使用 df 命令的 \u003ccode\u003e-T\u003c/code\u003e 選項查看 Type 字段。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edf -Th\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eFilesystem     Type   Size  Used Avail Use% Mounted on\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  168M  1.1M  167M   1% /run\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/dev/vda3      ext4    40G  3.2G   35G   9% /\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  837M     \u003cspan class=\"m\"\u003e0\u003c/span\u003e  837M   0% /dev/shm\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  5.0M     \u003cspan class=\"m\"\u003e0\u003c/span\u003e  5.0M   0% /run/lock\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/dev/vda2      vfat   197M  6.1M  191M   4% /boot/efi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  168M  4.0K  168M   1% /run/user/1000\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  168M  4.0K  168M   1% /run/user/0\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"ext4\"\u003eEXT4\u003c/h3\u003e\n\u003cp\u003e最常用的 Linux 文件系統，兼具穩定性和性能。\u003c/p\u003e","tags":[],"title":"文件系統"},{"content":"Shebang #!/usr/bin/env bash\r變量賦值 = 號兩邊唔可以有空格。\nname=foo\r雙引號 可以解釋變量。\nname=foo echo \u0026#34;hello, $name\u0026#34; # hello, foo echo \u0026#34;hello, \\$\\$\u0026#34; # hello, $$ echo \u0026#34;hello, \\\u0026#34;\\\u0026#34;\u0026#34; # hello, \u0026#34;\u0026#34;\r單引號 唔解釋變量，只有單引號係特殊字符。\nname=foo echo \u0026#39;hello, $name\u0026#39; # hello, $name echo \u0026#39;hello, $$\u0026#39; # hello, $$ echo \u0026#39;hello, \u0026#34;\u0026#34;\u0026#39; # hello, \u0026#34;\u0026#34;\r要輸出單引號，需要先關閉單引號。\necho \u0026#39;I\u0026#39;\\\u0026#39;\u0026#39;m fine\u0026#39; # I\u0026#39;m fine\r命令替換 有反單號同 $() 兩種用法。\nresult=`date`\rresult=$(date)\r推薦使用 $()，可讀性更好，更多例子如下：\necho \u0026#34;dir is: $(pwd)\u0026#34;\rcount=$(ls $(pwd) | wc -l)\r喺呢度 ls 冇使用 -l 選項，但 count 嘅值係 4，原因喺呢度。\n輸出重定向 標準輸出重定向 \u0026gt;，新建/覆蓋文件。\ncmd \u0026gt; file\r追加輸出重定向 \u0026gt;\u0026gt;。\ncmd \u0026gt;\u0026gt; file\r標準錯誤重定向 2\u0026gt;，新建/覆蓋文件。\ncmd 2\u0026gt; file\r標準輸出同錯誤重定向到唔同文件。\ncmd \u0026gt; foo.log 2\u0026gt; bar.log\r標準輸出同錯誤重定向到同一文件。\nls 404 \u0026gt; foobar.log 2\u0026gt;\u0026amp;1\r輸入重定向 常用方式，使用 \u0026lt; 符號。\necho \u0026#34;a b c\u0026#34; \u0026gt; foo\rwc \u0026lt; foo\r1 3 6\r內聯重定向，Inline Input Redirection。\nwc \u0026lt;\u0026lt; FOO apple banana cat FOO\r3 3 17\rFOO 為自定義標記，用於多行輸入。\nEXPR 命令 反人類嘅數學運算指令，+ 號兩邊嘅空格唔可以少。\nexpr 2 + 5\r* 號係通配符，仲要轉義。\nexpr 2 \\* 5\r只有整除，唔支持浮點數。\nexpr 24 / 10\r方括號 可以使用 [] 執行數學運算。\nvar1=$[1+5*2] var2=$[2*(3+2)]\rBC 計算器 精確數學運算計算器，全稱 Basic/Bench Calculator。\n交互模式 bc\rCopyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc. This is free software with ABSOLUTELY NO WARRANTY. For details type `warranty\u0026#39;.\r4*2.5 10.0 quit\r-q 選項唔會打印上面嗰串英文歡迎語。\nbc -q\r浮點數 可以直接使用浮點數計算。\n2.5*5 12.5\r除法會用到 scale 變量，默認值為 0，表示整除。\nscale=2 10/3\r表示保留 2 位小數，scale 變量僅對除法有效。\n管道方式 foo=$(echo \u0026#34;scale=2; 10/3\u0026#34; | bc)\r內聯輸入重定向 var1=10.24 foo=$(bc \u0026lt;\u0026lt; EOF scale=2 a=2 $var1/a EOF )\rEXIT 命令 腳本嘅默認退出碼係 0，表示正常退出，可以使用 exit 改變。\nexit 5\r退出碼嘅範圍係 0-255，取模（%256）。\n","date":"2024-08-30","id":44,"permalink":"/zh-hk/linux/script/syntax/","summary":"\u003ch2 id=\"shebang\"\u003eShebang\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#!/usr/bin/env bash\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"變量賦值\"\u003e變量賦值\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e=\u003c/code\u003e 號兩邊唔可以有空格。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003efoo\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"雙引號\"\u003e雙引號\u003c/h2\u003e\n\u003cp\u003e可以解釋變量。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003efoo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hello, \u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# hello, foo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hello, \\$\\$\u0026#34;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# hello, $$\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hello, \\\u0026#34;\\\u0026#34;\u0026#34;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# hello, \u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"單引號\"\u003e單引號\u003c/h2\u003e\n\u003cp\u003e唔解釋變量，只有單引號係特殊字符。\u003c/p\u003e","tags":[],"title":"基本語法"},{"content":"IF 語句 如果 command 嘅退出碼係 0，咁就執行 then 嘅內容。\nif command then ... fi\r另一種格式。\nif command; then ... fi\rELSE if command; then ... else ... fi\rELIF if command; then ... elif command; then ... fi\r檢查用戶 檢查 soda 用戶係咪存在。\n#!/usr/bin/env bash if grep soda /etc/passwd then echo \u0026#34;soda exists\u0026#34; fi\rsoda:x:1001:1001:,,,:/home/soda:/bin/bash soda exists\rgrep 有數據嗰陣，退出碼係 0，冇數據嗰陣退出碼係 1。\nTEST 命令 測試條件，如果係真，返回碼係 0，否則返回碼係 1。\ntest - check file types and compare values\r基本語法。\ntest EXPRESSION\r簡短語法。\n[ EXPRESSION ]\r喺命令行執行完之後，可以用 echo $? 睇返嘅返回碼。\n檢查文件 [ -e file ]：文件係咪存在。 [ -d file ]：係咪存在同埋係目錄。 [ -f file ]：係咪存在同埋係文件。 [ -s file ]：係咪存在同埋唔係空嘅。 [ -r file ]：係咪存在同埋可讀。 [ -w file ]：係咪存在同埋可寫。 [ -x file ]：係咪存在同埋可執行。 [ -O file ]：係咪存在同埋屬於現時嘅用戶。 [ -G file ]：係咪存在同埋屬於用戶組。 [ a -nt b ]：文件 a 係咪比 b 新。 [ a -ot b ]：文件 a 係咪比 b 舊。 如果 file 或者 $file 變數包含空格，要用雙引號。\n[ -e \u0026#34;file\u0026#34; ]\r[ -e \u0026#34;$file\u0026#34; ]\r檢查字串 [ -z str ]：字串係咪空（長度為 0）。 [ -n str ]：字串係咪唔空（長度唔為 0）。 [ s1 = s2 ]：字串係咪相等。 [ s1 != s2 ]：字串係咪唔等。 檢查數值 [ a -eq b ]：兩個數係咪相等。 [ a -ne b ]：兩個數係咪唔等。 [ a -gt b ]：a 係咪大過 b。 [ a -ge b ]：a 係咪大過或等於 b。 [ a -lt b ]：a 係咪細過 b。 [ a -le b ]：a 係咪細過或等於 b。 複合條件 同傳統嘅編程語言一致。\n[ cond1 ] \u0026amp;\u0026amp; [ cond2 ]\r[ cond1 ] || [ cond2 ]\r雙括號 雙括號可以使用高級數學表達式，無需轉義。\nif (( 2**10 \u0026gt; 1000 )) then ... fi\r雙方括號 提供字串嘅高級匹配模式。\nif [[ $BASH_VERSION == 5.* ]] then ... fi\rCASE 語句 #!/usr/bin/env bash # Script 嘅第一個參數 case \u0026#34;$1\u0026#34; in start) echo \u0026#34;Starting the service...\u0026#34; # 喺呢度加入啟動服務嘅指令 ;; stop) echo \u0026#34;Stopping the service...\u0026#34; # 喺呢度加入停止服務嘅指令 ;; *) echo \u0026#34;Usage: $0 {start|stop}\u0026#34; exit 1 ;; esac\r$0：腳本名稱。 $1：腳本嘅第一個參數 )：分支條件結束標記。 ;;：分支命令結束標記。 *)：默認分支，所有分支唔匹配時執行。 ","date":"2024-08-31","id":45,"permalink":"/zh-hk/linux/script/cond/","summary":"\u003ch2 id=\"if-語句\"\u003eIF 語句\u003c/h2\u003e\n\u003cp\u003e如果 \u003ccode\u003ecommand\u003c/code\u003e 嘅退出碼係 \u003ccode\u003e0\u003c/code\u003e，咁就執行 \u003ccode\u003ethen\u003c/code\u003e 嘅內容。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e另一種格式。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e command\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"else\"\u003eELSE\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e command\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"elif\"\u003eELIF\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e command\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelif\u003c/span\u003e command\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"檢查用戶\"\u003e檢查用戶\u003c/h3\u003e\n\u003cp\u003e檢查 soda 用戶係咪存在。\u003c/p\u003e","tags":[],"title":"條件結構"},{"content":"FOR 語句 for var in list do ... done\rvar 變量喺循環體外可以正常使用。\n#!/usr/bin/env bash for var in apple banana do echo \u0026#34;hello $var\u0026#34; done echo \u0026#34;outside $var\u0026#34;\rhello apple hello banana outside var\r變量存儲列表。\n#!/usr/bin/env bash list=\u0026#34;apple banana\u0026#34; list=$list\u0026#34; orange\u0026#34; for var in $list\r命令替換。\nfor var in $(cat file)\r通配符遍歷目錄。\nfor var in /home/soda/*\rIFS - 字段分隔符 環境變量 IFS（Internal Field Separator）指定咗字段分隔符。\necho $IFS\r默認值係空，表示以下列字符分隔。\n空格 制表符 換行符 以換行符分隔 IFS=$\u0026#39;\\n\u0026#39;\r以多個符號分隔 IFS=$\u0026#39;\\n:;\u0026#34;\u0026#39;\r表示以換行符、冒號、分號、雙引號作為分隔符。\nC 語言中的 FOR i 變量喺外部正常訪問。\n#!/usr/bin/env bash for (( i = 1; i \u0026lt; 3; i++ )) do echo \u0026#34;index $i\u0026#34; done echo \u0026#34;last index $i\u0026#34;\rindex 1 index 2 last index 3\rWHILE 語句 while test command do ... done\r#!/usr/bin/env bash i=3 while [ $i -gt 0 ] do echo \u0026#34;index $i\u0026#34; i=$[ $i - 1 ] done\rindex 3 index 2 index 1\r多個 while 條件嘅時候，以最後一個條件嘅退出碼判斷。\nUNTIL 語句 until test command do ... done\r#!/usr/bin/env bash i=3 until [ $i -le 0 ] do echo \u0026#34;index $i\u0026#34; i=$[ $i - 1 ] done\rindex 3 index 2 index 1\rBREAK 語句 支持指定退出循環嘅層數。\n#!/usr/bin/env bash for (( i = 0; i \u0026lt; 3; i++ )); do echo \u0026#34;i=$i\u0026#34; for (( j = 0; j \u0026lt; 3; j++ )); do echo \u0026#34; j=$j\u0026#34; if [ $j -eq 1 ]; then break 2 fi done done\ri=0 j=0 j=1\rbreak 默認值係 1，表示退出 1 層循環。\nCONTINUE 語句 #!/usr/bin/env bash for (( i = 0; i \u0026lt; 3; i++ )); do echo \u0026#34;i=$i\u0026#34; for (( j = 0; j \u0026lt; 3; j++ )); do echo \u0026#34; j=$j\u0026#34; if [ $j -eq 1 ]; then continue 2 fi done done\ri=0 j=0 j=1 i=1 j=0 j=1 i=2 j=0 j=1\r同 break 一樣，默認都係 1。\n循環輸出重定向 可以對循環中嘅標準輸出重定向。\n#!/usr/bin/env bash for var in apple banana do echo \u0026#34;hello $var\u0026#34; done \u0026gt; output.txt\r循環體嘅輸出會重定向到 output.txt。\n循環輸出管道 循環體嘅輸出仲可以用管道傳輸。\n#!/usr/bin/env bash for var in apple banana do echo \u0026#34;hello $var\u0026#34; done | sort\r總結 我竟然有啲鍾意 break 嘅語法糖。\n","date":"2024-08-30","id":46,"permalink":"/zh-hk/linux/script/loop/","summary":"\u003ch2 id=\"for-語句\"\u003eFOR 語句\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e var in list\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003ccode\u003evar\u003c/code\u003e 變量喺循環體外可以正常使用。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e var in apple banana\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hello \u003c/span\u003e\u003cspan class=\"nv\"\u003e$var\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;outside \u003c/span\u003e\u003cspan class=\"nv\"\u003e$var\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehello apple\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehello banana\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eoutside var\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e變量存儲列表。\u003c/p\u003e","tags":[],"title":"循環結構"},{"content":"位置參數 Positional Parameters，腳本嘅位置參數。\n$0：腳本名，包含路徑。 $1：第一個參數，以此類推。 ${10}：大於 9 嘅參數要用花括號。 #!/usr/bin/env bash echo $0 echo $1\r./foo a\r./foo a\rBASENAME 可以去掉腳本嘅路徑，只保留名稱。\nbasename /home/kuga/foo\r腳本中嘅用法。\nname=$(basename $0)\r特殊參數 參考呢度。\n移動參數 shift 命令可以把位置參數左移一位。\n#!/usr/bin/env bash i=1 while [ -n \u0026#34;$1\u0026#34; ] do echo \u0026#34;param #$i = $1\u0026#34; i=$[ $i + 1 ] shift done\r./foo a b\rparam #1 = a param #2 = b\r腳本選項 選項就係以喺單個連字符後跟單個字母，如：-a。由於選項同參數都係出現喺腳本嘅後面，為咗區分開嚟，一般係用雙連字符 --，左邊係選項，右邊係參數，例如。\n./foo -a -b -- p1 p2\r要喺腳本中正確解釋選項同參數，唔係一件容易嘅事，為此官方提供咗兩個工具。\ngetopt 外部命令。 支持長選項，如 --help。 適合複雜嘅命令行工具。 getopts 內部命令。 唔支持長選項。 適合簡單嘅選項場景。 Github 上面都有唔少選項解釋項目。\ngetopt 命令 getopt optstring parameters\roptstring：選項嘅定義。 parameters：選項嘅內容。 例如對於 optstring=ab:c。\n單字母 a 同 c 代表無值選項。 字母 b 後跟 : 表示有值選項。 睇下下面例子嘅輸出。\ngetopt ab:c -a -b bval -c p1 p2\r-a -b bval -c -- p1 p2\r可以睇到佢使用 -- 把選項同參數分隔開咗。\ngetopts 命令 getopts 係 Bash 嘅內置命令，佢會逐個解釋選項，然後把選項嘅信息存儲喺特定變量中，方便腳本訪問。呢個先係畀我呢啲小菜雞用嘅命令。\ngetopts optstring name\rname：當前選項嘅名稱。 OPTIND：每處理一個項目，該值會加 1。 OPTARG：如果選項有值，會保存在呢個變量中。 #!/usr/bin/env bash while getopts \u0026#34;ab:c:\u0026#34; name; do case $name in a) echo \u0026#34;Option -a\u0026#34; ;; b) echo \u0026#34;Option -b: $OPTARG\u0026#34; ;; c) echo \u0026#34;Option -c: $OPTARG\u0026#34; ;; \\?) echo \u0026#34;Invalid option: -$OPTARG\u0026#34; exit 1 ;; esac done # 顯示 OPTIND 嘅值 echo \u0026#34;OPTIND: $OPTIND\u0026#34; # 使用 shift 來移除已解析嘅選項同參數 shift $((OPTIND - 1)) # 剩餘嘅非選項參數 echo \u0026#34;Params: $@\u0026#34;\r./foo -a -b v1 -c v2 p1 p2\rOption -a Option -b: v1 Option -c: v2 OPTIND: 6 Params: p1 p2\r","date":"2024-08-31","id":47,"permalink":"/zh-hk/linux/script/input/","summary":"\u003ch2 id=\"位置參數\"\u003e位置參數\u003c/h2\u003e\n\u003cp\u003ePositional Parameters，腳本嘅位置參數。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$0\u003c/code\u003e：腳本名，包含路徑。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$1\u003c/code\u003e：第一個參數，以此類推。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e${10}\u003c/code\u003e：大於 9 嘅參數要用花括號。\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./foo a\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./foo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ea\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"basename\"\u003eBASENAME\u003c/h2\u003e\n\u003cp\u003e可以去掉腳本嘅路徑，只保留名稱。\u003c/p\u003e","tags":[],"title":"輸入處理"},{"content":"標準文件描述符 Standard File Descriptors。\n名稱 編號 說明 STDIN 0 標準輸入 STDOUT 1 標準輸出 STDERR 2 標準錯誤 標準輸入 命令 cat 默認從標準輸入讀取內容，如果直接運行 cat 而唔指定文件名，佢會等用戶輸入。\ncat\r重定向使用 \u0026lt;。\ncat \u0026lt; foo\rwc \u0026lt; foo\r標準輸出 默認係終端或者屏幕。\necho \u0026#34;hello world\u0026#34;\r重定向使用 \u0026gt; 或 1\u0026gt;。\necho \u0026#34;hello world\u0026#34; \u0026gt; foo\r標準錯誤 默認係終端或者屏幕。\nls 404\r重定向使用 2\u0026gt;。\nls 404 2\u0026gt; foo\r使用 \u0026amp;\u0026gt; 可以同時重定向標準輸出同錯誤輸出。\nls 404 \u0026amp;\u0026gt; foo\rEXEC 命令 喺命令行中使用 exec ls\rShell 進程會被新命令嘅進程取代，執行完後唔會返回到原來嘅 Shell 中。\n喺腳本中使用 #!/usr/bin/env bash exec /bin/date echo \u0026#34;This will never be executed\u0026#34;\r腳本進程會被 date 命令取代，echo 唔會執行。\n文件描述符重定向 #!/usr/bin/env bash echo \u0026#34;呢個會輸出到終端\u0026#34; exec 1\u0026gt; output.txt echo \u0026#34;呢個會寫入到 output.txt\u0026#34;\r用於修改文件描述符時，唔會替換當前進程，只會影響後續命令嘅輸入輸出。\n關閉文件描述符 重定向到 \u0026amp;- 即可關閉。關閉之後，唔可以再寫數據。\n#!/usr/bin/env bash exec 3\u0026gt; testfile echo \u0026#34;apple\u0026#34; \u0026gt;\u0026amp;3 exec 3\u0026gt;\u0026amp;-\r/dev/null 空設備，位桶。\ncrw-rw-rw- 1 root root 1, 3 Aug 14 23:16 /dev/null\r把標準輸出同標準錯誤重定向到空設備。\ncommand \u0026gt; /dev/null 2\u0026gt;\u0026amp;1\rMKTEMP 命令 根據文件名模板，創建臨時文件。\nfilename.XXXXXX\r命令會把 X 代替為隨機字符，模板最少為 6 個 X。\n創建文件 該命令創建嘅文件只有 Owner 有權限。\nmktemp foo.XXXXXX\r-rw------- 1 kuga kuga 0 Sep 2 17:27 foo.zPtFtG\r創建目錄 mktemp -d bar.XXXXXX\rdrwx------ 2 kuga kuga 4096 Sep 2 17:29 bar.RQAMzc\r使用 /tmp 目錄 使用 -t 選項會喺 /tmp 目錄創建文件。\nmktemp -t foo.XXXXXX\r/tmp/foo.0IglAI\rTEE 命令 同時把數據重定向到標準輸出同文件。\ntee - read from standard input and write to standard output and files\rdate | tee testfile\rMon Sep 2 05:36:44 PM CST 2024\rcat testfile\rMon Sep 2 05:36:44 PM CST 2024\r屏幕同文件都有同一份數據。\n","date":"2024-08-31","id":48,"permalink":"/zh-hk/linux/script/output/","summary":"\u003ch2 id=\"標準文件描述符\"\u003e標準文件描述符\u003c/h2\u003e\n\u003cp\u003eStandard File Descriptors。\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e名稱\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e編號\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e說明\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDIN\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e標準輸入\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDOUT\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e標準輸出\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDERR\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e2\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e標準錯誤\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"標準輸入\"\u003e標準輸入\u003c/h3\u003e\n\u003cp\u003e命令 \u003ccode\u003ecat\u003c/code\u003e 默認從標準輸入讀取內容，如果直接運行 \u003ccode\u003ecat\u003c/code\u003e 而唔指定文件名，佢會等用戶輸入。\u003c/p\u003e","tags":[],"title":"輸出處理"},{"content":"Bash Shell 喺默認情況下，Bash Shell 會忽略 SIGQUIT(3) 同 SIGTERM(15) 信號， 所以執行下面嘅命令唔會有任何反應（$$ 係當前 Shell 嘅進程 ID）。\nkill -3 $$\rkill -15 $$\r如果收到 SIGHUP(1) 信號，Bash Shell 會退出，但喺退出之前， 佢會把 SIGHUP 信號傳畀所有由該 Shell 啟動嘅進程同腳本。\nkill -1 $$\rTRAP 可以用 trap 命令捕捉信號。\ntrap commands signals\r捕捉信號 鍵盤 Ctrl+C 嘅信號係 SIGINT。\n#!/usr/bin/env bash trap \u0026#34;echo \u0026#39; Trapped Ctrl-C\u0026#39;\u0026#34; SIGINT count=1 while [ $count -le 5 ] do echo \u0026#34;loop #$count\u0026#34; sleep 1 count=$[ $count + 1 ] done\rloop #1 loop #2 ^C Trapped Ctrl-C loop #3 loop #4 ^C Trapped Ctrl-C loop #5\r退出信號 可以捕捉腳本退出時候嘅信號。\ntrap \u0026#34;echo \u0026#39; Trapped Ctrl-C\u0026#39;\u0026#34; EXIT\r移除信號 用 -- 就可以移除信號。\ntrap -- SIGINT\rNOHUP No Hang Up，由該命令啟動嘅進程或者腳本會忽略 SIGHUP 信號。 即係話，即使終端退出，由該終端啟動嘅進程或者腳本唔會跟住一齊退出。\nrun a command immune to hangups, with output to a non-tty\rnohup ./foo\r默認會把 STDOUT 同 STDERR 重定向到 nohup.out。\n-rw------- 1 kuga kuga 40 Sep 2 18:46 nohup.out\r自己重定向會好啲。\nnohup ./foo \u0026gt; out.log 2\u0026gt;\u0026amp;1\r-rw-rw-r-- 1 kuga kuga 62 Sep 2 18:50 out.log\rNice Value 控制進程優先級嘅參數。nice 值越高，進程嘅優先級越低，分配到嘅 CPU 資源越少。\n範圍 nice 值嘅範圍從 -20 到 19：\n-20：最高優先級。 0：默認優先級。 19：最低優先級。 啟動進程優先級 nice -n VALUE command\rnice -n 10 ./foo\r修改進程優先級 renice VALUE -p PID\rrenice 5 -p 404\r權限 普通用戶只能降低進程嘅優先級。 root 用戶先可以提高進程嘅優先級。 ","date":"2024-09-02","id":49,"permalink":"/zh-hk/linux/script/signal/","summary":"\u003ch2 id=\"bash-shell\"\u003eBash Shell\u003c/h2\u003e\n\u003cp\u003e喺默認情況下，Bash Shell 會忽略 \u003ccode\u003eSIGQUIT(3)\u003c/code\u003e 同 \u003ccode\u003eSIGTERM(15)\u003c/code\u003e 信號，\n所以執行下面嘅命令唔會有任何反應（\u003ccode\u003e$$\u003c/code\u003e 係當前 Shell 嘅進程 ID）。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ekill\u003c/span\u003e -3 \u003cspan class=\"nv\"\u003e$$\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ekill\u003c/span\u003e -15 \u003cspan class=\"nv\"\u003e$$\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e如果收到 \u003ccode\u003eSIGHUP(1)\u003c/code\u003e 信號，Bash Shell 會退出，但喺退出之前，\n佢會把 \u003ccode\u003eSIGHUP\u003c/code\u003e 信號傳畀所有由該 Shell 啟動嘅進程同腳本。\u003c/p\u003e","tags":[],"title":"信號處理"},{"content":"創建函數 function name { commands }\r或者\nname() { commands }\r函數返回值 返回值有多種形式。\n使用 $? 表示函數最後一條命令的退出狀態碼。\necho $?\r使用 return #!/usr/bin/env bash function double { echo \u0026#34;Double value\u0026#34; read -p \u0026#34;Enter a value:\u0026#34; value return $[ $value * 2 ] } double echo \u0026#34;Result: $?\u0026#34;\r本質係退出狀態碼，範圍 [0, 255]，超出會對 256 取模。\n使用標準輸出 #!/usr/bin/env bash function double { read -p \u0026#34;Enter a value:\u0026#34; value echo $[ $value * 2 ] } result=$(double) echo \u0026#34;Result: $result\u0026#34;\rresult 會保存函數中所有的標準輸出。\n函數傳參 #!/usr/bin/env bash function add { if [ $# -lt 2 ]; then echo \u0026#34;invalid params\u0026#34; else echo $[ $1 + $2 ] fi } result=$(add 1 2) echo \u0026#34;Result: $result\u0026#34;\r函數入面嘅 $#、$1 同外層嘅參數相互獨立。\n變量的作用域 函數外定義 邊度都可以訪問。\n#!/usr/bin/env bash soda=green function foo { echo $soda soda=yellow } foo echo $soda\rgreen yellow\r函數內定義 #!/usr/bin/env bash function foo { soda=green } # 函數未執行前無法訪問 echo $soda foo echo $soda soda=yellow echo $soda\rgreen yellow\r使用 local local 變量只喺函數內部生效，同外部重名變量相互獨立。\n#!/usr/bin/env bash soda=green function foo { echo $soda local soda=yellow echo $soda } foo echo $soda\rgreen yellow green\r變量是否被定義 可以使用參數展開的 + 標記。\n函數是否被定義 後面定義的同名函數會覆蓋前面定義同名函數，所以喺定義函數之前，可以先判斷一下。\ndeclare -f FUNC_NAME\r例如把函數寫喺 .bashrc 文件。\nfunction sayhello() { echo \u0026#34;hello\u0026#34; }\rdeclare -f sayhello\recho $?\r函數已定義，退出碼為 0，未定義，退出碼為 1。\nif declare -f sayhello \u0026gt; /dev/null; then echo \u0026#34;sayhello is defined\u0026#34; else echo \u0026#34;sayhello not defined\u0026#34; fi\r","date":"2024-09-02","id":50,"permalink":"/zh-hk/linux/script/func/","summary":"\u003ch2 id=\"創建函數\"\u003e創建函數\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e name \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    commands\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e或者\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ename\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    commands\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"函數返回值\"\u003e函數返回值\u003c/h2\u003e\n\u003cp\u003e返回值有多種形式。\u003c/p\u003e\n\u003ch3 id=\"使用-\"\u003e使用 $?\u003c/h3\u003e\n\u003cp\u003e表示函數最後一條命令的退出狀態碼。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$?\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"使用-return\"\u003e使用 return\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e double \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Double value\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eread\u003c/span\u003e -p \u003cspan class=\"s2\"\u003e\u0026#34;Enter a value:\u0026#34;\u003c/span\u003e value\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e $\u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$value\u003c/span\u003e * \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edouble\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Result: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$?\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003e本質係退出狀態碼，範圍 [0, 255]，超出會對 256 取模。\u003c/strong\u003e\u003c/p\u003e","tags":[],"title":"函數"},{"content":"Parameter Expansion 喺 Bash 入面，參數展開係一種用嚟操作同處理變量內容嘅機制。 通過參數展開，可以攞變量嘅值，修改變量嘅值，或者為未設置嘅變量提供默認值。\nShell Parameter Expansion\rShell 參數展開\n變量展開 最常見嘅方式。\nvar=\u0026#34;Bash\u0026#34; echo \u0026#34;Hello, ${var}!\u0026#34;\r默認值展開 標記 + ${var+DEFAULT}\rvar 未定義：返回空串。 var 已定義： 係空值：返回 DEFAULT。 非空值：返回 DEFAULT。 unset var echo ${var+foo}\rvar= echo ${var+foo}\rfoo\r可以用呢個標記嚟判斷變量係咪未定義。\n#!/usr/bin/env bash if [ -n \u0026#34;${var+defined}\u0026#34; ]; then echo \u0026#34;var already defined\u0026#34; else echo \u0026#34;var not defined\u0026#34; fi\r注意\n如果 ${var+defined} 冇用雙引號，當返回空字符串嘅時候，條件就會變成 [ -n ] ， 呢個係一個有效嘅條件，唔會產生任何錯誤，且佢嘅返回值為真。顯然呢個係唔合理嘅，所以必須加雙引號。\n標記 - ${var-DEFAULT}\rvar 未定義：返回 DEFAULT。 var 已定義： 係空值：返回 var。 非空值：返回 var。 unset var echo ${var-foo}\rfoo\rvar= echo ${var-foo}\rvar 同 DEFAULT 嘅值有可能相同，所以唔可以用嚟判斷 var 係咪被定義。\n標記 :+ ${var:+DEFAULT}\rvar 未定義：返回空串。 var 已定義： 係空值：返回空串。 非空值：返回 DEFAULT。 var=abc echo ${var:+foo}\rfoo\r標記 :- ${var:-DEFAULT}\rvar 未定義：返回 DEFAULT。 var 已定義 係空值：返回 DEFAULT。 非空值：返回 var。 unset var echo ${var:-foo}\rvar= echo ${var:-foo}\r上面嘅兩個例子都會輸出 foo。\n標記 := var 未定義：var=foo，返回 var。 var 已定義 係空值：var=foo，返回 var。 非空值：返回 var。 unset var echo ${var:=foo} echo $var\rfoo foo\r字符串操作 提取子串 var=\u0026#34;heybro!\u0026#34; echo ${var:3:4}\rbro!\r字符串長度 var=\u0026#34;heybro!\u0026#34; echo ${#var}\r7\r刪除前綴 刪除最短匹配：用 #，模式 */。\nvar=\u0026#34;a/b/c\u0026#34; echo ${var#*/}\rb/c\r刪除最長匹配：用 ##，模式 */。\nvar=\u0026#34;a/b/c\u0026#34; echo ${var##*/}\rc\r刪除後綴 刪除最短匹配：用 %，模式 /*。\nvar=\u0026#34;a/b/c\u0026#34; echo ${var%/*}\ra/b\r刪除最長匹配：用 %%，模式 /*。\nvar=\u0026#34;a/b/c\u0026#34; echo ${var%%/*}\ra\r替換第一個子串 var=\u0026#34;aa bb aa\u0026#34; echo ${var/aa/cc}\rcc bb aa\r替換所有子串 var=\u0026#34;aa bb aa\u0026#34; echo ${var//aa/cc}\rcc bb cc\r","date":"2024-09-02","id":51,"permalink":"/zh-hk/linux/script/param-exp/","summary":"\u003ch2 id=\"parameter-expansion\"\u003eParameter Expansion\u003c/h2\u003e\n\u003cp\u003e喺 Bash 入面，參數展開係一種用嚟操作同處理變量內容嘅機制。\n通過參數展開，可以攞變量嘅值，修改變量嘅值，或者為未設置嘅變量提供默認值。\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eShell Parameter Expansion\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eShell 參數展開\u003c/p\u003e","tags":[],"title":"參數展開"},{"content":"參數：$? 上一個命令或者腳本嘅退出碼，0 代表成功，非 0 代表失敗。\nls 404\recho $?\r會輸出 2，表示失敗。喺腳本中可以用 exit 指定返回碼。\n參數：$# 表示傳畀腳本或者函數嘅參數個數。\n#!/usr/bin/env bash echo $#\r./foo p1 p2\r2\r參數：$* 傳畀腳本嘅所有參數，默認以空格分隔。\n#!/usr/bin/env bash echo $*\r./foo p1 p2p3\rp1 p2p3\r分隔符可以通過 IFS 變量修改。\n參數：$@ 傳畀腳本嘅所有參數，默認以空格分隔。\n#!/usr/bin/env bash echo $@\r./foo p1 p2p3\rp1 p2p3\r分隔符可以通過 IFS 變量修改。\n區別：$* 同 $@ 主要區別喺處理帶有空格嘅參數。\n$*：代表所有參數嘅字符串，係一個整體。 $@： 唔帶雙引號：同 $* 一樣。 帶上雙引號：\u0026quot;$@\u0026quot;，表示參數數組，每個參數係獨立嘅。 # 假設傳畀嘅參數係 \u0026#34;arg1\u0026#34; \u0026#34;arg2 with space\u0026#34; \u0026#34;arg3\u0026#34; for arg in \u0026#34;$@\u0026#34;; do echo \u0026#34;Argument: $arg\u0026#34; done\r# 將所有參數傳畀另一個腳本 another_script \u0026#34;$@\u0026#34;\r參數：$$ 當前腳本嘅進程 ID。\necho $$\r參數：$! 最近喺進程後台運行嘅進程 ID。\necho $!\r參數：$0 當前腳本名稱。\necho $0\r-bash\r參數：$n 第 n 個參數。\n#!/usr/bin/env bash echo $1\r./foo a b c\ra\r參數：$- 腳本嘅選項。\necho $-\rhimBHs\r上面係當前 Shell 嘅啟動選項。\n","date":"2024-08-30","id":52,"permalink":"/zh-hk/linux/script/special-params/","summary":"\u003ch2 id=\"參數\"\u003e參數：$?\u003c/h2\u003e\n\u003cp\u003e上一個命令或者腳本嘅退出碼，0 代表成功，非 0 代表失敗。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els \u003cspan class=\"m\"\u003e404\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$?\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e會輸出 2，表示失敗。喺腳本中可以用 \u003ccode\u003eexit\u003c/code\u003e 指定返回碼。\u003c/p\u003e\n\u003ch2 id=\"參數-1\"\u003e參數：$#\u003c/h2\u003e\n\u003cp\u003e表示傳畀腳本或者函數嘅參數個數。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$#\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./foo p1 p2\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"參數-2\"\u003e參數：$*\u003c/h2\u003e\n\u003cp\u003e傳畀腳本嘅所有參數，默認以空格分隔。\u003c/p\u003e","tags":[],"title":"特殊參數"},{"content":"ECHO 命令 使用 -e 選項可以創建簡單嘅多行文本。\necho -e \u0026#39;aa\\nbb\u0026#39;\raa bb\rHere Document Here Document（縮寫為 Heredoc）係 Shell 中嘅一種輸入重定向方式， 允許喺腳本或命令中嵌入多行文本並傳遞俾命令或文件。\n基本語法 command \u0026lt;\u0026lt;EOF 多行文本內容 EOF\rcommand：如 cat、sed、gawk。 \u0026lt;\u0026lt;EOF：標記文檔嘅開始並定義結束標記。 EOF：標記文檔結束位置。 呢度嘅 EOF 只係一個例子，可以用任意標記。\n創建多行文本文件 多行文本可以重定向到 foo.txt 文件。\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo.txt apple banana EOF\rcat foo.txt\rapple banana\r作為命令嘅輸入 grep \u0026#39;app\u0026#39; \u0026lt;\u0026lt;EOF apple banana EOF\r引號嘅區別 如果 EOF 標記使用引號，功能會有所不同。\n引號類型 變量/特殊字符 EOF 解釋 'EOF' 唔解釋 \u0026quot;EOF\u0026quot; 唔解釋 如果內容只係純文檔，盡量使用引號，減少特殊字符嘅影響。\n使用引號 單/雙引號係一樣嘅，都唔會解釋 $ 符號。\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; $HOME EOF\r$HOME\r唔使用引號 同唔使用引號係一樣嘅，會解釋 $ 符號。\ncat \u0026lt;\u0026lt;EOF $HOME EOF\r/home/kuga\r","date":"2024-09-04","id":53,"permalink":"/zh-hk/linux/text/multi-lines/","summary":"\u003ch2 id=\"echo-命令\"\u003eECHO 命令\u003c/h2\u003e\n\u003cp\u003e使用 \u003ccode\u003e-e\u003c/code\u003e 選項可以創建簡單嘅多行文本。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e -e \u003cspan class=\"s1\"\u003e\u0026#39;aa\\nbb\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eaa\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebb\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"here-document\"\u003eHere Document\u003c/h2\u003e\n\u003cp\u003eHere Document（縮寫為 Heredoc）係 Shell 中嘅一種輸入重定向方式，\n允許喺腳本或命令中嵌入多行文本並傳遞俾命令或文件。\u003c/p\u003e\n\u003ch3 id=\"基本語法\"\u003e基本語法\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e多行文本內容\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecommand\u003c/code\u003e：如 \u003ccode\u003ecat\u003c/code\u003e、\u003ccode\u003esed\u003c/code\u003e、\u003ccode\u003egawk\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;\u0026lt;EOF\u003c/code\u003e：標記文檔嘅開始並定義結束標記。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEOF\u003c/code\u003e：標記文檔結束位置。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e呢度嘅 \u003ccode\u003eEOF\u003c/code\u003e 只係一個例子，可以用任意標記。\u003c/p\u003e","tags":[],"title":"創建多行文本"},{"content":"簡介 正則表達式（Regular Expressions, regex）根據唔同嘅標準可以分為以下幾類。\n類型 縮寫 全稱 基本正則表達式 BRE BRE，Basic Regular Expressions 擴展正則表達式 ERE ERE，Extended Regular Expressions Perl 正則表達式 PCRE Perl-Compatible Regular Expressions POSIX 正則表達式 BRE \u0026amp; ERE BRE \u0026amp; ERE BRE 同 ERE 係 POSIX 標準入面嘅兩種正則表達式， BRE 比較基礎，需要對某啲元字符轉義，ERE 係 BRE 嘅擴展，提供咗更多嘅元字符同功能。 PCRE 係一種功能更強大、語法更靈活嘅正則表達式類型， 廣泛用於現代編程語言如：Python、Ruby、Javascript。\nSED 命令 支持 BRE 同 ERE，默認使用 BRE。\nBRE 模式 呢種模式需要對元字符進行轉義，例如：\n)：需要使用 \\) 轉義。 |：需要使用 \\| 轉義。 echo \u0026#39;abc\u0026#39; | sed \u0026#39;s/\\(b\\|c\\)/p/g\u0026#39;\rapp\rERE 模式 使用 -E 或 -r 選項啟用 ERE，唔需要轉義元字符。\necho \u0026#39;abc\u0026#39; | sed -E \u0026#39;s/(b|c)/p/g\u0026#39;\rapp\rGAWK 默認使用 ERE 模式。\necho \u0026#39;abc\u0026#39; | gawk \u0026#39;{gsub(/(b|c)/, \u0026#34;p\u0026#34;); print }\u0026#39;\rapp\r特殊字符 有特殊含意嘅字符，需要轉義。\n.*[]^${}\\+?|()\r雖然 / 唔係正則表達式特殊字符，但喺 sed 同 gawk 入面都要轉義。\n行首 ^ 匹配行嘅首部位置。\necho \u0026#39;aa bb\u0026#39; | sed -n \u0026#39;/^aa/p\u0026#39;\r如果 ^ 唔係出現喺開頭，則同普通字符一樣，無須轉義。\necho \u0026#39;aa b^b\u0026#39; | sed -n \u0026#39;/b^/p\u0026#39;\r行尾 $ 匹配行嘅尾部位置。\necho \u0026#39;aa bb\u0026#39; | sed -n \u0026#39;/bb$/p\u0026#39;\r如果 $ 唔係出現喺結尾，則同普通字符一樣，無須轉義。\necho \u0026#39;aa b$b\u0026#39; | sed -n \u0026#39;/b$b/p\u0026#39;\r點字符 . 匹配除換行符外嘅任意單個字符。\necho \u0026#39;abc\u0026#39; | sed -n \u0026#39;/a.c/p\u0026#39;\r字符組 [] Character Class，可以匹配組內任一字符。\necho \u0026#39;cat\u0026#39; | sed -n \u0026#39;/[ch]at/p\u0026#39;\recho \u0026#39;yes\u0026#39; | sed -n \u0026#39;/[Yy][Ee][Ss]/p\u0026#39;\r排除組內字符。\necho \u0026#39;bat\u0026#39; | sed -n \u0026#39;/[^ch]at/p\u0026#39;\r匹配 c - e 之間嘅字符。\necho \u0026#39;cat\u0026#39; | sed -n \u0026#39;/[c-e]at/p\u0026#39;\r匹配 c - e 或 0 - 9 之間嘅字符。\necho \u0026#39;cat\u0026#39; | sed -n \u0026#39;/[c-e0-9]at/p\u0026#39;\r星號 * 匹配 * 號前面嘅字符 0 次或多次。\necho \u0026#39;24\u0026#39; | sed -n \u0026#39;/23*4/p\u0026#39;\recho \u0026#39;234\u0026#39; | sed -n \u0026#39;/23*4/p\u0026#39;\recho \u0026#39;2334\u0026#39; | sed -n \u0026#39;/23*4/p\u0026#39;\recho \u0026#39;bat\u0026#39; | sed -n \u0026#39;/b[ae]*/p\u0026#39;\recho \u0026#39;baaeeaet\u0026#39; | sed -n \u0026#39;/b[ae]*/p\u0026#39;\r以上例子都係可以成功匹配嘅。\n問號 ? 匹配 ? 號前面嘅字符 0 次或 1 次。\necho \u0026#39;at\u0026#39; | sed -En \u0026#39;/c?at/p\u0026#39;\recho \u0026#39;ccbbat\u0026#39; | sed -En \u0026#39;/c?at/p\u0026#39;\r上面嘅例子都係可以匹配嘅，可以用 ^ 限制。\necho \u0026#39;ccbbat\u0026#39; | sed -En \u0026#39;/^c?at/p\u0026#39;\r上面只能匹配 at 或 cat。\n加號 + 匹配 + 號前面嘅字符 1 次或多次。\necho \u0026#39;at\u0026#39; | sed -En \u0026#39;/c+at/p\u0026#39;\r區間 指定 {} 前面字符嘅匹配次數。\necho \u0026#39;cat\u0026#39; | sed -En \u0026#39;/^c{1}at/p\u0026#39;\recho \u0026#39;ccat\u0026#39; | sed -En \u0026#39;/^c{1,2}at/p\u0026#39;\r竪線 | 表示或邏輯。\necho \u0026#39;cat\u0026#39; | sed -En \u0026#39;/cat|hat/p\u0026#39;\r分組 () 分組可以視為一個整體。\necho \u0026#39;cat\u0026#39; | sed -En \u0026#39;/(c|h)at/p\u0026#39;\recho \u0026#39;Sun\u0026#39; | sed -En \u0026#39;/(S|s)un(day)?/p\u0026#39;\r","date":"2024-09-04","id":54,"permalink":"/zh-hk/linux/text/regex/","summary":"\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cp\u003e正則表達式（Regular Expressions, regex）根據唔同嘅標準可以分為以下幾類。\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e類型\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e縮寫\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e全稱\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e基本正則表達式\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE，Basic Regular Expressions\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e擴展正則表達式\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eERE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eERE，Extended Regular Expressions\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerl 正則表達式\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePCRE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerl-Compatible Regular Expressions\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePOSIX 正則表達式\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE \u0026amp; ERE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE \u0026amp; ERE\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eBRE 同 ERE 係 POSIX 標準入面嘅兩種正則表達式，\nBRE 比較基礎，需要對某啲元字符轉義，ERE 係 BRE 嘅擴展，提供咗更多嘅元字符同功能。\nPCRE 係一種功能更強大、語法更靈活嘅正則表達式類型，\n廣泛用於現代編程語言如：Python、Ruby、Javascript。\u003c/p\u003e","tags":[],"title":"正則表達式"},{"content":"Stream Editor 流式文本處理器，作者係 Lee E. McMahon。\n基本語法 sed [OPTIONS] \u0026#39;command\u0026#39; file\rOPTIONS：命令選項。 command：打印、替換、刪除等。 file：處理嘅文件，如果省略，讀取 STDIN。 省略 file 為交互模式，輸入一行執行一次。\n運行過程 讀入一行數據： 有匹配規則： 匹配成功：執行相關操作。 匹配失敗：原樣打印數據。 無匹配規則：執行相關操作。 命令引號 單引號：可減少轉義字符嘅影響，優先使用。 雙引號：可使用變量參數，需處理特殊字符。 常用例子 替換第一處 把第一處出現嘅 a 替換成 b。\necho \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/\u0026#39;\rbba\r替換第 N 處 把第 N 處出現嘅 a 替換成 b。\necho \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/2\u0026#39;\rabb\r替換所有處 echo \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/g\u0026#39;\rbbb\r執行多條命令 可以用 ; 分隔，也可以使用 -e 選項。\necho \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/; s/a/c/\u0026#39;\recho \u0026#39;aba\u0026#39; | sed -e \u0026#39;s/a/b/\u0026#39; -e \u0026#39;s/a/c/\u0026#39;\rbbc\r使用命令文件 cmd.sed 文件內容如下。\ns/a/b/ s/a/c/\recho \u0026#39;aba\u0026#39; | sed -f cmd.sed\rbbc\r只打印替換行 -n 表示抑制輸出，p 表示只輸出匹配行。\necho \u0026#39; aa bb cc dd \u0026#39; | sed -n \u0026#39;s/aa/bb/p\u0026#39;\rbb bb\r替換結果寫文件 echo \u0026#39; aa bb cc dd \u0026#39; | sed \u0026#39;s/aa/bb/w out.txt\u0026#39;\rcat out.txt\rbb bb\r修改命令分隔符 可以使用其他符號替換命令分隔符 /。\necho \u0026#39;/bin/sh\u0026#39; | sed \u0026#39;s#/sh#/bash#\u0026#39;\r/bin/bash\r指定行匹配 匹配第 2 行。\nsed \u0026#39;2s/aa/bb/\u0026#39;\r匹配 2-4 行。\nsed \u0026#39;2,4s/aa/bb/\u0026#39;\r匹配 2 到最後一行。\nsed \u0026#39;2,$s/aa/bb/\u0026#39;\r指定行命令組 sed \u0026#39;2{s/cc/aa/; s/dd/bb/}\u0026#39;\rsed \u0026#39;2,4{ s/cc/aa/ s/dd/bb/ }\u0026#39;\r刪除所有行 sed \u0026#39;d\u0026#39;\r刪除指定行 sed \u0026#39;1d\u0026#39;\rsed \u0026#39;2,4d\u0026#39;\rsed \u0026#39;2,$d\u0026#39;\r刪除匹配行 sed \u0026#39;/aa bb/d\u0026#39;\r前插一行 echo \u0026#34;hello\u0026#34; | sed \u0026#39;i\\New Line\u0026#39;\r後插一行 echo \u0026#34;hello\u0026#34; | sed \u0026#39;a\\New Line\u0026#39;\r指定行插入 sed \u0026#39;3i\\New Line\u0026#39;\r匹配行插入 sed \u0026#39;/cc/i\\New Line\u0026#39;\r插入多行 必須使用 \\。\nsed \u0026#39;2i\\ New Line 1\\ New Line 2 \u0026#39;\r修改行 sed \u0026#39;2c\\ Change Line 1\\ Change Line 2 \u0026#39;\rsed \u0026#39;/aa/c\\ Change Line 1 \u0026#39;\r單字符替換 echo \u0026#39;aabbcc\u0026#39; | sed \u0026#39;y/ac/ca/\u0026#39;\rccbbaa\r打印特定行 sed -n \u0026#39;2,5p\u0026#39;\r打印替換前後 sed -n \u0026#39;/aa/{p; s/aa/cc/p}\u0026#39;\r打印行號 sed -n \u0026#39;/bb/{=; p}\u0026#39;\r從文件讀取 創建 foo 同 bar 文件。\necho -e \u0026#39;aa\\nbb\u0026#39; \u0026gt; foo echo -e \u0026#39;11\\n22\u0026#39; \u0026gt; bar\r讀取 foo 文件，並插入到 bar 嘅第一行之後。\nsed \u0026#39;1r foo\u0026#39; bar\r11 aa bb 22\r匹配字符串再插入。\nsed \u0026#39;/22/r foo\u0026#39; bar\r11 22 aa bb\r匹配字符串插入，使用 d 刪除匹配行。\nsed \u0026#39;/22/{ r foo d }\u0026#39; bar\r11 aa bb\r下面會報語法錯誤。\n# 會報錯 sed \u0026#39;/22/{r foo; d}\u0026#39; bar\r硬係要一行也唔係唔得。\nsed \u0026#39;/22/r foo\u0026#39; bar | sed \u0026#39;/22/d\u0026#39;\r","date":"2024-09-04","id":55,"permalink":"/zh-hk/linux/text/sed/","summary":"\u003ch2 id=\"stream-editor\"\u003eStream Editor\u003c/h2\u003e\n\u003cp\u003e流式文本處理器，作者係 \u003cstrong\u003eLee E. McMahon\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"基本語法\"\u003e基本語法\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esed \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTIONS\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;command\u0026#39;\u003c/span\u003e file\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOPTIONS\u003c/code\u003e：命令選項。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecommand\u003c/code\u003e：打印、替換、刪除等。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efile\u003c/code\u003e：處理嘅文件，如果省略，讀取 STDIN。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e省略 \u003ccode\u003efile\u003c/code\u003e 為交互模式，輸入一行執行一次。\u003c/p\u003e\n\u003ch3 id=\"運行過程\"\u003e運行過程\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e讀入一行數據：\n\u003cul\u003e\n\u003cli\u003e有匹配規則：\n\u003cul\u003e\n\u003cli\u003e匹配成功：執行相關操作。\u003c/li\u003e\n\u003cli\u003e匹配失敗：原樣打印數據。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e無匹配規則：執行相關操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"命令引號\"\u003e命令引號\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e單引號：可減少轉義字符嘅影響，\u003cstrong\u003e優先使用\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e雙引號：可使用變量參數，需處理特殊字符。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"常用例子\"\u003e常用例子\u003c/h2\u003e\n\u003ch3 id=\"替換第一處\"\u003e替換第一處\u003c/h3\u003e\n\u003cp\u003e把第一處出現嘅 a 替換成 b。\u003c/p\u003e","tags":[],"title":"SED 命令"},{"content":"GNU AWK gawk 係 GNU 版本嘅文本處理工具。 喺大部分 GNU/Linux 發行版入面，gawk 係預設嘅 awk 實現，所以喺日常使用中通常冇乜分別。\nreadlink -f /usr/bin/awk\r/usr/bin/gawk\rgawk 命令默認使用 ERE 模式。\n基本語法 gawk [OPTIONS] program file\rOPTIONS：命令選項。 program：呢個命令入面仲有個程序。 file：處理嘅文件，如果省略，讀取 STDIN。 省略 file 係交互模式，輸入一行執行一次。\n運行過程 讀入一行數據： 有匹配規則： 匹配成功：執行相關操作。 匹配失敗：唔執行操作。 無匹配規則：執行相關操作。 基礎用法 創建 foo 文件。\necho -e \u0026#39;aa 11\\nbb 22\u0026#39; \u0026gt; foo\r對於每行數據，gawk 默認使用空格/制表符分隔欄位。\n$N：表示第 N 個欄位。 $0：表示整行數據。 gawk \u0026#39;{print $1}\u0026#39; foo\raa bb\rBEGIN/END 結構 BEGIN：初始化，解釋之前執行。 BODY：對每個記錄執行一次。 END：結束處理。 留意使用引號 'EOF' 創建文件，咁樣就唔會處理特殊字符 $。\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; foo.gawk BEGIN { FS=\u0026#34;:\u0026#34; print \u0026#34;User\\tShell\u0026#34; print \u0026#34;-------\\t-------\u0026#34; } { print $1 \u0026#34;\\t\u0026#34; $6 } END { print \u0026#34;-------\\t-------\u0026#34; } EOF\rhead -n 3 /etc/passwd | gawk -f foo.gawk\rUser Shell ------- ------- root /root daemon /usr/sbin bin /bin ------- -------\r常用選項 指定分隔符 -F 選項可以修改行嘅分隔符。\ngawk -F: \u0026#39;{print $1}\u0026#39; /etc/passwd | head -n 1\r指定檔案 -f 選項可以指定檔案。\necho \u0026#39;{print $1 \u0026#34;-dir:\u0026#34; $6}\u0026#39; \u0026gt; foo.gawk\rgawk -F: -f foo.gawk /etc/passwd | head -n 1\rroot-dir:/root\r變量參數賦值 -v 選項可以喺 BEGIN 之前畀變量賦值。\ngawk -v n=2 \u0026#39;BEGIN{print 2*n}\u0026#39;\r4\r如果唔需要喺 BEGIN 中使用，可以唔使用 -v 參數。\necho \u0026#39;a b c\u0026#39; | gawk \u0026#39;{print $n}\u0026#39; n=2\rb\r內置變量 變量 $N $N 仲可以賦值，字符串嘅雙引號唔可以省略。\necho \u0026#39;hey man\u0026#39; | gawk \u0026#39;{$2=\u0026#34;bro\u0026#34;; print $0}\u0026#39;\rhey bro\r變量 FS Field Separator，字段分隔符。\ngawk \u0026#39;BEGIN{FS=\u0026#34;:\u0026#34;} {print $1}\u0026#39; /etc/passwd | head -n 1\r變量 NF Number of Fields，表示記錄中嘅字段數量。\ngawk -F: \u0026#39;$1==\u0026#34;root\u0026#34;{print $1\u0026#34;:\u0026#34;$NF}\u0026#39; /etc/passwd\rroot:/bin/bash\r變量 NR Number of Records，表示而家處理緊嘅記錄編號，默認值係 1，處理完一行之後會加 1。 可以用嚟跳過文本嘅第一行，第一行嘅 NR 值係 1。\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo name score foo 90 bar 80 EOF\rgawk \u0026#39;{if (NR\u0026gt;1) {if ($2\u0026gt;85) {print $1,$2}}}\u0026#39; foo\rfoo 90\r變量 RS 記錄分隔符，輸入記錄分隔符，默認值係 \\n，表示以換行符分隔每條記錄。 將 RS 設置為 \u0026quot;\u0026quot; 表示以空行作為記錄分隔符，對於下面嘅文本，會分為上下 2 個記錄。\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo apple sweet red banana sweet yellow EOF\r設置 FS=\u0026quot;\\n\u0026quot;，噉就可以透過 $N 獲取每行記錄。RS 同 FS 通常結合使用。\ngawk \u0026#39;BEGIN{RS=\u0026#34;\u0026#34;; FS=\u0026#34;\\n\u0026#34;} {print $1\u0026#34;\\t\u0026#34;$3}\u0026#39; foo\rapple red banana yellow\r變量 OFS Output Field Separator，輸出欄位分隔符。\necho \u0026#39;aa,bb\u0026#39; | gawk \u0026#39;BEGIN{FS=\u0026#34;,\u0026#34;; OFS=\u0026#34;-\u0026#34;} {print $1,$2}\u0026#39;\raa-bb\r變量 FIELDWIDTHS 指定字符寬度進行分隔。\necho \u0026#39;abbc\u0026#39; | gawk \u0026#39;BEGIN{FIELDWIDTHS=\u0026#34;1 2 1\u0026#34;} {print $1,$2,$3}\u0026#39;\ra bb c\r條件同結構 條件表達式 ==、\u0026lt;，\u0026lt;=，\u0026gt;，\u0026gt;=。\ngawk -F: \u0026#39;$7==\u0026#34;/bin/bash\u0026#34;{print $1}\u0026#39; /etc/passwd\r輸出所有以 bash 啟動嘅用戶。\n條件語句 if 裏面單條語句可以唔加 {}。\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{if ($1\u0026gt;15) print $1}\u0026#39;\rif 裡面多條語句要加 {}。\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{if ($1\u0026gt;15) {x=2*$i; print x}}\u0026#39;\r單行嘅 else 語句，前面嘅語句要加 ; 號。\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{if ($1\u0026gt;15) print $1; else print \u0026#34;no\u0026#34;}\u0026#39;\r多行唔需要加分號。\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{ if ($i\u0026gt;15) { x=2*$i print x } else { print \u0026#34;no\u0026#34; } }\u0026#39;\rFOR 語句 對每一行嘅字段求和，+= 同 ++ 都支持。\necho \u0026#39;1 2 3\u0026#39; | gawk \u0026#39;{ total=0 for (i=1; i\u0026lt;=NF; i++) { total += $i } print total }\u0026#39;\rWHILE 語句 對每一行嘅字段求和。\necho \u0026#39;1 2 3\u0026#39; | gawk \u0026#39;{ i=1 total=0 while (i\u0026lt;=NF) { total += $i i++ } print total }\u0026#39;\rDO-WHILE 語句 對每一行嘅字段求和\necho \u0026#39;1 2 3\u0026#39; | gawk \u0026#39;{ i=1 total=0 do { total += $i i++ } while(i\u0026lt;=NF) print total }\u0026#39;\r函數相關 內建函數 int(x)：攞 x 嘅整數部分。 exp(x)：x 嘅指數。 sqrt(x)：x 嘅平方根。 rand()：比 0 大但小於 1 嘅隨機數。 length(x)：x 嘅字符串長度。 tolower(x)：將 x 轉做小寫。 toupper(x)：將 x 轉做大寫。 仲有好多，例如 gensub，gsub。\n自定義函數 自定義函數必須出現喺 BEGIN 塊之前。\ngawk \u0026#39; function random(ts, num) { srand(ts) return int(num * rand()) } BEGIN { ts=systime() print ts print random(ts, 10) }\u0026#39;\r可以使用函數庫文件，再引用。\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; funclib.gawk function random(ts, num) { srand(ts) return int(num * rand()) } EOF\rgawk 程序檔案如下。\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; test.gawk BEGIN { ts=systime() print ts print random(ts, 10) } EOF\r使用 -f 選項引用兩個文件。\ngawk -f funclib.gawk -f test.gawk\r引用函數庫就唔可以用內聯程序模式，都需要引用。\n其他例子 自定義變量 支持數學運算同浮點數，呢個唔比 bash 強 🤪。\ngawk \u0026#39;BEGIN{a=2; a=a*2/3; print a}\u0026#39;\r1.33333\r數組操作 特點：關聯數組，好似字典，無序。\ngawk \u0026#39;BEGIN{arr[\u0026#34;name\u0026#34;]=\u0026#34;foo\u0026#34;; print arr[\u0026#34;name\u0026#34;]}\u0026#39;\r可以用數字下標，其實都係字典。\ngawk \u0026#39;BEGIN{arr[3]=\u0026#34;foo\u0026#34;; print arr[3]}\u0026#39;\r遍歷陣列，刪除元素。\ngawk \u0026#39;BEGIN{ arr[\u0026#34;a\u0026#34;]=1 arr[2]=2 arr[\u0026#34;c\u0026#34;]=\u0026#34;cat\u0026#34; delete arr[2] for (k in arr) { print \u0026#34;key:\u0026#34;,k,\u0026#34; val:\u0026#34;, arr[k] } } \u0026#39;\rkey: a val: 1 key: c val: cat\r格式化打印 處理浮點數。\ngawk \u0026#39;BEGIN{printf \u0026#34;%.2f\\n\u0026#34;, 2/3}\u0026#39;\r0.67\r指定闊度。\necho -e \u0026#39;foo\\nfoobar\u0026#39; | gawk \u0026#39;{printf \u0026#34;%8s\\n\u0026#34;, $1}\u0026#39;\r左靠齊。\necho -e \u0026#39;foo\\nfoobar\u0026#39; | gawk \u0026#39;{printf \u0026#34;%-8s\\n\u0026#34;, $1}\u0026#39;\r","date":"2024-09-05","id":56,"permalink":"/zh-hk/linux/text/gawk-1/","summary":"\u003ch2 id=\"gnu-awk\"\u003eGNU AWK\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egawk\u003c/code\u003e 係 GNU 版本嘅文本處理工具。\n喺大部分 GNU/Linux 發行版入面，\u003ccode\u003egawk\u003c/code\u003e 係預設嘅 \u003ccode\u003eawk\u003c/code\u003e 實現，所以喺日常使用中通常冇乜分別。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ereadlink -f /usr/bin/awk\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/usr/bin/gawk\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003ccode\u003egawk\u003c/code\u003e 命令默認使用 ERE 模式。\u003c/p\u003e","tags":[],"title":"GAWK 指令 - 1"},{"content":"正則匹配 gawk 默認使用 ERE 模式。\n基礎用法 首先創建 foo 文本文件。\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo a1,a2,a3 b1,b2,b3 EOF\rgawk -F, \u0026#39;/1,a/{ print $1 }\u0026#39; foo\ra1\r呢度係用整行去匹配嘅，等價於 $0。\n指定字段匹配 $2 ~ 指定咗使用第 2 個字段匹配。\ngawk \u0026#39;BEGIN{ FS=\u0026#34;,\u0026#34; } $2 ~ /^[ab]2/{ print $2 }\u0026#39; foo\ra2 b2\rsub Substitution，替換第一個匹配嘅字符串。\n基本語法 sub(regex, replacement [, target])\rregex：匹配嘅正則表達式。 replacement：替換匹配嘅字符串。 target：可選，目標字符串，默認 $0。 唔提供 target，默認係整行匹配。\n基礎用法 echo \u0026#34;aa bb aa\u0026#34; | gawk \u0026#39;{ sub(/aa/, \u0026#34;cc\u0026#34;); print }\u0026#39;\rcc bb aa\r指定替換第 3 列。\necho \u0026#34;aa bb aa\u0026#34; | gawk \u0026#39;{ sub(/aa/, \u0026#34;cc\u0026#34;, $3); print }\u0026#39;\raa bb cc\r特殊符號 \u0026amp; echo \u0026#34;app cat\u0026#34; | gawk \u0026#39;{ sub(/\\w+/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\r[app] cat\rgsub Global Substitution，全局替換。\n基本語法 gsub(regex, replacement [, target])\rregex：匹配嘅正則表達式。 replacement：替換匹配嘅字符串。 target：可選，目標字符串，默認 $0。 唔提供 target，默認係整行匹配。\n基礎用法 echo \u0026#39;aa bb aa\u0026#39; | gawk \u0026#39;{ gsub(\u0026#34;aa\u0026#34;, \u0026#34;cc\u0026#34;); print }\u0026#39;\rcc bb cc\r指定替換第 3 列。\necho \u0026#39;aa bb aa\u0026#39; | gawk \u0026#39;{ gsub(\u0026#34;aa\u0026#34;, \u0026#34;cc\u0026#34;, $3); print }\u0026#39;\raa bb cc\r特殊符號 \u0026amp; echo \u0026#34;app cat\u0026#34; | gawk \u0026#39;{ gsub(/\\w+/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\r[app] [cat]\r匹配單詞首字符 \\\u0026lt; 表示單詞嘅開頭。\necho \u0026#39;app cat\u0026#39; | gawk \u0026#39;{ gsub(/\\\u0026lt;[a-z]/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\r[a]pp [c]at\r匹配單詞尾字符 \\\u0026gt; 表示單詞嘅結尾。\necho \u0026#39;app cat\u0026#39; | gawk \u0026#39;{ gsub(/[a-z]\\\u0026gt;/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\rap[p] ca[t]\rgensub General Substitution，通用替換。\n比 sub 同 gsub 強大。 支持捕獲組（Capture Groups）。 可選擇替換特定匹配項。 唔原地修改，返回替換後嘅字符串。 sub 同 gsub 唔支持捕獲組。 基本語法 gensub(regex, replacement, how [, target])\rregex：匹配嘅正則表達式。 replacement：替換字符串，可用捕獲組。 how：可指定全局或第 N 次匹配替換。 target：可選，目標字符串，默認 $0。 基礎用法 使用 g 全局替換。\necho \u0026#34;aa aa aa\u0026#34; | gawk \u0026#39;{ print gensub(/aa/, \u0026#34;bb\u0026#34;, \u0026#34;g\u0026#34;) }\u0026#39;\rbb bb bb\r替換第 2 個匹配項。\necho \u0026#34;aa aa aa\u0026#34; | gawk \u0026#39;{ print gensub(/aa/, \u0026#34;bb\u0026#34;, \u0026#34;2\u0026#34;) }\u0026#39;\raa bb aa\r使用捕獲組 \\1 表示第一個匹配參數。\necho \u0026#34;aa-bb\u0026#34; | gawk \u0026#39;{ print gensub(/(\\w+)-(\\w+)/, \u0026#34;\\\\2:\\\\1\u0026#34;, \u0026#34;g\u0026#34;)}\u0026#39;\rbb:aa\r","date":"2024-09-05","id":57,"permalink":"/zh-hk/linux/text/gawk-2/","summary":"\u003ch2 id=\"正則匹配\"\u003e正則匹配\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egawk\u003c/code\u003e 默認使用 ERE 模式。\u003c/p\u003e\n\u003ch3 id=\"基礎用法\"\u003e基礎用法\u003c/h3\u003e\n\u003cp\u003e首先創建 \u003ccode\u003efoo\u003c/code\u003e 文本文件。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF \u0026gt; foo\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003ea1,a2,a3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eb1,b2,b3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egawk -F, \u003cspan class=\"s1\"\u003e\u0026#39;/1,a/{ print $1 }\u0026#39;\u003c/span\u003e foo\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ea1\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e呢度係用\u003cstrong\u003e整行\u003c/strong\u003e去匹配嘅，等價於 \u003ccode\u003e$0\u003c/code\u003e。\u003c/p\u003e","tags":[],"title":"GAWK 命令 - 2"},{"content":"hassle-free 冇麻煩嘅，省心嘅。\nGo compiles to a single, static binary with minimal runtime dependencies, making deployment straightforward and hassle-free. syntactic sugar 語法糖。obscure =\u0026gt; 模糊/掩蓋。\nRuby’s principle of “programmer happiness” sometimes results in syntactic sugar that may feel elegant to some but can obscure the inner workings of the code.\rheader section 頭部資訊。\nThe header section of the top command provides a snapshot of the overall system performance.\rreclaim 回收。\nThe available memory (avail Mem) includes both free RAM and memory that can be reclaimed from buffers and cache.\rparentheses 括弧 ()。\nSubshells are usually created using parentheses (), command substitution $(...), or background execution.\rinvoke 喚起、調用、執行。下面係 Bash 環境變量相關嘅解釋。\nWhen a program is invoked it is given an array of strings called the environment.\rexpands to 展開為，發展為，代表。呢個翻譯怪怪嘅。\n($$) Expands to the process ID of the shell. In a subshell, it expands to the process ID of the invoking shell, not the subshell.\rskeletal 骨骼嘅，類似於腳手架。\nThe SKEL variable specifies the directory containing \u0026#34;skeletal\u0026#34; user files; in other words, files such as a sample .profile that will be copied to the new user\u0026#39;s home directory when it is created.\rhyphen 連字符。\n- (Hyphen): Represents a regular file. This is the most common file type, typically used for text files, binary files, or other standard files.\r","date":"2024-08-29","id":58,"permalink":"/zh-hk/linux/appendix/term-1/","summary":"\u003ch2 id=\"hassle-free\"\u003ehassle-free\u003c/h2\u003e\n\u003cp\u003e冇麻煩嘅，省心嘅。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\" text-wrap=\"wrap\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eGo compiles to a single, static binary with minimal runtime dependencies, making deployment straightforward and hassle-free. \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"syntactic-sugar\"\u003esyntactic sugar\u003c/h2\u003e\n\u003cp\u003e語法糖。\u003ccode\u003eobscure\u003c/code\u003e =\u0026gt; 模糊/掩蓋。\u003c/p\u003e","tags":[],"title":"專業術語 - 1"},{"content":"","date":"2024-10-03","id":59,"permalink":"/zh-hk/tech/fourd-pocket/","summary":"","tags":[],"title":"四次元百寶袋"},{"content":"","date":"2024-10-03","id":60,"permalink":"/zh-hk/tech/","summary":"","tags":[],"title":"技術"},{"content":"","date":"2024-10-01","id":61,"permalink":"/zh-hk/","summary":"","tags":[],"title":"MINI-ROCKS"},{"content":"","date":"2024-09-30","id":62,"permalink":"/zh-hk/toys/","summary":"","tags":[],"title":"玩具"},{"content":"","date":"2024-09-08","id":63,"permalink":"/zh-hk/tech/cursor/","summary":"","tags":[],"title":"Cursor"},{"content":"","date":"2024-09-05","id":64,"permalink":"/zh-hk/linux/","summary":"","tags":[],"title":"Linux"},{"content":"","date":"2024-09-05","id":65,"permalink":"/zh-hk/linux/text/","summary":"","tags":[],"title":"文本處理"},{"content":"","date":"2024-09-02","id":66,"permalink":"/zh-hk/linux/script/","summary":"","tags":[],"title":"腳本"},{"content":"","date":"2024-09-01","id":67,"permalink":"/zh-hk/linux/proc/","summary":"","tags":[],"title":"进程"},{"content":"","date":"2024-08-29","id":68,"permalink":"/zh-hk/linux/appendix/","summary":"","tags":[],"title":"附錄"},{"content":"","date":"2024-08-29","id":69,"permalink":"/zh-hk/linux/perm/","summary":"","tags":[],"title":"權限管理"},{"content":"","date":"2024-08-27","id":70,"permalink":"/zh-hk/linux/shell/","summary":"","tags":[],"title":"Shell"},{"content":"","date":"2024-08-27","id":71,"permalink":"/zh-hk/linux/env/","summary":"","tags":[],"title":"環境變量"},{"content":"","date":"2024-08-24","id":72,"permalink":"/zh-hk/linux/cmd/","summary":"","tags":[],"title":"指令"},{"content":"","date":"2024-07-24","id":73,"permalink":"/zh-hk/tech/dev-env/","summary":"","tags":[],"title":"開發環境"},{"content":"","date":"0001-01-01","id":74,"permalink":"/zh-hk/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":75,"permalink":"/zh-hk/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":76,"permalink":"/zh-hk/tags/","summary":"","tags":[],"title":"Tags"},{"content":" KEY VALUE 大學 華南農業大學 專業 軟件工程 喜歡 開源 工作經歷 115網盤/酷狗/BIGO/趣丸 編程語言 Golang/Python/PHP 最近 Cursor 聯繫我 小紅書: @kugarocks GitHub: @kugarocks ","date":"0001-01-01","id":77,"permalink":"/zh-hk/about/","summary":"\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eKEY\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eVALUE\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e大學\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e華南農業大學\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e專業\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e軟件工程\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e喜歡\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e開源\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e工作經歷\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e115網盤/酷狗/BIGO/趣丸\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e編程語言\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGolang/Python/PHP\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e最近\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCursor\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"聯繫我\"\u003e聯繫我\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e小紅書: \u003ca href=\"https://www.xiaohongshu.com/user/profile/65683d68000000001c01b1e5\"\u003e@kugarocks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGitHub: \u003ca href=\"https://github.com/kugarocks\"\u003e@kugarocks\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","tags":[],"title":"關於我"}]