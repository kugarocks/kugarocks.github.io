import{_ as a,c as i,o as e,ah as h}from"./chunks/framework.HzbgFGQH.js";const g=JSON.parse('{"title":"Shebang","description":"","frontmatter":{},"headers":[],"relativePath":"zh/linux/getting-started/env/shebang.md","filePath":"zh/linux/getting-started/env/shebang.md","lastUpdated":1746727564000}'),t={name:"zh/linux/getting-started/env/shebang.md"};function n(l,s,d,p,r,k){return e(),i("div",null,s[0]||(s[0]=[h(`<h1 id="shebang" tabindex="-1">Shebang <a class="header-anchor" href="#shebang" aria-label="Permalink to “Shebang”">​</a></h1><p>Shebang 是 Unix 和类 Unix 操作系统中的一个特殊符号，由字符 <code>#!</code> 组成， 用于指示脚本文件应该由哪个解释器来执行。它通常出现在脚本文件的第一行，后面跟着解释器的路径。 Shebang 使得脚本文件能够像可执行程序一样直接运行，而不必手动调用解释器。</p><h2 id="名称由来" tabindex="-1">名称由来 <a class="header-anchor" href="#名称由来" aria-label="Permalink to “名称由来”">​</a></h2><p><code>#</code> 在英语中表示 hash 或 sharp，<code>!</code> 在编程和命令行中表示 bang， 这两个符号组合在一起就成了 hash-bang 或 sharp-bang。 随着时间的推移，hash-bang 最终简化为 shebang。</p><h2 id="指定解释器" tabindex="-1">指定解释器 <a class="header-anchor" href="#指定解释器" aria-label="Permalink to “指定解释器”">​</a></h2><p>Shebang 后面指定的路径是解释器的位置，例如：</p><div class="language-bash"><button title="复制代码" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span></code></pre></div><p>系统会使用该路径下的 bash 来执行这个脚本内容。</p><h2 id="统一执行形式" tabindex="-1">统一执行形式 <a class="header-anchor" href="#统一执行形式" aria-label="Permalink to “统一执行形式”">​</a></h2><p>不同类型的脚本可以统一使用 <code>./file</code> 的形式执行，无需显式调用解释器。</p><div class="language-bash"><button title="复制代码" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span></code></pre></div><p>无需使用 <code>bash file</code> 执行，直接使用 <code>./file</code>。</p><div class="language-bash"><button title="复制代码" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/python3</span></span></code></pre></div><p>无需使用 <code>python file</code> 执行，直接使用 <code>./file</code>。</p><h2 id="常见例子" tabindex="-1">常见例子 <a class="header-anchor" href="#常见例子" aria-label="Permalink to “常见例子”">​</a></h2><p>我们在 bash 脚本中常常会看到下面的例子。</p><div class="language-bash"><button title="复制代码" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env bash</span></span></code></pre></div><p><code>env</code> 是一个与环境变量相关的命令。 当后面跟的参数是 <code>bash</code> 时，它会根据环境变量 <code>PATH</code> 提供的路径查找 bash 的解释器。 这样做的好处是无须写死 bash 解释器的路径，因为在不同的系统中，bash 解释器可能会在不同的位置。</p><div class="language-bash"><button title="复制代码" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><div class="language-bash"><button title="复制代码" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><p>对于上面的 python 例子，更好的 Shebang 是使用 env。</p><div class="language-bash"><button title="复制代码" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env python</span></span></code></pre></div><h2 id="手动调用" tabindex="-1">手动调用 <a class="header-anchor" href="#手动调用" aria-label="Permalink to “手动调用”">​</a></h2><p>如果没有 Shebang，可以手动调用解释器。</p><div class="language-bash"><button title="复制代码" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script.sh</span></span></code></pre></div>`,25)]))}const c=a(t,[["render",n]]);export{g as __pageData,c as default};
