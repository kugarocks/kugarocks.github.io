import{_ as l,c as a,o as h,ah as t}from"./chunks/framework.HzbgFGQH.js";const b=JSON.parse('{"title":"Shell 简介","description":"","frontmatter":{},"headers":[],"relativePath":"zh/linux/getting-started/shell/intro.md","filePath":"zh/linux/getting-started/shell/intro.md","lastUpdated":1746813098000}'),r={name:"zh/linux/getting-started/shell/intro.md"};function o(s,e,i,d,n,c){return h(),a("div",null,e[0]||(e[0]=[t('<h1 id="shell-简介" tabindex="-1">Shell 简介 <a class="header-anchor" href="#shell-简介" aria-label="Permalink to “Shell 简介”">​</a></h1><p>Shell 是一个命令行解释器，可以让你和操作系统交互，是真正执行命令的程序。</p><h2 id="gnu-bash-manual" tabindex="-1">GNU Bash Manual <a class="header-anchor" href="#gnu-bash-manual" aria-label="Permalink to “GNU Bash Manual”">​</a></h2><p>Bash 是 Linux 中的默认 Shell，<strong>官方手册是永远的神</strong>。</p><div class="info custom-block"><p class="custom-block-title">Bash Reference Manual</p><p><a href="https://www.gnu.org/software/bash/manual/bash.html" target="_blank" rel="noreferrer">https://www.gnu.org/software/bash/manual/bash.html</a></p></div><h2 id="shell-的定义" tabindex="-1">Shell 的定义 <a class="header-anchor" href="#shell-的定义" aria-label="Permalink to “Shell 的定义”">​</a></h2><p>在 Linux 中，Shell 是一个<strong>命令解释器（软件程序）</strong>，负责接收用户输入的命令并将其传递给操作系统内核执行。 Shell 提供了一种用户与操作系统交互的接口，是操作系统的最外层。 另外它还支持编程，包括变量、循环、条件判断等，这也是我们常常所说的 Shell 脚本。 常见的 Shell 按时间排序有以下几种：</p><table tabindex="0"><thead><tr><th>Shell</th><th>描述</th></tr></thead><tbody><tr><td><strong>Sh</strong></td><td>Bourne Shell，最早期的 Shell，作者是 Stephen Bourne。</td></tr><tr><td><strong>Bash</strong></td><td>Bourne Again Shell，Linux 最常用的 Shell，由 GNU 开发。</td></tr><tr><td><strong>Dash</strong></td><td>Debian Almquist Shell，常见于 Ubuntu。</td></tr><tr><td><strong>Zsh</strong></td><td>Z Shell，功能更强大，macOS 默认 Shell。</td></tr></tbody></table><h2 id="与终端的关系" tabindex="-1">与终端的关系 <a class="header-anchor" href="#与终端的关系" aria-label="Permalink to “与终端的关系”">​</a></h2><p>我们现在所说的终端一般是指终端模拟器，常见的有 GNOME Terminal、iTerm2 等等。 终端提供了一个界面，用户可以通过该界面与 Shell 进行交互。 终端不执行任何命令，它只是负责接收输入并显示输出。 Shell 是在终端中运行的进程，负责实际的命令解释和执行工作。 不要混淆终端和 Shell 的概念，例如下面的对话内容是不准确的。</p><blockquote><p>A：你平时用什么 Shell</p><p>B：我用 iTerm2</p><p>A：打开 Shell，然后输入...</p></blockquote><p>iTerm2 不是 Shell，是终端，另外 Shell 是不需要打开的，终端打开的时候就会默认启动。</p><h2 id="不同-shell-的区别" tabindex="-1">不同 Shell 的区别 <a class="header-anchor" href="#不同-shell-的区别" aria-label="Permalink to “不同 Shell 的区别”">​</a></h2><h3 id="历史和起源" tabindex="-1">历史和起源 <a class="header-anchor" href="#历史和起源" aria-label="Permalink to “历史和起源”">​</a></h3><ul><li><code>sh</code> 是 Unix 系统的原始 Shell，提供基本功能。</li><li><code>bash</code> 是 <code>sh</code> 的增强版，功能更加丰富，是 Linux 上的主流 Shell。</li><li><code>zsh</code> 是一种功能更强大且可高度定制的 Shell，结合了多个 Shell 的优势。</li></ul><h3 id="功能性" tabindex="-1">功能性 <a class="header-anchor" href="#功能性" aria-label="Permalink to “功能性”">​</a></h3><ul><li><code>sh</code> 提供基础的命令和脚本执行功能，主要用于简单脚本和系统任务。</li><li><code>bash</code> 增加了交互式功能（如命令历史、补全），适合日常使用和复杂的脚本编写。</li><li><code>zsh</code> 拥有最丰富的功能，特别是在自动补全、命令行提示、语法高亮等方面。</li></ul><h3 id="交互体验" tabindex="-1">交互体验 <a class="header-anchor" href="#交互体验" aria-label="Permalink to “交互体验”">​</a></h3><ul><li><code>sh</code> 的交互体验较为基础，没有现代化的功能。</li><li><code>bash</code> 提供了丰富的命令行交互体验，支持命令补全、历史等。</li><li><code>zsh</code> 在交互体验上更进一步，支持更高级的补全、自动建议和错误更正。</li></ul><h3 id="定制化" tabindex="-1">定制化 <a class="header-anchor" href="#定制化" aria-label="Permalink to “定制化”">​</a></h3><ul><li><code>sh</code> 几乎没有定制化选项。</li><li><code>bash</code> 支持一些定制化，但相比 <code>zsh</code> 仍然有限。</li><li><code>zsh</code> 可以通过框架（如 Oh My Zsh）轻松定制，支持插件、主题等。</li></ul>',21)]))}const S=l(r,[["render",o]]);export{b as __pageData,S as default};
