[{"content":"KEYBOARD CAT ROCKS Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! ","date":"2024-09-30","id":0,"permalink":"/en/toys/readme/","summary":"\u003ch2 id=\"keyboard-cat-rocks\"\u003eKEYBOARD CAT ROCKS\u003c/h2\u003e\n\u003cvideo controls preload=\"auto\" width=\"100%\"  playsinline class=\"html-video\"\u003e\n      \u003csource src=\"/videos/misc/keyboard-cat-original.mp4\" type=\"video/mp4\"\u003e\n    \u003cspan\u003eYour browser doesn't support embedded videos, but don't worry, you can \u003ca href=\"/videos/misc/keyboard-cat-original.mp4\"\u003edownload it\u003c/a\u003e and watch it with your favorite video player!\u003c/span\u003e\n  \u003c/video\u003e","tags":[],"title":"README"},{"content":"WHAT DO U GOT ","date":"2024-08-24","id":1,"permalink":"/en/linux/readme/","summary":"\u003ch2 id=\"what-do-u-got\"\u003eWHAT DO U GOT\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/win-mac-linux_hu10690778400494544015.webp\"\r\n  width=\"799\"\r\n  height=\"489\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"win-mac-linux\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e","tags":[],"title":"README"},{"content":"\r","date":"2024-07-21","id":2,"permalink":"/en/tech/readme/","summary":"\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/meme/i-can-fix-it_hu2625081424092851265.webp\"\r\n  width=\"484\"\r\n  height=\"326\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"i-can-fix-it\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e","tags":[],"title":"README"},{"content":"Introduction By chance, I found that the domain name minions.wiki was not registered, so I created a clean and simple Minions Wiki. However, the Minions inside are not yet complete, and I will continue to improve them when I have time. If you\u0026rsquo;re interested, feel free to submit a PR.\nMinions Wiki\rhttps://minions.wiki\nGithub Repository\rkugarocks/minions-wiki\nHUGO The project uses Hugo and the hugo-cards theme. When I was working on it, I found that hugo-cards does not support the Profile Sidebar, and the mobile layout is not ideal, so I modified it myself. Later, I submitted a PR, which has now been merged, This is also my first PR merged on GitHub.\nCursor The translations inside were completed using Cursor, and I must say that the Cantonese translations are quite interesting.\nDespicable Me Wiki Below is another wiki website about the Minions movies, However, it does not support Chinese, has ads, and the interface is also ugly.\nDespicable Me Wiki\rdespicableme.fandom.com\n","date":"2024-09-30","id":3,"permalink":"/en/toys/minions-wiki/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eBy chance, I found that the domain name \u003ccode\u003eminions.wiki\u003c/code\u003e was not registered, so I created a clean and simple Minions Wiki.\nHowever, the Minions inside are not yet complete, and I will continue to improve them when I have time. If you\u0026rsquo;re interested, feel free to submit a PR.\u003c/p\u003e","tags":[],"title":"Minions Wiki"},{"content":"Linux Torvalds How to pronounce this name is quite curious, searched it, and someone even made a collection, oh my god, haha.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Definition of Linux According to Wikipedia, Linux is both a Unix-like kernel and a generic term for an open-source Unix-like operating system based on the Linux kernel. The Linux kernel was first released by Linus Torvalds on September 17, 1991, and it is usually packaged into a distribution version, including the kernel and many system software and libraries provided by the GNU project.\nHistory of Linux In 1990, Linus Torvalds took a Unix course at the University of Helsinki. In 1991, he became interested in operating systems, but the license for the Minix system (Minimal Unix-like operating system) in the textbook could only be used for teaching. So he wrote his own operating system kernel, which was the first version of the Linux kernel.\nLater, Linus Torvalds released the kernel on the Internet for feedback. And so, an open-source operating system that gathered global wisdom was born, accompanied by a series of system software and libraries developed by the GNU team.\nLinux Naming Torvalds initially wanted to name the operating system Freax, which is a combination of free, freak, and x (Unix). At first, he also considered using the name Linux, but felt it was too arrogant, so he didn\u0026rsquo;t use it. His colleague Ari Lemmke, one of the FTP administrators at the time, thought Freax was not good and, without Torvalds\u0026rsquo; consent, named the project Linux. Later, Torvalds also agreed to the name Linux.\nLinux Mascot Tux Torvalds mentioned that he was bitten by a penguin at the Canberra Zoo. He thought a slightly chubby penguin sitting after eating was very suitable as the mascot for Linux. The first person to call this penguin Tux was James Hughes, who said it represented (T)orvalds (u)ni(x). Additionally, Tux is also an abbreviation for Tuxedo (tailcoat), which resembles the appearance of a penguin.\n","date":"2024-08-24","id":4,"permalink":"/en/linux/say-my-name/","summary":"\u003ch2 id=\"linux-torvalds\"\u003eLinux Torvalds\u003c/h2\u003e\n\u003cp\u003eHow to pronounce this name is quite curious, searched it, and someone even made a collection, oh my god, haha.\u003c/p\u003e","tags":[],"title":"Chapter 1: Say My Name"},{"content":"Keyboard System Preferences\nKey Repeat: Fast Delay Until Repeat: Short Modifier Keys: Caps Lock -\u0026gt; Escape defaults write -g ApplePressAndHoldEnabled -bool false\rShortcuts\nApp Shortcuts, + All Applications, Zoom, CMD+M All Applications, Minimize, CMD+H Chrome, Bookmark This Tab/Tab\u0026hellip;, CMD+L Chrome, Open Location\u0026hellip;, CMD+D Chrome, Downloads, SHIFT+CMD+D Input Sources Select the previous input source, CMD+E Spotlight Show Spotlight search: OPTION+SPACE Install Alfred iTerm2 iTerm2\rTerminal emulator for macOS.\nPreferences config\nSearch -\u0026gt; Dim inactive split panes Search -\u0026gt; Global key bindings, + Select Split Pane Above, CMD+I Select Split Pane on Left, CMD+J Select Split Pane Below, CMD+K Select Split Pane on Right, CMD+L Oh My Zsh Installation command\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34;\rCustom Alias:\n# custom aliases alias zsh=\u0026#39;vim ~/.zshrc\u0026#39; alias q=\u0026#39;exit\u0026#39; alias s=\u0026#39;sudo\u0026#39; alias v=\u0026#39;vim\u0026#39; alias g=\u0026#39;git\u0026#39; alias ga=\u0026#39;git add\u0026#39; alias gc=\u0026#39;git checkout\u0026#39; alias gs=\u0026#39;git status\u0026#39; alias gd=\u0026#39;git diff\u0026#39; alias sv=\u0026#39;sudo vim\u0026#39; alias sc=\u0026#34;source ~/.zshrc\u0026#34; alias ..=\u0026#39;cd ..\u0026#39; alias cls=\u0026#39;clear\u0026#39; alias nano=\u0026#34;vim\u0026#34; alias tailf=\u0026#34;tail -f\u0026#34; alias lf=\u0026#39;ll -p | grep -v /\u0026#39; alias ldir=\u0026#39;ls -ld -- */\u0026#39;\rHSTR HSTR\rEasily view, navigate and search your command history.\nbrew install hstr\rConfigure HSTR just by running:\nhstr --show-zsh-configuration \u0026gt;\u0026gt; ~/.zshrc\rGit Config Replace name, email, GitHub user.\n[user] name = kuga email = kuga@cestbon.mbp [alias] pr = pull --rebase br = branch -avv ci = commit co = checkout cm = checkout master mg = merge st = status l = log --color --graph --pretty=format:\u0026#39;%Cred%h%Creset -%C(bold yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --abbrev-commit accept-ours = \u0026#34;!f() { files=\\\u0026#34;$@\\\u0026#34;; [ -z $files ] \u0026amp;\u0026amp; files=\u0026#39;.\u0026#39;; git checkout --ours -- $files; git add -u $files; }; f\u0026#34; accept-theirs = \u0026#34;!f() { files=\\\u0026#34;$@\\\u0026#34;; [ -z $files ] \u0026amp;\u0026amp; files=\u0026#39;.\u0026#39;; git checkout --theirs -- $files; git add -u $files; }; f\u0026#34; diffeol = diff --ignore-space-at-eol [core] excludesfile = /Users/hairdresser/.gitignore [color] branch = auto diff = auto status = auto [GitHub] user = kuga [credential] helper = osxkeychain [pull] rebase = false\rKubernetes kubectl kubectl\rThe Kubernetes command-line tool.\nbrew install kubectl\rkubectx kubectx\rSwitch between contexts \u0026amp; namespaces.\nbrew install kubectx\rAdd the following to your .zshrc file:\n# kubectx alias kc=\u0026#34;kubectx\u0026#34; alias kn=\u0026#34;kubens\u0026#34; KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6)\rkube-ps1 kube-ps1\rKubernetes prompt for bash and zsh.\nbrew install kube-ps1\rAdd the following to your .zshrc file:\n# kube-ps1 # https://github.com/jonmosco/kube-ps1 # todo change source path source /usr/local/Cellar/kube-ps1/0.7.0/share/kube-ps1.sh PROMPT=\u0026#39;$(kube_ps1)\u0026#39;$PROMPT KUBE_PS1_PREFIX=\u0026#34;[\u0026#34; KUBE_PS1_SUFFIX=\u0026#34;]\u0026#34; KUBE_PS1_SYMBOL_ENABLE=false KUBE_PS1_CTX_COLOR=\u0026#34;83\u0026#34; KUBE_PS1_NS_COLOR=\u0026#34;201\u0026#34;\rkubectl-aliases kubectl-aliases\rConvenient shell aliases for kubectl.\nDownload .kubectl_aliases file \u0026amp; Add the following to your .zshrc file:\n# load kubectl aliases file [ -f ~/.kubectl_aliases ] \u0026amp;\u0026amp; source ~/.kubectl_aliases # Print the full command before running it function kubectl() { echo \u0026#34;+ kubectl $@\u0026#34;\u0026gt;\u0026amp;2; command kubectl $@; }\r","date":"2024-07-24","id":5,"permalink":"/en/tech/dev-env/macos/","summary":"\u003ch2 id=\"keyboard\"\u003eKeyboard\u003c/h2\u003e\n\u003cp\u003eSystem Preferences\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKey Repeat: Fast\u003c/li\u003e\n\u003cli\u003eDelay Until Repeat: Short\u003c/li\u003e\n\u003cli\u003eModifier Keys: Caps Lock -\u0026gt; Escape\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edefaults write -g ApplePressAndHoldEnabled -bool false\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eShortcuts\u003c/p\u003e","tags":[],"title":"MacOS"},{"content":"Introduction Once I wanted to send a piece of text from one computer to another, but found that such a simple requirement didn\u0026rsquo;t have a straightforward tool. I asked ChatGPT, summarized the existing tools, and found that none of them were very useful.\nMethod Disadvantages Airdrop Create a file and search for devices iMessage Log in to Apple account Universal Clipboard Log in to Apple account WeChat/QQ Log in to two accounts Email What era is this? So why not write a chat room, and you can send it directly by accessing the webpage, using Cursor to develop is also very enjoyable. The chat room also made some simple adaptations for mobile devices, and the service is deployed on the Alibaba Cloud Guangzhou node, with a very fast access speed.\nMinichat\rhttps://minichat.kugarocks.com\nGithub Repository\rkugarocks/minichat\nThemes When the service starts, you can specify the theme, and the default is Minions.\ngo run main.go -theme minions\rMinions Name Avatar Stuart, Kevin Bob, Dave Jerry, Phil Tim, Mark One Piece Name Avatar Luffy, Zoro Nami, Sanji Robin, Franky Chopper, Usopp Brook Keywords Keywords are also very simple, just define the technology stack you use, and modify it step by step according to your needs. However, the keywords below are only a small part, because the entire process also includes a lot of details and optimizations, which are not expanded here.\n* Implement a simple real-time chat room * Server-side uses Golang, Websocket * Client-side uses web pages\r* The left side of the web page displays the list of online users * Automatically generates a username when the web page is opened * The username is randomly selected from the roles of the Avengers * Cannot select duplicate usernames * The total number of usernames is 20\r* The bottom right of the web page is the message input box * The message input box supports multi-line input * The message input box can be resized by dragging\r* The chat message window supports multi-line display * The chat content is surrounded by a border * The username is placed outside the border, above\r* A copy button is added to the top right of the message border * After clicking the copy button, the text changes to \u0026#34;Copied\u0026#34; * 1 second later, it returns to the original text\r* The message input box and chat message window are separated by a line * You can drag up and down to change the size of the two windows * The style of the page is changed to a terminal style\r* The color of the username is green * Other colors use black, white, and gray\r","date":"2024-09-30","id":6,"permalink":"/en/toys/minichat/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eOnce I wanted to send a piece of text from one computer to another, but found that such a simple requirement didn\u0026rsquo;t have a straightforward tool.\nI asked ChatGPT, summarized the existing tools, and found that none of them were very useful.\u003c/p\u003e","tags":[],"title":"Minichat"},{"content":"Early Terminals Early terminals were standalone hardware devices used to connect to main computers or servers. They typically included:\nInput Device: such as a keyboard, used for inputting commands and data. Output Device: such as a display or printer, used for displaying calculation results and system feedback. Examples: early Teletype (tty) terminals, DEC VT100 terminals.\nModern Terminals Modern terminals exist more in software form, i.e., terminal emulators, running as applications in modern operating systems (such as Linux, macOS, Windows), simulating the functions of early hardware terminals.\nTerminal Emulators Terminal Description iTerm2 Advanced terminal emulator on macOS systems, offering rich features like split screens, tabs, and search. GNOME Terminal Default terminal emulator commonly found on Linux systems, powerful and easy to use. PuTTY Widely used SSH client on Windows systems, suitable for remote connections and management. Windows Terminal Modern terminal emulator on Windows systems, supporting multiple command-line environments like PowerShell, CMD, WSL. Teletype Although Teletype devices are no longer in use, their concept and functionality are still preserved in Linux.\n/dev/tty You can see its file type is c (character device), representing the terminal device connected to the current process.\nls -l /dev/tty\rcrw-rw-rw- 1 root tty 5, 0 Aug 7 22:33 /dev/tty\rIts permission is 666, major device number is 5, minor device number is 0, which is what we commonly see as standard input/output.\necho \u0026#34;Hello, World\u0026#34; \u0026gt; /dev/tty\rread -p \u0026#34;Enter your name: \u0026#34; name \u0026lt; /dev/tty echo \u0026#34;Hello, $name\u0026#34;\r/dev/pts PTS stands for Pseudo-Terminal, /dev/pts is a directory for storing pseudo-terminal device files.\nls -l /dev/pts/\rcrw------- 1 root tty 136, 0 Aug 8 09:52 0 c--------- 1 root root 5, 2 Aug 7 21:30 ptmx\rListing the files in the /dev/pts directory, you will generally see two types of files.\nptmx: Master Device, used for creating and managing pseudo-terminal pairs. 0/1/2: Slave Device, each corresponding to a number for an ssh session. Entering the tty command in the command line can show the pseudo-terminal device file currently connected.\ntty\r/dev/pts/0\rman tty\rtty - print the file name of the terminal connected to standard input\rGet Logged-in User The most common method is the w command.\nw\r11:18:19 up 15 days, 20:08, 2 users, load average: 0.00, 0.01, 0.05 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/0 120.231.138.130 10:59 3.00s 0.02s 0.00s w root pts/1 120.231.138.130 11:11 6:41 0.01s 0.01s -bash\rYou can also use the who command.\nwho\rroot pts/0 2024-08-04 10:59 (120.231.138.130) root pts/1 2024-08-04 11:11 (120.231.138.130)\rOf course, you can directly use ls as well.\nls -l /dev/pts/\rcrw------- 1 root tty 136, 0 Aug 8 2024 0 crw------- 1 root tty 136, 1 Aug 8 09:53 1 c--------- 1 root root 5, 2 Aug 7 21:30 ptmx\rSend Msg to PTS echo \u0026#34;hello, world\u0026#34; \u0026gt; /dev/pts/1\rKill a PTS ps -t /dev/pts/1\rkill -9 PID\r","date":"2024-08-24","id":7,"permalink":"/en/linux/terminal/","summary":"\u003ch2 id=\"early-terminals\"\u003eEarly Terminals\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/ibm-2260_hu8804125439870718022.webp\"\r\n  width=\"717\"\r\n  height=\"579\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"ibm-2260\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e\n\u003cp\u003eEarly terminals were standalone hardware devices used to connect to main computers or servers. They typically included:\u003c/p\u003e","tags":[],"title":"Chapter 2: Terminal"},{"content":"\r# If you come from bash you might have to change your $PATH. # export PATH=$HOME/bin:/usr/local/bin:$PATH # Path to your oh-my-zsh installation. export ZSH=\u0026#34;$HOME/.oh-my-zsh\u0026#34; # Set name of the theme to load --- if set to \u0026#34;random\u0026#34;, it will # load a random theme each time oh-my-zsh is loaded, in which case, # to know which specific one was loaded, run: echo $RANDOM_THEME # See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes ZSH_THEME=\u0026#34;robbyrussell\u0026#34; # Set list of themes to pick from when loading at random # Setting this variable when ZSH_THEME=random will cause zsh to load # a theme from this variable instead of looking in $ZSH/themes/ # If set to an empty array, this variable will have no effect. # ZSH_THEME_RANDOM_CANDIDATES=( \u0026#34;robbyrussell\u0026#34; \u0026#34;agnoster\u0026#34; ) # Uncomment the following line to use case-sensitive completion. # CASE_SENSITIVE=\u0026#34;true\u0026#34; # Uncomment the following line to use hyphen-insensitive completion. # Case-sensitive completion must be off. _ and - will be interchangeable. # HYPHEN_INSENSITIVE=\u0026#34;true\u0026#34; # Uncomment one of the following lines to change the auto-update behavior # zstyle \u0026#39;:omz:update\u0026#39; mode disabled # disable automatic updates # zstyle \u0026#39;:omz:update\u0026#39; mode auto # update automatically without asking # zstyle \u0026#39;:omz:update\u0026#39; mode reminder # just remind me to update when it\u0026#39;s time # Uncomment the following line to change how often to auto-update (in days). # zstyle \u0026#39;:omz:update\u0026#39; frequency 13 # Uncomment the following line if pasting URLs and other text is messed up. # DISABLE_MAGIC_FUNCTIONS=\u0026#34;true\u0026#34; # Uncomment the following line to disable colors in ls. # DISABLE_LS_COLORS=\u0026#34;true\u0026#34; # Uncomment the following line to disable auto-setting terminal title. # DISABLE_AUTO_TITLE=\u0026#34;true\u0026#34; # Uncomment the following line to enable command auto-correction. # ENABLE_CORRECTION=\u0026#34;true\u0026#34; # Uncomment the following line to display red dots whilst waiting for completion. # You can also set it to another string to have that shown instead of the default red dots. # e.g. COMPLETION_WAITING_DOTS=\u0026#34;%F{yellow}waiting...%f\u0026#34; # Caution: this setting can cause issues with multiline prompts in zsh \u0026lt; 5.7.1 (see #5765) # COMPLETION_WAITING_DOTS=\u0026#34;true\u0026#34; # Uncomment the following line if you want to disable marking untracked files # under VCS as dirty. This makes repository status check for large repositories # much, much faster. # DISABLE_UNTRACKED_FILES_DIRTY=\u0026#34;true\u0026#34; # Uncomment the following line if you want to change the command execution time # stamp shown in the history command output. # You can set one of the optional three formats: # \u0026#34;mm/dd/yyyy\u0026#34;|\u0026#34;dd.mm.yyyy\u0026#34;|\u0026#34;yyyy-mm-dd\u0026#34; # or set a custom format using the strftime function format specifications, # see \u0026#39;man strftime\u0026#39; for details. # HIST_STAMPS=\u0026#34;mm/dd/yyyy\u0026#34; # Would you like to use another custom folder than $ZSH/custom? # ZSH_CUSTOM=/path/to/new-custom-folder # Which plugins would you like to load? # Standard plugins can be found in $ZSH/plugins/ # Custom plugins may be added to $ZSH_CUSTOM/plugins/ # Example format: plugins=(rails git textmate ruby lighthouse) # Add wisely, as too many plugins slow down shell startup. plugins=(git) source $ZSH/oh-my-zsh.sh # User configuration # export MANPATH=\u0026#34;/usr/local/man:$MANPATH\u0026#34; # You may need to manually set your language environment # export LANG=en_US.UTF-8 # Preferred editor for local and remote sessions # if [[ -n $SSH_CONNECTION ]]; then # export EDITOR=\u0026#39;vim\u0026#39; # else # export EDITOR=\u0026#39;mvim\u0026#39; # fi # Compilation flags # export ARCHFLAGS=\u0026#34;-arch x86_64\u0026#34; # Set personal aliases, overriding those provided by oh-my-zsh libs, # plugins, and themes. Aliases can be placed here, though oh-my-zsh # users are encouraged to define aliases within the ZSH_CUSTOM folder. # For a full list of active aliases, run `alias`. # # Example aliases # alias zshconfig=\u0026#34;mate ~/.zshrc\u0026#34; # alias ohmyzsh=\u0026#34;mate ~/.oh-my-zsh\u0026#34; # custom aliases alias zsh=\u0026#39;vim ~/.zshrc\u0026#39; alias q=\u0026#39;exit\u0026#39; alias s=\u0026#39;sudo\u0026#39; alias v=\u0026#39;vim\u0026#39; alias g=\u0026#39;git\u0026#39; alias ga=\u0026#39;git add\u0026#39; alias gc=\u0026#39;git checkout\u0026#39; alias gs=\u0026#39;git status\u0026#39; alias gd=\u0026#39;git diff\u0026#39; alias sv=\u0026#39;sudo vim\u0026#39; alias sc=\u0026#34;source ~/.zshrc\u0026#34; alias ..=\u0026#39;cd ..\u0026#39; alias cls=\u0026#39;clear\u0026#39; alias nano=\u0026#34;vim\u0026#34; alias tailf=\u0026#34;tail -f\u0026#34; alias lf=\u0026#39;ll -p | grep -v /\u0026#39; alias ldir=\u0026#39;ls -ld -- */\u0026#39; # kubectx alias kc=\u0026#34;kubectx\u0026#34; alias kn=\u0026#34;kubens\u0026#34; KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) # kube-ps1 # https://github.com/jonmosco/kube-ps1 # todo change source path source /usr/local/Cellar/kube-ps1/0.8.0/share/kube-ps1.sh PROMPT=\u0026#39;$(kube_ps1)\u0026#39;$PROMPT KUBE_PS1_PREFIX=\u0026#34;[\u0026#34; KUBE_PS1_SUFFIX=\u0026#34;]\u0026#34; KUBE_PS1_SYMBOL_ENABLE=false KUBE_PS1_CTX_COLOR=\u0026#34;83\u0026#34; KUBE_PS1_NS_COLOR=\u0026#34;201\u0026#34; # kubectl alias # load kubectl aliases file [ -f ~/.kubectl_aliases ] \u0026amp;\u0026amp; source ~/.kubectl_aliases # Print the full command before running it function kubectl() { echo \u0026#34;+ kubectl $@\u0026#34;\u0026gt;\u0026amp;2; command kubectl $@; } # HSTR configuration - add this to ~/.zshrc alias hh=hstr # hh to be alias for hstr setopt histignorespace # skip cmds w/ leading space from history export HSTR_CONFIG=hicolor # get more colors bindkey -s \u0026#34;\\C-r\u0026#34; \u0026#34;\\C-a hstr -- \\C-j\u0026#34; # bind hstr to Ctrl-r (for Vi mode check doc) export HSTR_TIOCSTI=y # snippet export PATH=/Users/kuga/snippet:$PATH # LANG Config export LANG=en_US.UTF-8 export LC_CTYPE=en_US.UTF-8\r","date":"2024-07-24","id":8,"permalink":"/en/tech/dev-env/zshrc/","summary":"\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# If you come from bash you might have to change your $PATH.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export PATH=$HOME/bin:/usr/local/bin:$PATH\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Path to your oh-my-zsh installation.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eZSH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$HOME\u003c/span\u003e\u003cspan class=\"s2\"\u003e/.oh-my-zsh\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Set name of the theme to load --- if set to \u0026#34;random\u0026#34;, it will\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# load a random theme each time oh-my-zsh is loaded, in which case,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# to know which specific one was loaded, run: echo $RANDOM_THEME\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eZSH_THEME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;robbyrussell\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Set list of themes to pick from when loading at random\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Setting this variable when ZSH_THEME=random will cause zsh to load\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# a theme from this variable instead of looking in $ZSH/themes/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# If set to an empty array, this variable will have no effect.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ZSH_THEME_RANDOM_CANDIDATES=( \u0026#34;robbyrussell\u0026#34; \u0026#34;agnoster\u0026#34; )\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to use case-sensitive completion.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# CASE_SENSITIVE=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to use hyphen-insensitive completion.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Case-sensitive completion must be off. _ and - will be interchangeable.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# HYPHEN_INSENSITIVE=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment one of the following lines to change the auto-update behavior\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; mode disabled  # disable automatic updates\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; mode auto      # update automatically without asking\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; mode reminder  # just remind me to update when it\u0026#39;s time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to change how often to auto-update (in days).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; frequency 13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line if pasting URLs and other text is messed up.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_MAGIC_FUNCTIONS=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to disable colors in ls.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_LS_COLORS=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to disable auto-setting terminal title.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_AUTO_TITLE=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to enable command auto-correction.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ENABLE_CORRECTION=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to display red dots whilst waiting for completion.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# You can also set it to another string to have that shown instead of the default red dots.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# e.g. COMPLETION_WAITING_DOTS=\u0026#34;%F{yellow}waiting...%f\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Caution: this setting can cause issues with multiline prompts in zsh \u0026lt; 5.7.1 (see #5765)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# COMPLETION_WAITING_DOTS=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line if you want to disable marking untracked files\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# under VCS as dirty. This makes repository status check for large repositories\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# much, much faster.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_UNTRACKED_FILES_DIRTY=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line if you want to change the command execution time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# stamp shown in the history command output.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# You can set one of the optional three formats:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# \u0026#34;mm/dd/yyyy\u0026#34;|\u0026#34;dd.mm.yyyy\u0026#34;|\u0026#34;yyyy-mm-dd\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# or set a custom format using the strftime function format specifications,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# see \u0026#39;man strftime\u0026#39; for details.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# HIST_STAMPS=\u0026#34;mm/dd/yyyy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Would you like to use another custom folder than $ZSH/custom?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ZSH_CUSTOM=/path/to/new-custom-folder\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Which plugins would you like to load?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Standard plugins can be found in $ZSH/plugins/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Custom plugins may be added to $ZSH_CUSTOM/plugins/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Example format: plugins=(rails git textmate ruby lighthouse)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Add wisely, as too many plugins slow down shell startup.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eplugins\u003c/span\u003e\u003cspan class=\"o\"\u003e=(\u003c/span\u003egit\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ZSH\u003c/span\u003e/oh-my-zsh.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# User configuration\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export MANPATH=\u0026#34;/usr/local/man:$MANPATH\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# You may need to manually set your language environment\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export LANG=en_US.UTF-8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Preferred editor for local and remote sessions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# if [[ -n $SSH_CONNECTION ]]; then\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#   export EDITOR=\u0026#39;vim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# else\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#   export EDITOR=\u0026#39;mvim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# fi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Compilation flags\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export ARCHFLAGS=\u0026#34;-arch x86_64\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Set personal aliases, overriding those provided by oh-my-zsh libs,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# plugins, and themes. Aliases can be placed here, though oh-my-zsh\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# users are encouraged to define aliases within the ZSH_CUSTOM folder.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# For a full list of active aliases, run `alias`.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Example aliases\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# alias zshconfig=\u0026#34;mate ~/.zshrc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# alias ohmyzsh=\u0026#34;mate ~/.oh-my-zsh\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# custom aliases\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ezsh\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;vim ~/.zshrc\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;exit\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;sudo\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;vim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003eg\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ega\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git add\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003egc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git checkout\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003egs\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git status\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003egd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git diff\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003esv\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;sudo vim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003esc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;source ~/.zshrc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e ..\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;cd ..\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ecls\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;clear\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003enano\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;vim\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003etailf\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;tail -f\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003elf\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ll -p | grep -v /\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003eldir\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ls -ld -- */\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# kubectx\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ekc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;kubectx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ekn\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;kubens\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBECTX_CURRENT_FGCOLOR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003etput setaf 6\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# kube-ps1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# https://github.com/jonmosco/kube-ps1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# todo change source path\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e /usr/local/Cellar/kube-ps1/0.8.0/share/kube-ps1.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003ePROMPT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;$(kube_ps1)\u0026#39;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$PROMPT\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_PREFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_SUFFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;]\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_SYMBOL_ENABLE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_CTX_COLOR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;83\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_NS_COLOR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;201\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# kubectl alias\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# load kubectl aliases file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e -f ~/.kubectl_aliases \u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003esource\u003c/span\u003e ~/.kubectl_aliases\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Print the full command before running it\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e kubectl\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;+ kubectl \u003c/span\u003e\u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e2\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e kubectl \u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# HSTR configuration - add this to ~/.zshrc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ehh\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehstr                    \u003cspan class=\"c1\"\u003e# hh to be alias for hstr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esetopt histignorespace           \u003cspan class=\"c1\"\u003e# skip cmds w/ leading space from history\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHSTR_CONFIG\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehicolor       \u003cspan class=\"c1\"\u003e# get more colors\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebindkey -s \u003cspan class=\"s2\"\u003e\u0026#34;\\C-r\u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\\C-a hstr -- \\C-j\u0026#34;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# bind hstr to Ctrl-r (for Vi mode check doc)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHSTR_TIOCSTI\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ey\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# snippet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ePATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/Users/kuga/snippet:\u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# LANG Config\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eLANG\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003een_US.UTF-8\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eLC_CTYPE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003een_US.UTF-8\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"zshrc"},{"content":"With Bubbletea Coming soon\u0026hellip;\n","date":"2024-09-30","id":9,"permalink":"/en/toys/terminal-tool/","summary":"\u003ch2 id=\"with-bubbletea\"\u003eWith Bubbletea\u003c/h2\u003e\n\u003cp\u003eComing soon\u0026hellip;\u003c/p\u003e","tags":[],"title":"Terminal Tool"},{"content":"GNU Bash Manual Bash is the default Shell in Linux, the official manual is forever divine.\nBash Reference Manual\rgnu.org\nDefinition of Shell In Linux, Shell is a command interpreter (software program) that is responsible for receiving user input commands and passing them to the operating system kernel for execution. Shell provides an interface for users to interact with the operating system, which is the outermost layer of the operating system. Additionally, it supports programming, including variables, loops, conditional judgments, etc., which is also what we commonly call Shell scripts. Common Shells in chronological order are as follows:\nShell Description Sh Bourne Shell, the earliest Shell, authored by Stephen Bourne. Bash Bourne Again Shell, the most commonly used Shell in Linux, developed by GNU. Dash Debian Almquist Shell, commonly seen in Ubuntu. Zsh Z Shell, with more powerful features, the default Shell on macOS. Relationship with Terminal The terminal we refer to now is generally a terminal emulator, such as GNOME Terminal, iTerm2, etc. The terminal provides an interface where users can interact with Shell. The terminal does not execute any commands; it only receives input and displays output. Shell is a process running in the terminal, responsible for the actual command interpretation and execution work. Do not confuse the terminal and Shell concepts, such as the following dialogue content is inaccurate.\nA: What Shell do you usually use?\nB: I use iTerm2\nA: Open Shell, then enter\u0026hellip;\niTerm2 is not a Shell, it\u0026rsquo;s a terminal, and Shell does not need to be opened; it will automatically start when the terminal is opened.\nDifferences Between Shells History and Origin sh is the original Shell of Unix systems, providing basic functions. bash is an enhanced version of sh, with more features, and is the mainstream Shell on Linux. zsh is a Shell with even more powerful features, combining the advantages of multiple Shells. Functionality sh provides basic command and script execution functions, mainly used for simple scripts and system tasks. bash adds interactive features (such as command history, completion), suitable for daily use and complex script writing. zsh has the richest features, especially in automatic completion, command line prompts, and syntax highlighting. Interactive Experience sh has a basic interactive experience, without modern features. bash provides a rich command line interactive experience, supporting command completion, history, etc. zsh further enhances the interactive experience, supporting more advanced completion, automatic suggestions, and error correction. Customization sh has almost no customization options. bash supports some customization, but is still limited compared to zsh. zsh can be easily customized through frameworks (such as Oh My Zsh), supporting plugins, themes, etc. ","date":"2024-08-24","id":10,"permalink":"/en/linux/shell/intro/","summary":"\u003ch2 id=\"gnu-bash-manual\"\u003eGNU Bash Manual\u003c/h2\u003e\n\u003cp\u003eBash is the default Shell in Linux, \u003cstrong\u003ethe official manual is forever divine\u003c/strong\u003e.\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/bash.html\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eBash Reference Manual\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003egnu.org\u003c/p\u003e","tags":[],"title":"Shell Introduction"},{"content":"Chinese Source Main Repository cd $(brew --repo) \u0026amp;\u0026amp; git remote -v\rorigin https://github.com/Homebrew/brew.git (fetch) origin https://github.com/Homebrew/brew.git (push)\rCore Repository cd $(brew --repo homebrew/core) \u0026amp;\u0026amp; git remote -v\rorigin https://github.com/Homebrew/homebrew-core.git (fetch) origin https://github.com/Homebrew/homebrew-core.git (push)\rAliyun Mirror git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\rgit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\rexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles\rUSTC Mirror git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/brew.git\rgit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\rexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles\rTsinghua University Mirror git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\rgit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\rexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\rVerify Source After completing the source change operation, you can execute the following command to verify whether the source configuration is successful.\nbrew update\rbrew config | grep -E \u0026#39;ORIGIN|BOTTLE\u0026#39;\rWith the brew config command, you can check the current repository source and Bottle source.\nCommon Errors If the homebrew/core directory does not exist, you can use the following command to check.\nbrew tap\rIf there is no output for homebrew/core, you can use the following command to force installation.\nbrew tap --force homebrew/core\r","date":"2024-08-22","id":11,"permalink":"/en/tech/fourd-pocket/homebrew/","summary":"\u003ch2 id=\"chinese-source\"\u003eChinese Source\u003c/h2\u003e\n\u003ch3 id=\"main-repository\"\u003eMain Repository\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git remote -v\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/brew.git \u003cspan class=\"o\"\u003e(\u003c/span\u003efetch\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/brew.git \u003cspan class=\"o\"\u003e(\u003c/span\u003epush\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"core-repository\"\u003eCore Repository\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git remote -v\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/homebrew-core.git \u003cspan class=\"o\"\u003e(\u003c/span\u003efetch\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/homebrew-core.git \u003cspan class=\"o\"\u003e(\u003c/span\u003epush\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"aliyun-mirror\"\u003eAliyun Mirror\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHOMEBREW_BOTTLE_DOMAIN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps://mirrors.aliyun.com/homebrew/homebrew-bottles\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"ustc-mirror\"\u003eUSTC Mirror\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.ustc.edu.cn/brew.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHOMEBREW_BOTTLE_DOMAIN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps://mirrors.ustc.edu.cn/homebrew-bottles\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"tsinghua-university-mirror\"\u003eTsinghua University Mirror\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHOMEBREW_BOTTLE_DOMAIN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"verify-source\"\u003eVerify Source\u003c/h3\u003e\n\u003cp\u003eAfter completing the source change operation, you can execute the following command to verify whether the source configuration is successful.\u003c/p\u003e","tags":[],"title":"Homebrew"},{"content":"The Mysterious ^[[A First, start a new Shell /bin/sh.\n/bin/sh\rThen enter the following command, everything is normal.\nls -l\rPress the up arrow key ⬆️ to view the previous command.\n^[[A\rYou will find that you cannot see the previous command, instead, these characters ^[[A appear. This is because early sh did not support viewing command history, until bash added this feature.\nANSI Escape Sequences ^[[A is an ANSI escape sequence, indicating the up arrow key.\n^[：represents the Esc key (ASCII code 27), which is the start of the escape sequence. [A：represents the specific operation, [A indicates the up arrow key. When you press the up arrow key in the terminal, the terminal sends this character sequence ^[[A to the program, usually used to call the previous command in the command history. Since sh does not support viewing command history, it will output the character sequence of the key directly.\nsh in Ubuntu In Ubuntu, sh is actually a link to dash.\nfile /bin/sh\r/bin/sh: symbolic link to dash\rTherefore, dash also does not support viewing command history.\nHistory Functionality history Command Without arguments, it outputs all history records.\nhistory\rYou can also use the short command, with the same effect.\n!!\r.bash_history File The persistent file for command history records.\n-rw------- 1 kuga kuga 5516 Aug 24 08:23 /home/kuga/.bash_history\rDuring the interaction with the Shell, the history records of the commands are saved in memory. Using the history command can view the changes of the history records in real-time, but the history records are only written to the .bash_history file when you exit the Shell. If you want to write to the history record file immediately, you can use the following command.\nhistory -a\rEnvironment Variables HISTFILE The path of the history record file.\necho $HISTFILE\r/home/kuga/.bash_history\rHISTFILESIZE The size of the history record file.\necho $HISTFILESIZE\r2000\rHISTSIZE The size of the history record list in memory.\necho $HISTSIZE\r1000\r","date":"2024-08-24","id":12,"permalink":"/en/linux/shell/command-history/","summary":"\u003ch2 id=\"the-mysterious-a\"\u003eThe Mysterious ^[[A\u003c/h2\u003e\n\u003cp\u003eFirst, start a new Shell \u003ccode\u003e/bin/sh\u003c/code\u003e.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/bin/sh\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThen enter the following command, everything is normal.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els -l\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003ePress the up arrow key ⬆️ to view the previous command.\u003c/p\u003e","tags":[],"title":"Command History"},{"content":"Conversation 🤡：Write a crawler in Python, can input URL 🤖：Gave an example of Beautiful Soup 🤡：How to capture content dynamically generated by JS 🤖：Can use Selenium, Scrapy + Splash 🤡：Method of using Scrapy + Splash 🤖：Here is an example script using Scrapy After running it, I found that all logs were printed to the screen, so I went to the official website to look at the configuration and found that you can specify the log file, crawl depth, priority, and so on. I asked GPT again to give some configuration examples and annotations, and finally, after organizing and optimizing, I got the following final input.\nWrite a python crawler script - A total of 4 input parameters - The 1st parameter: the URL to start crawling - The 2nd parameter: the keyword to match, supports multiple - The 3rd parameter: sets the AND or OR relationship for multiple keywords - The 4th parameter: sets the depth of the crawler - When a webpage successfully matches multiple keywords, only record once - Output the URL of the matched content to the screen, one per line - Using splash and scrapy technology - The scrapy project name is mycrawler - The scrapy log level is INFO, the log file is spider.log - The scrapy configuration is placed separately in settings.py - settings.py adds related configurations for crawl depth - Each configuration in settings.py adds Chinese annotations ## ChatGPT Answer Below is ChatGPT\u0026#39;s response, but I made some modifications and optimizations. ### Install Splash 安装 Scrapy-Splash 以及 Splash 服务： ```bash {frame=\u0026#34;none\u0026#34;} pip install scrapy scrapy-splash\rCreate a Scrapy Project First, create a new Scrapy project in the command line:\nscrapy startproject mycrawler\rRun Splash in Docker docker run -p 8050:8050 scrapinghub/splash\rModify settings.py # -*- coding: utf-8 -*- # Scrapy settings for mycrawler project BOT_NAME = \u0026#39;mycrawler\u0026#39; SPIDER_MODULES = [\u0026#39;mycrawler.spiders\u0026#39;] NEWSPIDER_MODULE = \u0026#39;mycrawler.spiders\u0026#39; # 使用 Splash 渲染 JavaScript 页面 SPLASH_URL = \u0026#39;http://localhost:8050\u0026#39; DOWNLOADER_MIDDLEWARES = { \u0026#39;scrapy_splash.SplashCookiesMiddleware\u0026#39;: 723, \u0026#39;scrapy_splash.SplashMiddleware\u0026#39;: 725, \u0026#39;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware\u0026#39;: 810, } SPIDER_MIDDLEWARES = { \u0026#39;scrapy_splash.SplashDeduplicateArgsMiddleware\u0026#39;: 100, } DUPEFILTER_CLASS = \u0026#39;scrapy_splash.SplashAwareDupeFilter\u0026#39; # Crawl depth settings DEPTH_LIMIT = 3 # Set the crawl depth limit # Depth of each crawl DEPTH_STATS = True # Enable depth statistics # Enable crawl depth statistics DEPTH_PRIORITY = 1 # Enable crawl depth priority # Set crawl depth priority, 1 indicates depth-first, -1 indicates breadth-first # Log settings LOG_LEVEL = \u0026#39;INFO\u0026#39; # Log level # Set the log recording level to INFO LOG_FILE = \u0026#39;spider.log\u0026#39; # Log file # Specify the path of the log file # Other configurations ROBOTSTXT_OBEY = True # Obey robots.txt rules # Whether the spider obeys robots.txt rules, default is True # Set User-Agent, simulating common browsers #USER_AGENT = \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\u0026#39;\rCreate a Spider Create a new spider file my_spider.py in the mycrawler/spiders directory with the following content:\nimport scrapy from scrapy_splash import SplashRequest class MySpider(scrapy.Spider): name = \u0026#34;my_spider\u0026#34; # Define the name of the spider def __init__(self, start_url, keywords, logic, depth, *args, **kwargs): super(MySpider, self).__init__(*args, **kwargs) self.start_urls = [start_url] # Initialize the starting URL to be crawled self.keywords = keywords.split(\u0026#39;,\u0026#39;) # Split the keyword string into a list self.logic = logic # Set the logical relationship of keyword matching (and/or relationship) self.custom_settings = {\u0026#39;DEPTH_LIMIT\u0026#39;: int(depth)} # Set the crawl depth limit def start_requests(self): # Generate initial requests for url in self.start_urls: yield SplashRequest(url, self.parse, args={\u0026#39;wait\u0026#39;: 1}) def parse(self, response): # Parse the response content # Get the page text and convert it to lowercase page_text = response.text.lower() # Check if each keyword appears in the page text matches = [kw.lower() in page_text for kw in self.keywords] # Determine if the match is successful based on the logical relationship if (self.logic == \u0026#39;and\u0026#39; and all(matches)) or (self.logic == \u0026#39;or\u0026#39; and any(matches)): # Record the matching URL self.log(f\u0026#39;Matched URL: {response.url}\u0026#39;) print(response.url) # Get all the links on the page and crawl recursively for next_page in response.css(\u0026#39;a::attr(href)\u0026#39;).getall(): if next_page: yield SplashRequest(response.urljoin(next_page), self.parse, args={\u0026#39;wait\u0026#39;: 1})\rRun the Spider Run the spider using the command line:\nscrapy crawl my_spider -a start_url=\u0026#39;http://example.com\u0026#39; -a keywords=\u0026#39;keyword1,keyword2\u0026#39; -a logic=\u0026#39;and\u0026#39; -a depth=3\rThis script will crawl the web pages, match the keywords, and output the matching URLs based on the input parameters.\nSummary ChatGPT is more like a guiding role. Sometimes you need a tool, maybe you don\u0026rsquo;t know what this tool will look like in the end. But as long as you keep talking, step by step, he can always give you the answer you want. This process can also learn a lot of things, as long as you know how to ask questions.\n","date":"2024-07-24","id":13,"permalink":"/en/tech/fourd-pocket/chatgpt-crawler/","summary":"\u003ch2 id=\"conversation\"\u003eConversation\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e🤡：Write a crawler in Python, can input URL\u003c/li\u003e\n\u003cli\u003e🤖：Gave an example of Beautiful Soup\u003c/li\u003e\n\u003cli\u003e🤡：How to capture content dynamically generated by JS\u003c/li\u003e\n\u003cli\u003e🤖：Can use Selenium, Scrapy + Splash\u003c/li\u003e\n\u003cli\u003e🤡：Method of using Scrapy + Splash\u003c/li\u003e\n\u003cli\u003e🤖：Here is an example script using Scrapy\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAfter running it, I found that all logs were printed to the screen, so I went to the official website to look at the configuration and found that you can specify the log file, crawl depth, priority, and so on.\nI asked GPT again to give some configuration examples and annotations, and finally, after organizing and optimizing, I got the following final input.\u003c/p\u003e","tags":[],"title":"Crawler With ChatGPT"},{"content":"Default Shell echo $SHELL\r/bin/bash\rIf you start a new Shell in the current terminal (e.g., switching from Bash to Zsh), this command still displays the default login Shell, which is configured in /etc/passwd.\ngrep root /etc/passwd\rroot:x:0:0:root:/root:/bin/bash\rOn macOS, the default Shell information is typically stored in the user account settings, not in the /etc/passwd file. Starting from macOS Catalina (10.15), the default shell has been changed to zsh, previously the default Shell was bash. You can view the default shell using the following method.\ndscl . -read /Users/$(whoami) UserShell\rUserShell: /bin/zsh\rCurrent Shell $0 in Shell returns the Shell name when running, and returns the script name/path when running in a script.\necho $0\r-bash\rThe preceding hyphen - indicates that this Shell is the user\u0026rsquo;s login Shell.\nYou can also use the ps command to view the process status.\nps -p $$\rPID TTY TIME CMD 17216 pts/0 00:00:00 bash\rIf you start a new Shell in the current terminal (switching from Bash to Sh), the above two methods will display sh.\nSupported Shells cat /etc/shells\r# /etc/shells: valid login shells /bin/sh /bin/bash /usr/bin/bash /bin/rbash /usr/bin/rbash /usr/bin/sh /bin/dash /usr/bin/dash /usr/bin/tmux /usr/bin/screen\rChange Default Shell The content in /etc/passwd will be updated after modification.\nchsh Modifying the login Shell of the current user will require entering the user password.\nchsh -s /bin/bash\rUsing the root user or sudo can also modify the login Shell of other users.\nsudo chsh -s /bin/bash kuga\rNote: If we enter a non-existent Shell.\nchsh -s /bin/foo\rchsh: /bin/foo is an invalid shell\rIt checks whether the entered Shell is in the /etc/shells file, preventing login failures due to entering an invalid Shell.\nusermod Using this command requires the root user or a user with sudo privileges.\nsudo usermod -s /bin/dash kuga\rNote\nusermod does not check the validity of the Shell, it is not recommended to use.\nsudo usermod -s /bin/notexist kuga\rThe above command will not error, but will cause the kuga user to be unable to log in.\nAdd sudo Privileges View the list of members of the sudo group.\ngetent group sudo\rGive the user sudo group privileges, which requires root execution.\nusermod -aG sudo username\rDo Not Edit Passwd If you accidentally write the configuration incorrectly, it is very likely to cause the entire system to be unable to log in.\nAvoid Using Root I accidentally changed the login Shell of root to zsh, but Ubuntu did not have zsh installed, so root could not log in. Fortunately, I had another user with sudo privileges, so I could log in normally and successfully changed root\u0026rsquo;s Shell back. If you\u0026rsquo;re unlucky and don\u0026rsquo;t have a user with sudo privileges, it would be troublesome.\nsudo chsh -s /bin/bash root\r","date":"2024-08-24","id":14,"permalink":"/en/linux/shell/basic-operations/","summary":"\u003ch2 id=\"default-shell\"\u003eDefault Shell\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$SHELL\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eIf you start a new Shell in the current terminal (e.g., switching from Bash to Zsh),\nthis command still displays the default login Shell, which is configured in \u003ccode\u003e/etc/passwd\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"Basic Operations"},{"content":"Background For various reasons, installing an old version of macOS on an Apple computer is not an easy task. Because the download link on the Apple official website will guide you to the App Store, when it finds that the system version you want to download is older than the system you are currently using, it will not provide the download, only the updated version.\nA few days ago, a friend of mine just graduated from high school and wanted to study computer science in college, so I recommended him to buy an Apple computer. But he had never used macOS before, so I planned to let him experience my 2014 MacBook Air. At that time, the system of this computer was High Sierra 10.13, I thought about making a USB boot disk to reinstall the system, and conveniently erase all the data on the disk, I didn\u0026rsquo;t expect that after this operation, I was stunned.\nCertificate Expired I found a High Sierra image online, because the Apple official website cannot download old versions of macOS. After the boot disk was made, everything went smoothly, until it gave me a surprise. (I found this picture online)\nChecked some information, many said it was a problem with the expired certificate, because some of the certificates issued by Apple expired in 2019.\nSolution Download Latest Image (Recommended) Whether an image can be used is not just a certificate issue, so the most reliable method is to download the latest installation package from the Apple official website. But as mentioned earlier, the App Store does not provide downloads at all, Fortunately, we can use the softwareupdate command to download the system version supported by the current computer.\nsoftwareupdate --list-full-installers\rFinding available software Software Update found the following full installers: * Title: macOS Sonoma, Version: 14.6, Size: 13339695KiB, Build: 23G80 * Title: macOS Sonoma, Version: 14.5, Size: 13353373KiB, Build: 23F79 * Title: macOS Sonoma, Version: 14.4.1, Size: 13298513KiB, Build: 23E224 * Title: macOS Ventura, Version: 13.6.8, Size: 11922165KiB, Build: 22G820 * Title: macOS Ventura, Version: 13.6.7, Size: 11924125KiB, Build: 22G720 * Title: macOS Ventura, Version: 13.6.6, Size: 11917983KiB, Build: 22G630 * Title: macOS Monterey, Version: 12.7.6, Size: 12118346KiB, Build: 21H1320 * Title: macOS Monterey, Version: 12.7.5, Size: 12116686KiB, Build: 21H1222 * Title: macOS Monterey, Version: 12.7.4, Size: 12117810KiB, Build: 21H1123 * Title: macOS Big Sur, Version: 11.7.10, Size: 12125478KiB, Build: 20G1427 * Title: macOS Catalina, Version: 10.15.7, Size: 8055650KiB, Build: 19H15 * Title: macOS Catalina, Version: 10.15.7, Size: 8055522KiB, Build: 19H2 * Title: macOS Catalina, Version: 10.15.6, Size: 8055450KiB, Build: 19G2021 * Title: macOS Mojave, Version: 10.14.6, Size: 5896894KiB, Build: 18G103 * Title: macOS Mojave, Version: 10.14.4, Size: 5894794KiB, Build: 18E2034\rsoftwareupdate --fetch-full-installer --full-installer-version 10.14.6\rBecause my other computer supports the oldest version is Mojave, not High Sierra, so in the end I installed 10.14.6.\nModify System Time Open Utilities -\u0026gt; Terminal, use the date command to modify the time.\ndate 010101012018\rUnderstand the reason Although the problem has been solved, I want to verify whether it is really a problem with the expired certificate.\nHigh Sierra: Error, application is damaged Mojave: Successfully installed These two installation packages are files (actually directories) with the suffix .app, unlike the above .pkg files, you can directly see the certificate information when you open them, you need to use another method.\nCertificate Information We can use pkgutil to view the certificate information of .app.\npkgutil --check-signature Install\\ macOS\\ High\\ Sierra.app\rPackage \u0026#34;Install macOS High Sierra\u0026#34;: Status: signed by untrusted certificate Certificate Chain: 1. Software Signing SHA256 Fingerprint: 2A A4 B9 97 3B 7B A0 7A DD 44 7E E4 DA 8B 53 37 C3 EE 2C 3A 99 19 11 E8 0E 72 82 E8 A7 51 FC 32 ------------------------------------------------------------------------ 2. Apple Code Signing Certification Authority Expires: 2026-10-24 17:39:41 +0000 SHA256 Fingerprint: 5B DA B1 28 8F C1 68 92 FE F5 0C 65 8D B5 4F 1E 2E 19 CF 8F 71 CC 55 F7 7D E2 B9 5E 05 1E 25 62 ------------------------------------------------------------------------ 3. Apple Root CA Expires: 2035-02-09 21:40:36 +0000 SHA256 Fingerprint: B0 B1 73 0E CB C7 FF 45 05 14 2C 49 F1 29 5E 6E DA 6B CA ED 7E 2C 68 C5 BE 91 B5 A1 10 01 F0 24\rYou can see that the certificate information in this package contains 3 parts, but only parts 2 and 3 have expiration information, and none of them have expired. What\u0026rsquo;s even more ridiculous is that I also checked the certificate information of Mojave, and it is exactly the same as High Sierra. So what\u0026rsquo;s the problem? Later I found that you can use codesign to view more detailed certificate information.\ncodesign --display --extract-certificates Install\\ macOS\\ High\\ Sierra.app\rThis command will generate 3 certificate files in the current directory.\ncodesign0 codesign1 codesign2\rUse the qlmanage command to view the certificate information.\nqlmanage -c public.x509-certificate -p codesign0\rYou can see that the expiration date of Software Signing is April 13, 2021, which is exactly the missing information in the first part of pkgutil. When I thought the truth was revealed, the same command, the expiration date of Mojave is also April 13, 2021. I don\u0026rsquo;t understand this, then both installation packages should not work, and then I asked ChatGPT again.\n🤡: Why can the Software Signing certificate in the macos installation program still run normally after it expires\n🤖: In macOS, the reason why the Software Signing certificate in the installation program can still run normally after it expires is because of the system\u0026rsquo;s design. When creating the installation program, as long as the certificate is valid at the time of signing, macOS will ignore the expiration date of the certificate, allowing the signed application to continue running. The following are the specific reasons:\nValidity at the time of signing: When creating the installation program, as long as the certificate is valid, the signing process will be successfully completed. This means that the installation program has been certified as safe at the time of creation, even if the certificate expires later, the system still recognizes the legality of the signing. System design: The design concept of macOS is to ensure the continuity of applications and the stability of user experience. In order to avoid the situation where users cannot use the installed applications due to the expiration of the certificate, macOS will ignore the expiration date of the signed application at runtime. Reduce the burden on users and developers: If the expiration of the certificate requires users to reinstall the application every time, or developers have to update the certificate frequently, this will bring great inconvenience to users and developers. Ignoring the expiration of the certificate can avoid this situation, ensuring that users can continue to use the applications they rely on. Fault tolerance in actual operation: Although the certificate has a validity period in theory, in actual operation, the fault tolerance design of macOS allows the signed application to continue running even if the certificate expires. This design is to ensure the flexibility and reliability of the system. In summary, the reason why the Software Signing certificate in the installation program of macOS can still run normally after it expires is because the system verifies the validity at the time of signing, and ignores the expiration date of the certificate at runtime, ensuring the continuity of the application and the stability of the user experience.\nSo can I assume that the certificates of the two installation packages are not a problem?\nApple Installer Checksums It seems that we can also verify the integrity of the installation package, Mac OSX Installers SHA1 Checksums.\nshasum /Applications/Install*OS*.app/Contents/SharedSupport/{Base,Install}*.dmg\rBut I tried it, the result is the same, which also does not represent anything.\nWhat is the truth It doesn\u0026rsquo;t work, but I don\u0026rsquo;t know why.\nThe situation has developed to this point, I really don\u0026rsquo;t know what caused the High Sierra installation package to report an error.\nReference https://eclecticlight.co/2019/10/18/beware-apple-security-certificates-after-24-october-they-may-have-expired/ https://www.youtube.com/watch?v=E4Mu4tI8-iw https://github.com/notpeter/apple-installer-checksums ","date":"2024-08-02","id":15,"permalink":"/en/tech/fourd-pocket/old-macos/","summary":"\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eFor various reasons, installing an old version of macOS on an Apple computer is not an easy task.\nBecause the download link on the Apple official website will guide you to the App Store,\nwhen it finds that the system version you want to download is older than the system you are currently using,\nit will not provide the download, only the updated version.\u003c/p\u003e","tags":[],"title":"Install Old macOS"},{"content":"Builtin Commands Builtin commands are implemented by the Shell itself, they run without starting a new process or calling an external program, which is the basic functionality of Shell operations.\nBuiltin Commands Ex cd：Change the current working directory. echo：Output a string to the terminal. exit：Exit the current Shell session. export：Set or export environment variables. alias：Create an alias for a command. set：Set Shell options and variables. read：Read a line from standard input and assign it to a variable. Builtin Commands Ref Bash Built-In Commands\rgnu.org\nExternal Commands External Commands. External commands refer to those that are not implemented by the Shell itself, but are executable files in the system. When you run an external command, the Shell will find the corresponding executable file by searching the directories in the PATH environment variable, and start a new process to run the command.\nExternal Commands Ex /bin/ls：List directory contents. /usr/bin/grep：Search for content in files. /bin/cat：Display file contents. /bin/mkdir：Create a directory. Distinguish Builtin/External Using the Type Command type cd\rcd is a shell builtin\rtype cat\rcat is /usr/bin/cat\rListing All Implementations type -a pwd\rpwd is a shell builtin pwd is /usr/bin/pwd pwd is /bin/pwd\rAbove, we listed the built-in and external implementations of pwd. If you want to use the external implementation, you need to use the full path.\nListing Command Aliases type -a ls\rls is aliased to `ls --color=auto\u0026#39; ls is /usr/bin/ls ls is /bin/ls\rAdditionally, using the which command will only show external commands.\n","date":"2024-08-24","id":16,"permalink":"/en/linux/shell/command-type/","summary":"\u003ch2 id=\"builtin-commands\"\u003eBuiltin Commands\u003c/h2\u003e\n\u003cp\u003eBuiltin commands are implemented by the Shell itself, they run\n\u003cstrong\u003ewithout starting a new process\u003c/strong\u003e or calling an external program, which is the basic functionality of Shell operations.\u003c/p\u003e","tags":[],"title":"Command Type"},{"content":"Network Diagnostics ping.pe ping.pe\rNetwork latency \u0026amp; route monitoring\n","date":"2024-08-22","id":17,"permalink":"/en/tech/fourd-pocket/useful-tool/","summary":"\u003ch2 id=\"network-diagnostics\"\u003eNetwork Diagnostics\u003c/h2\u003e\n\u003ch3 id=\"pingpe\"\u003eping.pe\u003c/h3\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://ping.pe\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eping.pe\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eNetwork latency \u0026amp; route monitoring\u003c/p\u003e","tags":[],"title":"Useful Tools"},{"content":"Background In 2019-2020, when this activity template project was written in PHP, it had already stopped development, but it\u0026rsquo;s still running, with over 400 activities running on it. I remember when I left, there were only over 50, and now PHP is no longer popular in China, if not for the high migration cost, it would have been changed to Java long ago. However, knowing that the code I wrote is still running, and so many activities have been launched, it\u0026rsquo;s still quite heartening to think about the development cost saved.\nThis time, I plan to rebuild the activity template and record the problems encountered along the way. After all, for a 5-year-old project, many of the software dependencies have been updated, and various problems will arise.\nPHP 7.2 By 2024, PHP has already reached 8.X, and some features are no longer supported, so an older version must be installed. However, Homebrew\u0026rsquo;s official does not provide downloads for older versions, and shivammathur/homebrew-php must be used.\nshivammathur/homebrew-php\rHomebrew PHP extension\nHomebrew brew update\rbrew tap shivammathur/php\rbrew install shivammathur/php/php@7.2\recho \u0026#39;export PATH=\u0026#34;/usr/local/opt/php@7.2/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo \u0026#39;export PATH=\u0026#34;/usr/local/opt/php@7.2/sbin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc\rStart Service brew services start php@7.2\rView Service brew services list\rphp@7.2 started kuga ~/Library/LaunchAgents/homebrew.mxcl.php@7.2.plist\rMySQL 8.4 MySQL has also jumped from 5 to 8, and here we directly install 8.4.\nbrew install mysql@8.4\rAuthentication Error When PHP 7.2 connects to the database, it will report the following error.\nCDbConnection failed to open the DB connection: SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client\rFor security reasons, MySQL 8.0 and later introduced a new authentication method caching_sha2_password, which is incompatible with the mysql_native_password used by older clients. There are two solutions, one is to upgrade the client, and the other is to enable the old module. Here, the simplest method is to enable the mysql_native_password module for MySQL 8.4.\nvim /usr/local/etc/my.cnf\rAdd the following configuration in the [mysqld] module.\nmysql_native_password=ON\rRestart the MySQL service.\nbrew services restart mysql@8.4\r","date":"2024-09-07","id":18,"permalink":"/en/tech/fourd-pocket/act-tpl/","summary":"\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eIn 2019-2020, when this activity template project was written in PHP, it had already stopped development, but it\u0026rsquo;s still running, with over 400 activities running on it.\nI remember when I left, there were only over 50, and now PHP is no longer popular in China, if not for the high migration cost, it would have been changed to Java long ago.\nHowever, knowing that the code I wrote is still running, and so many activities have been launched, it\u0026rsquo;s still quite heartening to think about the development cost saved.\u003c/p\u003e","tags":[],"title":"Setup Activity Template"},{"content":"Shell Variables Shell variables are a general term. If you are using a specific shell, such as Bash, you can call it a Bash variable. But it is important to note that shell variables are not environment variables, do not be confused by their capitalization, here are the relevant official documents.\nShell Variables\rgun.org\nBash Variables\rgun.org\nYou can also view it by using the man command and searching for Shell Variables.\nman bash\r/Shell Variables\rCommon Shell Variables PS1 Shell command prompt.\necho $PS1\r\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$\rUID Current user ID.\necho $UID\r1000\rPPID ps -fp $PPID\rUID PID PPID C STIME TTY TIME CMD kuga 46635 46570 0 10:56 ? 00:00:00 sshd: kuga@pts/0\rYou can see that the parent process of bash is sshd.\nBASH_VERSION echo $BASH_VERSION\r5.1.16(1)-release\rBASH_SUBSHELL Subshell nesting level, starting from 0.\necho $BASH_SUBSHELL\r0\rSECONDS Seconds since the shell started.\necho $SECONDS\r13963\rRANDOM 0 ~ 32767 random number.\necho $RANDOM\r1024\rCustom Shell Variables Refer to the later chapter on environment variables\n","date":"2024-08-26","id":19,"permalink":"/en/linux/shell/shell-variables/","summary":"\u003ch2 id=\"shell-variables\"\u003eShell Variables\u003c/h2\u003e\n\u003cp\u003eShell variables are a general term. If you are using a specific shell, such as Bash, you can call it a Bash variable.\nBut it is important to note that shell variables are not environment variables, do not be confused by their capitalization, here are the relevant official documents.\u003c/p\u003e","tags":[],"title":"Shell Variables"},{"content":"Prompt Change the markdown code block type.\nChange all markdown code block types to bash {frame=\u0026#34;none\u0026#34;}\rThe model I use is cursor-small. Adding the full range here will modify all code block types. If you don\u0026rsquo;t add the full range, it will detect whether the code block type is bash. Yes: Modify. No: Do not modify. Translate to English Translate to English, if it is a title, then capitalize the first letter of each word.\rTranslate to Traditional-HK Translate to Traditional-HK.\r","date":"2024-09-08","id":20,"permalink":"/en/tech/cursor/prompt/","summary":"\u003ch2 id=\"prompt\"\u003ePrompt\u003c/h2\u003e\n\u003cp\u003eChange the markdown code block type.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eChange all markdown code block types to bash {frame=\u0026#34;none\u0026#34;}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eThe model I use is \u003ccode\u003ecursor-small\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAdding the full range here will modify all code block types.\u003c/li\u003e\n\u003cli\u003eIf you don\u0026rsquo;t add the full range, it will detect whether the code block type is \u003ccode\u003ebash\u003c/code\u003e.\n\u003cul\u003e\n\u003cli\u003eYes: Modify.\u003c/li\u003e\n\u003cli\u003eNo: Do not modify.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"translate-to-english\"\u003eTranslate to English\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTranslate to English, if it is a title, then capitalize the first letter of each word.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"translate-to-traditional-hk\"\u003eTranslate to Traditional-HK\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTranslate to Traditional-HK.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"Prompt"},{"content":"Subshell The definition of Subshell in some books or materials is unclear, and the explanations often contradict each other, making it difficult to understand. Therefore, to avoid this semantic and logical problem, we will not provide its definition (it is recommended to refer to the official BASH manual), nor will we use the translation \u0026ldquo;sub Shell\u0026rdquo;, but rather understand its definition from its actual behavior. The variables listed below are closely related to the concept of Subshell.\nBash Reference Manual\rBash Reference Manual\nBASH_SUBSHELL Shell variable, not an environment variable, as explained in the official manual.\nIncremented by one within each subshell or subshell environment when the shell begins executing in that environment. The initial value is 0. If BASH_SUBSHELL is unset, it loses its special properties, even if it is subsequently reset.\rYou can also use the man command, which may have some differences in content.\nman bash | grep -A 3 \u0026#39;BASH_SUBSHELL\u0026#39; | head -n 4\recho $BASH_SUBSHELL\r0\rSHLVL Environment variable, as explained in the official manual.\nIncremented by one each time a new instance of Bash is started. This is intended to be a count of how deeply your Bash shells are nested.\rUsing the man command.\nman bash | grep \u0026#39;SHLVL\u0026#39;\rThis value starts from 1.\necho $SHLVL\r1\rCommand Grouping Full name Command Grouping, Bash provides two methods for creating command grouping.\nParentheses: () This method creates a Subshell environment to handle command grouping.\n(pwd; echo $BASH_SUBSHELL)\r/home/kuga 1\r(pwd; (echo $BASH_SUBSHELL))\r/home/kuga 2 (pwd; (echo $SHLVL))\r1\rWe can draw the following conclusions.\nBASH_SUBSHELL: Increases by 1 for each Subshell created. SHLVL: Does not change regardless of how many Subshells are created. Braces: This method does not create a Subshell, and command grouping is processed in the context of the current Shell. In syntax, the space between the braces and the command cannot be omitted, and the semicolon at the end of each command is also required.\n{ pwd; { echo $BASH_SUBSHELL; } }\r/home/kuga 0\r{ pwd; { echo $SHLVL; } }\r/home/kuga 1\rShell PID You can view the Shell\u0026rsquo;s PID through BASHPID or $$, but they are different.\nBASHPID Shell variable, not an environment variable, as explained in the official manual.\nExpands to the process ID of the current Bash process. This differs from $$ under certain circumstances, such as subshells that do not require Bash to be re-initialized. Assignments to BASHPID have no effect. If BASHPID is unset, it loses its special properties, even if it is subsequently reset.\recho $BASHPID\r56414\rUsing () to view BASHPID.\n(ps -f --forest; echo $BASHPID)\rUID PID PPID C STIME TTY TIME CMD kuga 56414 56412 0 10:11 pts/0 00:00:00 -bash kuga 57325 56414 0 15:13 pts/0 00:00:00 \\_ -bash kuga 57326 57325 0 15:13 pts/0 00:00:00 \\_ ps -f --forest 57325\rIt can be seen that BASHPID outputs the PID of the Subshell.\nSpecial Parameter $$ Official explanation.\n($$) Expands to the process ID of the shell. In a subshell, it expands to the process ID of the invoking shell, not the subshell.\rIn a Subshell, $$ represents the PID of the invoking shell.\n(pwd; (ps -f --forest; echo $$))\r/home/kuga UID PID PPID C STIME TTY TIME CMD kuga 56414 56412 0 10:11 pts/0 00:00:00 -bash kuga 57347 56414 0 15:20 pts/0 00:00:00 \\_ -bash kuga 57348 57347 0 15:20 pts/0 00:00:00 \\_ -bash kuga 57349 57348 0 15:20 pts/0 00:00:00 \\_ ps -f --forest 56414\rIt can be seen that, regardless of how many Subshells there are, $$ always represents the PID of the top-level Bash.\nCreating a Bash Instance In Bash, typing bash creates a brand new Bash instance.\nbash\rps -f --forest\rUID PID PPID C STIME TTY TIME CMD kuga 56414 56412 0 10:11 pts/0 00:00:00 -bash kuga 57359 56414 0 15:29 pts/0 00:00:00 \\_ bash kuga 57402 57359 0 15:30 pts/0 00:00:00 \\_ ps -f --forest\rAt this point, let\u0026rsquo;s observe the variables mentioned above again.\necho $BASH_SUBSHELL $SHLVL $BASHPID $$\r0 2 57359 57359\rBASH_SUBSHELL: No change. SHLVL: From 1 -\u0026gt; 2. BASHPID: The PID of the new Bash instance. $$: The PID of the new Bash instance. If we say that this way of creating Bash is also a Subshell, the semantics and behavior would be contradictory.\n","date":"2024-08-27","id":21,"permalink":"/en/linux/shell/subshell/","summary":"\u003ch2 id=\"subshell\"\u003eSubshell\u003c/h2\u003e\n\u003cp\u003eThe definition of Subshell in some books or materials is unclear, and the explanations often contradict each other, making it difficult to understand.\nTherefore, to avoid this semantic and logical problem, we will not provide its definition (it is recommended to refer to the official BASH manual),\nnor will we use the translation \u0026ldquo;sub Shell\u0026rdquo;, but rather understand its definition from its actual behavior.\nThe variables listed below are closely related to the concept of Subshell.\u003c/p\u003e","tags":[],"title":"Subshell"},{"content":"MAN This command can view different sections of the manual pages.\nman man\rman - an interface to the system reference manuals The table below shows the section numbers of the manual followed by the types of pages they contain. 1 Executable programs or shell commands 2 System calls (functions provided by the kernel) 3 Library calls (functions within program libraries) 4 Special files (usually found in /dev) 5 File formats and conventions, e.g. /etc/passwd 6 Games 7 Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7) 8 System administration commands (usually only for root) 9 Kernel routines [Non standard]\rSection man 1 ls/cp/mv man 2 write/open/close man 3 printf/malloc/free man 4 tty/null/random man 5 passwd/fstab man 7 man man 8 ifconfig/iptables/mount man 9 fork # not work\rGames fortune can randomly display quotes and jokes.\napt install fortune/fortune-mod/fortunes-zh\rman 6 fortune\rfortune - print a random, hopefully interesting, adage\rCan be combined with cowsay and lolcat to play.\nfortune | cowsay | lolcat\rPWD Print Working Directory.\nman pwd\rpwd - print name of current/working directory\rCAT man cat\rcat - concatenate files and print on the standard output\rLine No. With Blank Lines cat -n FILE\rLine No. Without Blank cat -b FILE\rLS man ls\rls - list directory contents\rFile Details ls -lh\rdrwx------ 9 root root 4.0K Aug 7 22:38 root crw-rw-rw- 1 root tty 5, 0 Aug 7 22:33 /dev/tty brw-rw---- 1 root disk 252, 0 Aug 7 21:30 /dev/vda\rFile type: d directory, - file, l link, c character device, b block device. File permissions: 700, Owner: 7, Group: 0, Other: 0 Hard link count: 9 File owner: root File group: root File size: 4.0K Modification time: Aug 7 22:38 File name: root Major device number: 5/252, identifies the device driver Minor device number: 0, identifies a specific device instance within the same class of devices Only Dirs ls -ld */\rIncluding hidden files\nls -ld .*/ */\rSpecify Dir ls -ld /usr\rType Symbols ls -lF /\r/: directory *: executable file @: symbolic link |: named pipe =: socket Hidden Characters ls ~ | wc -l\rThere are hidden characters \\n in the output of the ls command.\nls ~ | od -c\r0000000 f i l e \\n f o o \\n f o o b a r \\n 0000020\rYou can also use cat -A.\nls ~ | cat -A\rfile$ foo$ foobar$\rFILE Show file type\nman file\rfile — determine file type\rCharacter/Block Device file /dev/tty\r/dev/tty: character special (5/0)\rfile /dev/vda\r/dev/vda: block special (252/0)\rLink File Note the trailing slash.\nfile /bin\r/bin: symbolic link to usr/bin\rfile /bin/\r/bin/: directory\rLESS The more command can only load by pressing Enter, the less command is more powerful because less is more.\nman less\rless - opposite of more\rUSERMOD man usermod\rusermod - modify a user account\rDisable Account Login usermod -s /sbin/nologin kuga\rThis command will change bin/sh to /sbin/nologin in /etc/passwd\nkuga:x:1000:1000::/home/kuga:/sbin/nologin\rGrant User Group The following command will grant the kuga user the sudo user group.\nusermod -aG sudo kuga\rLN man ln\rln - make links between files\rSoft Link go rocks\nDF man df\rdf - report file system disk space usage\rReadable Format df -h\rSpecify File System Type df -h -t ext4\rdf -h -t apfs\rext4 is the file system type of Linux, apfs is the file system type of macOS.\nDU Disk Usage\nman du\rdu - estimate file space usage\rTotal Size of Dir du -sh ~/Downloads\rSort Files - Including Subdirs du -ah ~/Downloads/* | sort -rh | head -n 5\rdu -ah ~/Downloads --max-depth=1 | sort -rh | head -n 10\rSort Files - Excluding Subdirs du -sh ~/Downloads/* | sort -rh | head -n 5\r","date":"2024-08-24","id":22,"permalink":"/en/linux/cmd/common-1/","summary":"\u003ch2 id=\"man\"\u003eMAN\u003c/h2\u003e\n\u003cp\u003eThis command can view different sections of the manual pages.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman man\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\" text-wrap=\"wrap\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman - an interface to the system reference manuals\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThe table below shows the section numbers of the manual followed by the types of pages they contain.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e Executable programs or shell commands\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e System calls \u003cspan class=\"o\"\u003e(\u003c/span\u003efunctions provided by the kernel\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e Library calls \u003cspan class=\"o\"\u003e(\u003c/span\u003efunctions within program libraries\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e Special files \u003cspan class=\"o\"\u003e(\u003c/span\u003eusually found in /dev\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e5\u003c/span\u003e File formats and conventions, e.g. /etc/passwd\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e6\u003c/span\u003e Games\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e7\u003c/span\u003e Miscellaneous \u003cspan class=\"o\"\u003e(\u003c/span\u003eincluding macro packages and conventions\u003cspan class=\"o\"\u003e)\u003c/span\u003e, e.g. man\u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e, groff\u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e8\u003c/span\u003e System administration commands \u003cspan class=\"o\"\u003e(\u003c/span\u003eusually only \u003cspan class=\"k\"\u003efor\u003c/span\u003e root\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e9\u003c/span\u003e Kernel routines \u003cspan class=\"o\"\u003e[\u003c/span\u003eNon standard\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"section\"\u003eSection\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e1\u003c/span\u003e ls/cp/mv\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e2\u003c/span\u003e write/open/close\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e3\u003c/span\u003e printf/malloc/free\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e4\u003c/span\u003e tty/null/random\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e5\u003c/span\u003e passwd/fstab\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e7\u003c/span\u003e man\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e8\u003c/span\u003e ifconfig/iptables/mount\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e9\u003c/span\u003e fork \u003cspan class=\"c1\"\u003e# not work\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"games\"\u003eGames\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003efortune\u003c/code\u003e can randomly display quotes and jokes.\u003c/p\u003e","tags":[],"title":"Commands-1"},{"content":"Sort Sorts lines of text files by default, non-numeric.\nsort - sort lines of text files\rReverse Order sort -r file\rNumeric Sort sort -n file\rSort By Month Month format: Jan, Feb, Mar.\nsort -M file\rSpecify Column Default is separated by (consecutive) spaces or tabs.\nsort -k 1 file\rSpecify Delimiter And Column -k index starts from 1, the 3rd column is the user ID.\nsort -t \u0026#39;:\u0026#39; -k 3 -n /etc/passwd\rIgnore Case sort -f file\rRemove Duplicates sort -u file\rAlias sort - sort lines of text files\rPossible Aliases alias -p\rType External/Internal Command Can view if a command is an internal command, internal commands are compiled into the shell, different from external commands, no subprocess execution is required.\ntype cd\rcd is a shell builtin\rtype ps\rps is hashed (/usr/bin/ps)\rAll Implementations type -a echo\recho is a shell builtin echo is /usr/bin/echo echo is /bin/echo\rCommand Aliases type ll\rll is aliased to `ls -alF\u0026#39;\rtype -a ls\rls is aliased to `ls --color=auto\u0026#39; ls is /usr/bin/ls ls is /bin/ls\rReadlink readlink - print resolved symbolic links or canonical file names\rFinal Link No need to look one by one.\nreadlink -f /bin/vim\r/usr/bin/vim.basic\r","date":"2024-08-24","id":23,"permalink":"/en/linux/cmd/common-2/","summary":"\u003ch2 id=\"sort\"\u003eSort\u003c/h2\u003e\n\u003cp\u003eSorts lines of text files by default, non-numeric.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esort - sort lines of text files\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"reverse-order\"\u003eReverse Order\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esort -r file\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"numeric-sort\"\u003eNumeric Sort\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esort -n file\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"sort-by-month\"\u003eSort By Month\u003c/h3\u003e\n\u003cp\u003eMonth format: \u003ccode\u003eJan\u003c/code\u003e, \u003ccode\u003eFeb\u003c/code\u003e, \u003ccode\u003eMar\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"Commands-2"},{"content":"Introduction Full name Global Regular Expression Print, originated from a Unix editor ed command g/re/p, where g (global) is global matching, re (regular expression) is regular expression, p (print) is print. Therefore, the grep tool is essentially used to globally match regular expressions and print the results.\nman grep\rgrep, egrep, fgrep, rgrep - print lines that match patterns\rAdditionally, egrep, fgrep, and rgrep are respectively equivalent to grep -E, grep -F, and grep -r. These variants have been deprecated, but are still provided for backward compatibility. Moreover, if regular expressions are not used, using the -F option will be faster, because by default, even if no regular expression is used, grep will still treat the pattern as a regular expression.\nRegular Expressions grep defaults to using POSIX regular expressions, divided into the following types based on different options:\nBasic Regular Expressions (BRE): Default mode, POSIX standard, some metacharacters (such as ?, +, {}) require escaping with a backslash \\.\nExtended Regular Expressions (ERE): Used with grep -E or egrep, metacharacters like ?, +, {} can be used directly without escaping.\nPerl-Style Regular Expressions (PCRE): Some grep implementations (such as GNU grep) provide the -P option to enable Perl-style regular expressions.\nNote\nSome grep implementations (such as GNU grep) provide the -P option to enable Perl-style regular expressions.\nCommon Examples Reverse Matching grep -v foo file\rIgnore Case grep -i Foo file\rCount Matching Lines grep -c foo file\rFixed String Matching grep -F foo file\rRecursive Dir Search grep -r foo /path\rMatching File Names grep -l foo *.txt\rNon-Matching File Names grep -rL foo /path\rWith Next N Lines After\ngrep -A 3 foo file\rWith Previous N Lines Before\ngrep -B 3 foo file\rWith Context N Lines Context\ngrep -C 3 foo file\rMatch Multiple Words grep -E \u0026#39;foo|bar\u0026#39; file\rgrep -e \u0026#39;foo\u0026#39; -e \u0026#39;bar\u0026#39; file\rExclude Files in Dir grep foo --exclude=\u0026#34;*.log\u0026#34; /path\rMatch Files in Dir grep foo --include=\u0026#34;*.txt\u0026#34; /path\r","date":"2024-08-24","id":24,"permalink":"/en/linux/cmd/grep/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eFull name \u003cstrong\u003eGlobal Regular Expression Print\u003c/strong\u003e, originated from a Unix editor \u003ccode\u003eed\u003c/code\u003e command \u003ccode\u003eg/re/p\u003c/code\u003e,\nwhere \u003ccode\u003eg\u003c/code\u003e (global) is global matching, \u003ccode\u003ere\u003c/code\u003e (regular expression) is regular expression, \u003ccode\u003ep\u003c/code\u003e (print) is print.\nTherefore, the \u003ccode\u003egrep\u003c/code\u003e tool is essentially used to globally match regular expressions and print the results.\u003c/p\u003e","tags":[],"title":"GREP"},{"content":"Login Information w\r13:46:05 up 3 days, 16:15, 2 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/0 120.231.138.139 13:43 1.00s 0.00s 0.00s w kuga pts/1 120.231.138.139 13:44 53.00s 0.02s 0.02s -bash\rThe commands executed below are all based on the above environment configuration.\nProcess Status PS stands for Process Status.\nman ps\rps - report a snapshot of the current processes.\rStyle Source Prefix Unix AT\u0026amp;T System of Bell Labs - BSD Berkeley Software Distribution None GNU Improved version by GNU Project -- Due to historical reasons, the ps command is mixed with various styles, and sometimes it looks like 💩.\nWithout Any Options ps\rPID TTY TIME CMD 20274 pts/0 00:00:00 bash 20714 pts/0 00:00:00 sleep 20715 pts/0 00:00:00 ps\rWhen no options are added, it will display all processes related to the current terminal. In simple terms, if the TTY of the current terminal is pts/0, it will display all processes with TTY as pts/0. This usually includes Shell processes, any processes started from this terminal (whether in the foreground or background), and the ps command itself. The sleep process above is started by me using the background process method.\nnohup sleep 60 \u0026amp;\rBasic Options Option: a Display all processes related to the terminal, not just the current terminal or current user.\nps a\rPID TTY STAT TIME COMMAND 821 ttyS0 Ss+ 0:00 /sbin/agetty -o -p -- \\u --keep-baud 115200,57600,38400,9600 ttyS0 vt220 845 tty1 Ss+ 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux 23300 pts/0 Ss 0:00 -bash 23393 pts/1 Ss+ 0:00 -bash 23475 pts/0 R+ 0:00 ps a\rThe above result is executed from the pts/0 terminal. You can see that the processes of the terminals ttyS0, tty1, pts/1 associated with the root user are all displayed, and there is no distinction between users. The terminals pts/0, ttyS0, tty1 are all associated with the root user, and the terminal pts/1 is associated with the kuga user.\nOption: u Display process information in a user-friendly format.\nps u\rUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 821 0.0 0.0 5800 1092 ttyS0 Ss+ Aug07 0:00 /sbin/agetty -o -p -- \\u --keep-baud 115200,57600,3 root 845 0.0 0.0 6176 1072 tty1 Ss+ Aug07 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux root 23300 0.0 0.3 8792 5616 pts/0 Ss 13:43 0:00 -bash root 23480 0.0 0.0 10072 1588 pts/0 R+ 14:01 0:00 ps u\rIf this option is only related to the display fields, then its process set should be the same as the ps command without any options. However, the above result shows that, in addition to the processes of the self terminal pts/0, it also displays the processes of other terminals, but it does not display the terminal process of pts/1 (user is kuga).\nIt can be concluded simply that the process set of the u option is: all processes related to the current user terminal. The above is all the terminal processes related to the root user. If you execute ps u in the kuga user\u0026rsquo;s terminal, you can get the following result, which is completely in line with expectations.\nps u\rUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND kuga 23393 0.0 0.3 8660 5452 pts/1 Ss 13:44 0:00 -bash kuga 23496 0.0 0.0 10072 1608 pts/1 R+ 14:22 0:00 ps u\rIn addition, the definition of this process set is not unique to the u option, it is related to the BSD style.\nOption: x Display all processes belonging to the current user.\nps x\rPID TTY STAT TIME COMMAND 23330 ? Ss 0:00 /lib/systemd/systemd --user 23331 ? S 0:00 (sd-pam) 23392 ? R 0:00 sshd: kuga@pts/1 23393 pts/1 Ss 0:00 -bash 23719 pts/1 R+ 0:00 ps x\rThe above result is executed in the kuga user\u0026rsquo;s terminal, so the number of processes will not be too many.\nOption: -e Obviously all processes.\nman ps | grep \u0026#34;\\-e \u0026#34;\r-e Select all processes. Identical to -A.\rOption: -f Display process information in full format, can be used in combination with other UNIX-style options.\nman ps | grep \u0026#34;\\-f \u0026#34;\r-f Do full-format listing. This option can be combined with many other UNIX-style options to add\rps -f\rUID PID PPID C STIME TTY TIME CMD root 23300 23163 0 13:43 pts/0 00:00:00 -bash root 24317 23300 0 16:53 pts/0 00:00:00 ps -f\rOption: -o Customize the output fields, cannot be used in combination with the -f and u options.\nps -o uid,user,pid,%cpu,%mem,cmd\rUID USER PID %CPU %MEM CMD 0 root 23300 0.0 0.3 -bash 0 root 24311 0.0 0.0 ps -o uid,user,pid,%cpu,%mem,cmd\rNote that the uid here is different from the one displayed using the -f option, here it is a numeric ID, but the -f option will display the username.\nOption: -p Specify the process PID.\nps up 1\rUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.7 167696 13328 ? Ss Aug07 0:08 /lib/systemd/systemd --system --deserialize 36 noib\rOption: \u0026ndash;forest Display the tree structure of processes and child processes in ASCII.\nman ps | grep -A 1 \u0026#34;\\--forest\u0026#34;\r--forest ASCII art process tree.\rps -o pid,ppid,cmd --forest\rPID PPID CMD 23300 23163 -bash 24537 23300 \\_ ps -o pid,ppid,cmd --forest\rProcess Sets Different styles of options have different process sets, but as long as you observe carefully, you can still find some rules.\nps: Without adding any options\nps\rPID TTY TIME CMD 2090 pts/0 00:00:00 bash 2261 pts/0 00:00:00 ps\rps -l: Unix style, -l means to display in long format.\nps -l\rF S UID PID PPID C PRI NI ADDR SZ WCHAN TTY TIME CMD 4 S 0 2090 2034 0 80 0 - 2198 do_wai pts/0 00:00:00 bash 4 R 0 2262 2090 0 80 0 - 2518 - pts/0 00:00:00 ps\rps l: BSD style, l means to display in BSD long format.\nps l\rF UID PID PPID PRI NI VSZ RSS WCHAN STAT TTY TIME COMMAND 4 0 760 1 20 0 5800 1160 do_sel Ss+ ttyS0 0:00 /sbin/agetty -o -p -- \\u --keep-baud 115200,57600,38400,9600 ttyS0 vt220 4 0 779 1 20 0 6176 1108 do_sel Ss+ tty1 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux 4 0 2090 2034 20 0 8792 5492 do_wai Ss pts/0 0:00 -bash 4 0 2298 2090 20 0 10072 1608 - R+ pts/0 0:00 ps l\rps --forest: GNU style, --forest means to display in process tree.\nps --forest\rPID TTY TIME CMD 2090 pts/0 00:00:00 bash 2316 pts/0 00:00:00 \\_ ps\rIn the above example, the options used are not related to the process set, and you can summarize the following rules:\nStyle Process Set None Display all processes related to the current terminal Unix Consistent with not adding options BSD Display all processes related to the current user terminal GNU Consistent with not adding options Obviously, Unix and GNU styles seem more logical, because their process sets are the same as when no options are added to the ps command, but the BSD style is playing its own game, including all processes related to the other terminals of the current user. Different styles of options can be used together, but if two options both specify the display format, the execution will fail. In addition, if multiple styles contain BSD style, but the process set is not specified in the options, then the BSD process set will be used by default.\nCommon Functions List User Processes ps -fu kuga\rList All Processes ps -ef\rThe -e option displays all processes, and the -f option displays in full format, there is nothing special to say.\nps aux\rStrangely, the process set of aux is different from the above analysis. From the above analysis, we know:\na: Display all processes related to the terminal, not just the current terminal or current user. x: Display all processes belonging to the current user. Obviously, the sum of ax is only all processes of the current user and all processes of the other terminals of the current user, but if you look at the official documentation.\na ... or to list all processes when used together with the x option. x ... or to list all processes when used together with the a option.\rWhen ax is used together, it represents all processes, and we can also verify the number of processes.\nps aux | wc -l\rps -ef | ec -l\rYou can see that the number of process sets of aux and -ef is the same, I am very detailed, I am talking about the number 🤪.\nRank by Memory Usage go rocks\nSpecial Fields VSZ Virtual Memory Size, in KB.\nRSS Resident Set Size, in KB.\nTTY The terminal associated with the process. If the process is associated with a certain terminal, it will display the name of the terminal; if it is not associated with a terminal, it will display ?.\nSTAT The process status code. Common status codes include:\nR: Running. S: Sleeping, waiting for an event to complete. D: Uninterruptible sleep, usually waiting for I/O. T: Stopped or traced. Z: Zombie process, the process has terminated but has not been cleaned up by the parent process. I: Idle kernel thread. Ss: The main process is in sleep state. R+: Running process, and displayed in the foreground. go rocks, need to understand different process states in depth\nSTART The time or date the process started. For a new process, it displays the time, and for an old process, it displays the date.\nTIME The cumulative CPU time the process has used, indicating how much CPU time the process has occupied in total.\nC The CPU usage of the process. This field displays the cumulative usage percentage of CPU time since the process started.\n","date":"2024-08-24","id":25,"permalink":"/en/linux/cmd/ps/","summary":"\u003ch2 id=\"login-information\"\u003eLogin Information\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ew\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e 13:46:05 up \u003cspan class=\"m\"\u003e3\u003c/span\u003e days, 16:15,  \u003cspan class=\"m\"\u003e2\u003c/span\u003e users,  load average: 0.00, 0.00, 0.00\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eroot     pts/0    120.231.138.139  13:43    1.00s  0.00s  0.00s w\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ekuga     pts/1    120.231.138.139  13:44   53.00s  0.02s  0.02s -bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThe commands executed below are all based on the above environment configuration.\u003c/p\u003e","tags":[],"title":"PS"},{"content":"Introduction man top\rtop - display Linux processes\rThe top command defaults to sorting processes by CPU usage rate and dynamically displaying the results.\ntop - 09:19:05 up 6 days, 10:02, 2 users, load average: 0.13, 0.05, 0.01 Tasks: 126 total, 1 running, 125 sleeping, 0 stopped, 0 zombie %Cpu(s): 0.5 us, 0.0 sy, 0.0 ni, 99.5 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st MiB Mem : 1673.0 total, 252.3 free, 299.5 used, 1121.3 buff/cache MiB Swap: 0.0 total, 0.0 free, 0.0 used. 1197.7 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 988 root 20 0 90428 14260 11860 S 0.7 0.8 58:31.33 AliYunDun 1008 root 20 0 139912 36880 18280 S 0.7 2.2 99:59.21 AliYunDunMonito 39433 root 20 0 10508 3912 3304 R 0.3 0.2 0:00.03 top 1 root 20 0 167744 13388 8416 S 0.0 0.8 0:07.59 systemd\rHeader Information System Information top - 09:19:05 up 6 days, 10:02, 2 users, load average: 0.13, 0.05, 0.01\rCurrent system time: 09:19:05 System running time: 6 days 10 hours 2 minutes Current logged in users: 2 System average load: 1 minute, 5 minutes, 15 minutes Process Summary Tasks: 126 total, 1 running, 125 sleeping, 0 stopped, 0 zombie\rTotal number of processes: 126 Number of running processes: 1 Number of sleeping processes: 125 Number of stopped processes: 0 Number of zombie processes: 0 CPU Usage %Cpu(s): 0.5 us, 0.0 sy, 0.0 ni, 99.5 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st\rCPU usage of user processes: 0.5, user CPU usage of system processes: 0.0, system CPU usage of processes with nice value: 0.0 Idle CPU usage: 99.5, idle CPU usage of processes waiting for IO: 0.0, wait CPU usage of handling hardware interrupts: 0.0, hardware interrupts CPU usage of handling software interrupts: 0.0, software interrupts CPU usage of CPU stolen by virtualization programs: 0.0, stolen Memory Usage MiB Mem : 1673.0 total, 252.3 free, 299.5 used, 1121.3 buff/cache\rUnit: MiB, Million Byte Total: 1673.0 MB Free: 252.3 MB Used: 299.5 MB Cache: 1121.3 MB Swap Usage MiB Swap: 0.0 total, 0.0 free, 0.0 used. 1197.7 avail Mem\rTotal: 0.0 Free: 0.0 Used: 0.0 Available: 1197.7 MB (buff/cache) A total of 0 may be due to the lack of swap space. You can use the following command to check.\nswapon --show\rIf there is no output, it means that no swap space is configured.\nField Management Mode Press f or Shift + f to enter the field management mode.\nFields Management for window 1:Def, whose current sort field is %CPU Navigate with Up/Dn, Right selects for move then \u0026lt;Enter\u0026gt; or Left commits, \u0026#39;d\u0026#39; or \u0026lt;Space\u0026gt; toggles display, \u0026#39;s\u0026#39; sets sort. Use \u0026#39;q\u0026#39; or \u0026lt;Esc\u0026gt; to end!\rwindow 1:Def The window number is 1, and the default (Default) field configuration is used.\nFields Display Order Select the field that needs to be moved by pressing the right arrow key, move up and down, and then press Enter or the left arrow key to commit.\nFields Display Switch After selecting the field, press d or the space key.\nCurrent Sorting Field After selecting the field, press the s key, which only takes effect in the current session.\nOther Fields go rocks\nMulti-Window Mode Press Shift + A, and 4 top windows will appear. The name of the window will be displayed in the upper left corner. Each window displays different fields and sorts in different ways, and can be modified through the field management mode.\nCommon Operations Return to single window mode: Shift + A Select the next window: a key. Select the previous window: w key. Select a specific window: g key, select 1-4 . Modify the window name: Shift + G, enter 1-3 characters. Enter the field management mode: Shift + F. Common Windows 1:Def：Number 1, sorted in reverse order by %CPU. 2:Job：Number 2, sorted in reverse order by PID. 3:Mem：Number 3, sorted in reverse order by %Mem. 4:Usr：Number 4, sorted in reverse order by USER. Personalized Window Color Press Shift + Z to enter the color configuration mode. The following is written clearly.\nHelp for color mapping - \u0026#34;Current Window\u0026#34; = 1:Def color - 04:25:44 up 8 days, 50 min, 7 users, load average: Tasks: 64 total, 2 running, 62 sleeping, 0 stopped, %Cpu(s): 76.5 user, 11.2 system, 0.0 nice, 12.3 idle Nasty Message! -or- Input Prompt PID TTY PR NI %CPU TIME+ VIRT SWAP S COMMAND 17284 pts/2 8 0 0.0 0:00.75 1380 0 S /bin/bash 8601 pts/1 7 -10 0.4 0:00.03 916 0 R color -b -z 11005 ? 9 0 0.0 0:02.50 2852 1008 S amor -sessi available toggles: B =disable bold globally (Off), z =color/mono (On), b =tasks \u0026#34;bold\u0026#34;/reverse (On) 1) Select a target as an upper case letter, current target is T : S = Summary Data, M = Messages/Prompts, H = Column Heads, T = Task Information 2) Select a color as a number or use the up/down arrow keys to raise/lower the 256 colors value, current color is 1 : 0 = black, 1 = red, 2 = green, 3 = yellow, 4 = blue, 5 = magenta, 6 = cyan, 7 = white 3) Then use these keys when finished: \u0026#39;q\u0026#39; or \u0026lt;Esc\u0026gt; to abort changes to window \u0026#39;1:Def\u0026#39; \u0026#39;a\u0026#39; or \u0026#39;w\u0026#39; to commit \u0026amp; change another, \u0026lt;Enter\u0026gt; to commit and end\rYou can modify the configuration of different windows (1:Def) by pressing a or w to select. Available switches: Shift + B, z, b. You can modify the colors of 4 parts, Shift + S/M/H/T. The modified color can be entered as a number or selected using the up and down keys. Press q or Esc to cancel the configuration, and Enter to submit the configuration. After exiting the color mode, if you want to persist the configuration, you need to press Shift + W, and the file save path is:\n~/.config/procps/toprc\rNote that if you save in multi-window mode, it will also be in multi-window mode when you open it next time.\nCommon Shortcuts Some shortcuts will also modify the properties of the current top command session window.\nh：Display the help menu, listing all available commands. 0：Toggle display/hide of fields with a value of 0. 1：Toggle display of CPU core usage. k：Terminate a process, enter the PID. r：Adjust the priority of the process (renice). z：Toggle color display mode. x：Highlight the column currently sorted. c：Toggle display/hide of the command line. n：Change the number of processes displayed, enter the number of processes to display. Shift + W：Save the current configuration. Shift + Z：Enter the color mode. Shift + P：Sort by CPU usage rate. Shift + M：Sort by memory usage rate. Shift + N：Sort by PID. Shift + T：Sort by process running time. Special Fields PR Priority.\nNI Nice Value.\nVIRT Virtual Image (KiB).\nRES Resident Size (KiB).\nSHR Shared memory size.\nS Process status, refer to PS command.\nTIME+ CPU Time, hundredths, the total CPU time occupied by the process after startup.\n","date":"2024-08-24","id":26,"permalink":"/en/linux/cmd/top/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman top\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etop - display Linux processes\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThe top command defaults to sorting processes by \u003cstrong\u003eCPU usage rate\u003c/strong\u003e and dynamically displaying the results.\u003c/p\u003e","tags":[],"title":"Top"},{"content":"Kill Command It\u0026rsquo;s actually a tool for sending signals to processes, not necessarily killing them.\nman kill\rkill - send a signal to a process\rDefault Signal The default signal for the kill command is SIGTERM, corresponding to number 15, for a graceful termination.\nAvailable Signals kill -l\r1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM ......\rkill -l 9 15\rKILL TERM\rSpecify Signal Type kill -s SIGKILL \u0026lt;PID\u0026gt;\rkill -9 \u0026lt;PID\u0026gt;\rMultiple Processes kill -15 \u0026lt;PID\u0026gt; \u0026lt;PID\u0026gt; \u0026lt;PID\u0026gt;\rSpecial Process Number The process number -1 represents all processes, and the following command will terminate all processes that you (the current user) can terminate.\nDanger\nDo not execute in the root user\nkill -9 -1\rIf I want to execute as the kuga user, I can first view the processes of that user as the root user.\nps -fu kuga\rUID PID PPID C STIME TTY TIME CMD kuga 42994 1 0 14:13 ? 00:00:00 /lib/systemd/systemd --user kuga 42995 42994 0 14:13 ? 00:00:00 (sd-pam) kuga 43056 42991 0 14:13 ? 00:00:00 sshd: kuga@pts/0 kuga 43057 43056 0 14:13 pts/0 00:00:00 -bash\rThen, execute the command kill -9 -1 in the kuga terminal.\nConnection to x.x.x.x closed by remote host. Connection to x.x.x.x closed.\rThis will immediately disconnect, and viewing the kuga user processes on root will find that they are all gone.\nPkill Command It sends signals to processes based on their names.\nman pkill\rsignal for processes based on name and other attributes\rDefault Signal The default signal for the pkill command is SIGTERM, corresponding to number 15, for a graceful termination.\nSpecify Signal Type pkill -SIGKILL bash\rpkill -9 bash\rSpecify User Processes pkill -u kuga\rpkill -9 -u kuga bash\rPrecision Process Name pkill -x sshd\rPgrep It looks up process IDs based on process names.\nman pgrep\rlook up for processes based on name and other attributes Ignore Case pgrep -i BASH\rSpecify User Processes pgrep -u kuga\r44087 44088 44149 44150\rProcess IDs and Names Without -l, it will only display the process ID.\npgrep -l bash\r42977 bash 44150 bash\rNumber of Matching Processes pgrep -c bash\r2\rSpecify Parent PID pgrep -P 1729\r42912 44084\rRecently Started Processes pgrep -n -l\rpgrep -n bash -l\rEarliest Started Processes pgrep -o -l\r1 systemd\rPrecision Process Name pgrep -x sshd\rCommon Signals SIGTERM - 15 Requests the process to terminate. This signal is \u0026ldquo;friendly\u0026rdquo; and allows the process to perform cleanup before exiting. It is the default signal for kill and pkill commands. Usually used for a graceful termination of processes, giving them time to handle unfinished tasks.\nSIGKILL - 9 Forces the process to terminate. This signal cannot be caught, blocked, or ignored, and the process will be immediately terminated. Sending SIGKILL will directly stop the process without allowing it to perform any cleanup operations. Used for processes that cannot be normally terminated, when SIGTERM is ineffective.\nSIGINT - 2 Interrupt signal, usually sent by the user through Ctrl+C, used to interrupt foreground running processes. Used for manually interrupting processes, especially interactive processes.\nSIGQUIT - 3 Quit signal, usually sent by the user through Ctrl+\\, indicating that the process should generate a core dump and exit. Used for debugging, when you want the process to generate a core dump for analysis.\nSIGHUP - 1 Hangup signal, usually indicating that the terminal or console connection has been disconnected. Many daemon processes will reload their configuration files when they receive the SIGHUP signal. Used for reloading the configuration of daemon processes or causing them to restart.\n","date":"2024-08-24","id":27,"permalink":"/en/linux/cmd/terminate/","summary":"\u003ch2 id=\"kill-command\"\u003eKill Command\u003c/h2\u003e\n\u003cp\u003eIt\u0026rsquo;s actually a tool for sending signals to processes, not necessarily killing them.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman kill\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ekill\u003c/span\u003e - send a signal to a process\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"default-signal\"\u003eDefault Signal\u003c/h3\u003e\n\u003cp\u003eThe default signal for the \u003ccode\u003ekill\u003c/code\u003e command is \u003ccode\u003eSIGTERM\u003c/code\u003e, corresponding to number \u003ccode\u003e15\u003c/code\u003e, for a graceful termination.\u003c/p\u003e","tags":[],"title":"Terminate Processes"},{"content":"todorocks\n","date":"2024-08-24","id":28,"permalink":"/en/linux/cmd/compression/","summary":"\u003cp\u003etodorocks\u003c/p\u003e","tags":[],"title":"Compression"},{"content":"Origins The environment variables in Linux originated from the design requirements of early UNIX systems. Through environment variables, users and processes can dynamically influence system behavior without modifying the system\u0026rsquo;s core code. This flexibility and configurability make environment variables a key part of Linux system and application configurations.\nIn UNIX, each process has its own environment (i.e., a set of environment variables), which are passed from the parent process to the child process at startup. The most typical example is when a user logs into the system, the Shell process started by the system inherits a set of default environment variables, such as the user\u0026rsquo;s home directory, Shell type, etc. Users can modify or add environment variables based on this, affecting the behavior of programs or processes they start.\nConcept Corrections Some books and articles may divide environment variables into global environment variables and local environment variables, but this classification is inaccurate, because there is no definition of these two categories in official documentation, not even in English names. Therefore, to avoid logical problems in semantics, this article will not classify environment variables as above.\n《Linux Command Line and Shell Scripting Bible》\nThe section on environment variables in this book is problematic, not a translation issue, but the original version has problems.\nPrinting Env Vars Command: printenv Without arguments, it prints all environment variables.\nprintenv | head -n 3\rSHELL=/bin/bash PWD=/home/kuga LOGNAME=kuga\rPrints a specific environment variable.\nprintenv PATH\r/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\rCommand: env Without arguments, it prints all environment variables.\nenv | head -n 3\rSHELL=/bin/bash PWD=/home/kuga LOGNAME=kuga\rCommand: echo Prints a specified variable, which can be an environment variable or a Shell variable.\necho $HOME\r/home/kuga\rCustomizing Shell Vars Defines a Shell variable named soda with the value green.\nsoda=green\recho $soda\rgreen\rprintenv printenv soda\rOutputs nothing, because soda is not an environment variable, it\u0026rsquo;s just a Shell variable.\nCommand Group (echo $soda)\rgreen\rModify in Command Group (soda=yellow; echo $soda); echo $soda\ryellow green\rSubshell modifications do not affect external data.\nCreating a Bash Instance bash\recho $soda\rOutputs nothing, which is the basic scope of a regular Shell variable.\nCustomizing Env Vars Environment variables can be created by exporting Shell variables using the export command, as defined in the official manual.\nMark each name to be passed to child processes in the environment.\rTranslation: Mark the variable name to be passed to child processes in the environment.\rVariables can be defined and exported simultaneously, or separately.\nexport soda=green\rsoda=green; export soda;\rprintenv After being converted to an environment variable, printenv can normally print it.\nprintenv soda\rgreen\rCommand Group (printenv soda)\rgreen\rModify in Command Group (soda=yellow; echo $soda); echo $soda\ryellow green\rSimilarly, modifying environment variables within a subshell does not affect external data.\nCreating a Bash Instance bash -c \u0026#34;printenv soda\u0026#34;\rgreen\rEnvironment variables are accessible in a new Bash instance.\nGet All Export Variables Without arguments, or using -p, all export variables can be printed.\nexport\rexport | grep soda\rdeclare -x soda=\u0026#34;green\u0026#34;\rCancel Export Env Vars Using the -n option can cancel export, making it a regular Shell variable again.\nexport -n soda\rprintenv soda; echo $soda\rprintenv has no output, echo outputs normally, because soda is no longer an environment variable.\nDeleting Variables Below will delete the entire variable, whether it\u0026rsquo;s an environment variable or a Shell variable.\nunset soda\recho $soda\rCommand: declare Used to declare variables and attributes. If no names are given, then display the values of variables instead.\nDeclare variables and give them attributes. If no names are given, then display the values of variables instead.\rCommon parameters:\n-i：Declares the variable as an integer. -r：Declares the variable as read-only. -x：Exports the variable as an environment variable. -p：Displays the declaration and current value of the variable. Without Arguments The effect is the same as a regular Shell variable.\ndeclare soda=\u0026#34;green\u0026#34;\recho $soda\rDisplay Var Declaration declare -p soda\rdeclare -- soda=\u0026#34;green\u0026#34;\rDisplay All Vars Declaration declare -p\rDeclare Env Vars declare -x soda=\u0026#34;green\u0026#34;\rprintenv soda\rgreen\rThe definition of soda can also be seen in export.\nexport | grep soda\rDiff Between -x and \u0026ndash; It\u0026rsquo;s not hard to see that the declaration symbols can be used to distinguish different types of variables.\n-x：Declaration of environment variables. --：Declaration of regular Shell variables. declare -p soda\rdeclare -x soda=\u0026#34;green\u0026#34;\rAfter canceling export.\nexport -n soda\rdeclare -p soda\rdeclare -- soda=\u0026#34;green\u0026#34;\rBuilt-in Cmd Manual Some built-in commands cannot be viewed using man, but can be viewed using the help command or the --help option.\nexport type -a export\rexport is a shell builtin\rhelp export\rexport --help\rdeclare Same as above\nunset Same as above\n","date":"2024-08-24","id":29,"permalink":"/en/linux/env/concept/","summary":"\u003ch2 id=\"origins\"\u003eOrigins\u003c/h2\u003e\n\u003cp\u003eThe environment variables in Linux originated from the design requirements of early UNIX systems.\nThrough environment variables, users and processes can dynamically influence system behavior without modifying the system\u0026rsquo;s core code.\nThis flexibility and configurability make environment variables a key part of Linux system and application configurations.\u003c/p\u003e","tags":[],"title":"Concept"},{"content":"Startup Methods The startup methods of Shell will affect the loading process of environment variables, which can be divided into the following categories.\nInteractive (Interactive) Login: Shell instances started in login mode, such as SSH login. Non-login: Creating a new Shell instance by typing Bash in the Shell. Opening a new terminal session in GNOME Terminal. Non-Interactive (Non-Interactive) Shell instances started in scripts. Interactive Shell What is an Interactive Shell\rOfficial Documentation\nAn interactive shell is one started without non-option arguments (unless -s is specified) and without specifying the -c option, whose input and error output are both connected to terminals (as determined by isatty(3)), or one started with the -i option. An interactive shell generally reads from and writes to a user’s terminal. The -s invocation option may be used to set the positional parameters when an interactive shell is started.\rAn interactive shell is a shell that is started without non-option arguments (unless the -s option is specified) and without specifying the -c option, whose input and error output are both connected to terminals (as determined by isatty(3)), or a shell started with the -i option. An interactive shell generally reads from and writes to a user’s terminal. The -s invocation option can be used to set the positional parameters when an interactive shell is started.\rInteractive Login In Ubuntu, the file loading process is roughly as follows when using SSH to login.\n/etc/profile: Entry File - A, executed by all users. /etc/bash.bashrc: Global environment configuration file, A loads this file. /etc/profile.d: Global environment configuration directory, A loads all files in this directory. ~/.profile: User environment configuration entry file - B. ~/.bashrc: User environment configuration file, B loads this file. rc(Run Commands), originating from Unix tradition.\n/etc/profile system-wide: System-wide configuration file.\n# /etc/profile: system-wide .profile file for the Bourne shell (sh(1)) # and Bourne compatible shells (bash(1), ksh(1), ash(1), ...). # Check if the prompt variable PS1 is set if [ \u0026#34;${PS1-}\u0026#34; ]; then # Check if the BASH variable is set and its value is not /bin/sh if [ \u0026#34;${BASH-}\u0026#34; ] \u0026amp;\u0026amp; [ \u0026#34;$BASH\u0026#34; != \u0026#34;/bin/sh\u0026#34; ]; then # The file bash.bashrc already sets the default PS1. # PS1=\u0026#39;\\h:\\w\\$ \u0026#39; # If the bash.bashrc file exists, load it if [ -f /etc/bash.bashrc ]; then . /etc/bash.bashrc fi else # Is the current user\u0026#39;s id equal to 0 (root) if [ \u0026#34;$(id -u)\u0026#34; -eq 0 ]; then # Set the prompt for root to # PS1=\u0026#39;# \u0026#39; else # Set the prompt for ordinary users to $ PS1=\u0026#39;$ \u0026#39; fi fi fi # Check if the profile.d directory exists if [ -d /etc/profile.d ]; then # Iterate through all sh files in the directory for i in /etc/profile.d/*.sh; do # If the file is readable, load it if [ -r $i ]; then . $i fi done unset i fi\r/etc/bash.bashrc The file content is a bit long, just look at a few lines of comments.\n# System-wide .bashrc file for interactive bash(1) shells. # To enable the settings / commands in this file for login shells as well, # this file has to be sourced in /etc/profile. # If not running interactively, don\u0026#39;t do anything [ -z \u0026#34;$PS1\u0026#34; ] \u0026amp;\u0026amp; return\rIf not interactive (PS1 variable not set), exit directly.\n/etc/profile.d Just take a look at the files in the directory.\nls -l /etc/profile.d\rtotal 24 -rw-r--r-- 1 root root 96 Oct 15 2021 01-locale-fix.sh -rw-r--r-- 1 root root 835 Apr 8 2022 apps-bin-path.sh -rw-r--r-- 1 root root 726 Nov 16 2021 bash_completion.sh -rw-r--r-- 1 root root 1107 Mar 23 2022 gawk.csh -rw-r--r-- 1 root root 757 Mar 23 2022 gawk.sh -rw-r--r-- 1 root root 1557 Feb 17 2020 Z97-byobu.sh\r~/.profile This file will load the ~/.bashrc file we commonly use.\n# ~/.profile: executed by the command interpreter for login shells. # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login # exists. # see /usr/share/doc/bash/examples/startup-files for examples. # the files are located in the bash-doc package. # the default umask is set in /etc/profile; for setting the umask # for ssh logins, install and configure the libpam-umask package. #umask 022 # if running bash if [ -n \u0026#34;$BASH_VERSION\u0026#34; ]; then # include .bashrc if it exists if [ -f \u0026#34;$HOME/.bashrc\u0026#34; ]; then . \u0026#34;$HOME/.bashrc\u0026#34; fi fi # set PATH so it includes user\u0026#39;s private bin if it exists if [ -d \u0026#34;$HOME/bin\u0026#34; ] ; then PATH=\u0026#34;$HOME/bin:$PATH\u0026#34; fi # set PATH so it includes user\u0026#39;s private bin if it exists if [ -d \u0026#34;$HOME/.local/bin\u0026#34; ] ; then PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34; fi\rLooking at the header comments, you can know that if ~/.bash_profile and ~/.bash_login exist, ~/.profile will not be loaded, and the file loading order is as follows.\nbash_profile \u0026gt; bash_login \u0026gt; profile\r~/.bashrc Let\u0026rsquo;s analyze the header just below.\n# ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac\rLooking at the first line of comments, this file is executed by non-login Shell. As mentioned earlier, ~/.profile also loads this file, which means both login and non-login Shell use this file.\nLet\u0026rsquo;s analyze these magical codes (it\u0026rsquo;s really a genius design🤪):\n# If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac\r$- is a special variable that represents the options enabled when the Shell runs, which can be printed out.\necho $-\rhimBHs\r*i* is a matching condition: whether $- contains i. i option indicates that the current Shell is interactive. If the match is successful, it will exit the case. If the match fails, it will execute return, exiting the script. In summary: if not running interactively, exit directly, do nothing.\nInteractive Non-Login Here we discuss non-login cases. For example:\nCreating a new Shell instance by typing Bash in the Shell. Subshell generated by executing command groups using (). Opening a new terminal session in GNOME Terminal. One sentence summary: does not load /etc/profile, only loads ~/.bashrc.\nNon-Interactive This method does not have a command line prompt and does not load any configuration files, even if you manually load ~/.bashrc, it will not take effect. Because the analysis above mentions that in non-interactive mode, it will directly exit, do nothing.\n# If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac\rOf course, you can use the BASH_ENV variable to set the file to load, as explained below.\nIf this variable is set when Bash is invoked to execute a shell script, its value is expanded and used as the name of a startup file to read before executing the script. See Bash Startup Files.\rPersistence of Env Vars You only need to write the environment variables in the corresponding files, such as ~/.bashrc.\necho \u0026#39;export MY_VARIABLE=\u0026#34;my_value\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc\rsource ~/.bashrc\r","date":"2024-08-27","id":30,"permalink":"/en/linux/env/shell-startup/","summary":"\u003ch2 id=\"startup-methods\"\u003eStartup Methods\u003c/h2\u003e\n\u003cp\u003eThe startup methods of Shell will affect the loading process of environment variables, which can be divided into the following categories.\u003c/p\u003e","tags":[],"title":"Shell Startup Process"},{"content":"SHELL The current shell in use.\nprintenv SHELL\r/bin/bash\rHOME The path to the user\u0026rsquo;s home directory.\nprintenv HOME\r/home/kuga\rPWD The path to the current directory.\nprintenv PWD\r/home/kuga\rUSER The current user.\nprintenv USER\rkuga\rPATH The path where executable programs are searched, separated by colons.\nprintenv PATH\r/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\rSHLVL The level of the shell, starting from 1.\nprintenv SHLVL\r1\r","date":"2024-08-27","id":31,"permalink":"/en/linux/env/variables/","summary":"\u003ch2 id=\"shell\"\u003eSHELL\u003c/h2\u003e\n\u003cp\u003eThe current shell in use.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprintenv SHELL\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"home\"\u003eHOME\u003c/h2\u003e\n\u003cp\u003eThe path to the user\u0026rsquo;s home directory.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprintenv HOME\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/home/kuga\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"pwd\"\u003ePWD\u003c/h2\u003e\n\u003cp\u003eThe path to the current directory.\u003c/p\u003e","tags":[],"title":"Environment Variables"},{"content":"Introduction Shebang is a special symbol in Unix and Unix-like operating systems, composed of the characters #!, used to indicate which interpreter should execute a script file. It usually appears at the beginning of a script file, followed by the path of the interpreter. Shebang allows script files to be run directly like executable programs, without manually calling the interpreter.\nOrigin of the Name # in English represents hash or sharp, ! in programming and command lines represents bang, and the combination of these two symbols is called hash-bang or sharp-bang. Over time, hash-bang was simplified to shebang.\nSpecifying the Interpreter The path specified after Shebang is the location of the interpreter, such as:\n#!/bin/bash\rThe system will use the bash under this path to execute the script content.\nUnified Execution Form Scripts of different types can be uniformly executed using the form ./file, without explicitly calling the interpreter.\n#!/bin/bash\rNo need to use bash file to execute, directly use ./file.\n#!/bin/python3\rNo need to use python file to execute, directly use ./file.\nCommon Examples We often see the following examples in bash scripts.\n#!/usr/bin/env bash\renv is a command related to environment variables. When the argument following it is bash, it will search for the bash interpreter based on the path provided by the environment variable PATH. The advantage of doing this is that there is no need to hard-code the path of the bash interpreter, because the bash interpreter may be in different locations in different systems.\ntype -a bash\rbash is /usr/bin/bash bash is /bin/bash\rFor the above python example, a better Shebang is to use env.\n#!/usr/bin/env python\rManual Invocation If there is no Shebang, the interpreter can be manually called.\nbash script.sh\r","date":"2024-08-27","id":32,"permalink":"/en/linux/env/shebang/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eShebang is a special symbol in Unix and Unix-like operating systems, composed of the characters \u003ccode\u003e#!\u003c/code\u003e, used to indicate which interpreter should execute a script file. It usually appears at the beginning of a script file, followed by the path of the interpreter.\nShebang allows script files to be run directly like executable programs, without manually calling the interpreter.\u003c/p\u003e","tags":[],"title":"Shebang"},{"content":"User Account /etc/passwd Linux uses the /etc/passwd file to store user account information. Because many service processes need to read user account information, you can see that the file\u0026rsquo;s permissions are all readable.\n-rw-r--r-- 1 root root 2010 Aug 24 15:12 /etc/passwd\rView the account information of a user.\ngrep kuga /etc/passwd\rkuga:x:1000:1000:,,,:/home/kuga:/bin/bash\rKEY VALUE Username kuga User Password x User ID 1000 User Group ID 1000 Remark Field ,,, Directory Location /home/kuga Default Shell /bin/bash The system will reserve a certain range of UID, and the new user ID added to Ubuntu starts from 1000. The following command will sort by the third field UID in reverse order, then output the first 10 lines, and only display 136 fields (username, UID, directory location).\nsort -t \u0026#39;:\u0026#39; -k 3 -nr /etc/passwd | cut -d \u0026#39;:\u0026#39; -f1,3,6 | head -n 10\rnobody:65534:/nonexistent soda:1001:/home/soda kuga:1000:/home/kuga lxd:999:/var/snap/lxd/common/lxd ecs-instance-connect:998:/home/ecs-instance-connect fwupd-refresh:115:/run/systemd _chrony:114:/var/lib/chrony usbmux:112:/var/lib/usbmux landscape:111:/var/lib/landscape tss:110:/var/lib/tpm\r/etc/shadow For historical reasons, the early user passwords were stored in /etc/passwd, so the file name is passwd. Later, because passwords are easy to crack, the current passwords have been moved to the new file /etc/shadow. This file is only readable by root and shadow group.\n-rw-r----- 1 root shadow 1255 Aug 24 15:08 /etc/shadow\rYou can roughly look at the contents of this file.\nroot:*:19955:0:99999:7::: daemon:*:19103:0:99999:7::: bin:*:19103:0:99999:7::: sys:*:19103:0:99999:7::: sync:*:19103:0:99999:7:::\rThese fields are generally related to password management (such as how many days must be changed), which is not expanded here.\nUseradd HOME Directory By default, the user directory is not created.\nuseradd foo\rUse the -m parameter to create the user directory.\nuseradd -m foo\rUse the -M parameter to not create the user directory.\nuseradd -M foo\rDefault Configuration Use the -D option to view the default configuration used when adding a user.\nuseradd -D\rGROUP=100 HOME=/home INACTIVE=-1 EXPIRE= SHELL=/bin/sh SKEL=/etc/skel CREATE_MAIL_SPOOL=no\rGROUP: User default group ID. HOME: User directory location. INACTIVE: Number of days to disable the account after the password expires. EXPIRE: Account expiration date. SHELL: Default login Shell used. SKEL: Skeletal, the contents of this directory will be copied to the user\u0026rsquo;s home directory. CREATE_MAIL_SPOOL: Whether to create a mail storage file. /etc/default/useradd The default configuration file for the useradd command.\n-rw-r--r-- 1 root root 1118 Aug 28 10:58 /etc/default/useradd\rcat /etc/default/useradd | head -n 20\r# Default values for useradd(8) # # The SHELL variable specifies the default login shell on your # system. # Similar to DSHELL in adduser. However, we use \u0026#34;sh\u0026#34; here because # useradd is a low level utility and should be as general # as possible SHELL=/bin/sh # # The default group for users # 100=users on Debian systems # Same as USERS_GID in adduser # This argument is used when the -n flag is specified. # The default behavior (when -n and -g are not specified) is to create a # primary user group with the same name as the user being added to the # system. # GROUP=100 # # The default home directory. Same as DHOME for adduser # HOME=/home\rIf you change the SHELL to /bin/bash, then useradd -D will be automatically updated.\n/etc/login.defs The core configuration file for user account and login management. Functions include: password policy, UID/GID range, HOME directory management, user and group management, login settings, etc. Settings in the file will affect the behavior of commands such as useradd, usermod, passwd, etc., it is recommended to back up before making changes.\n-rw-r--r-- 1 root root 10734 Nov 11 2021 /etc/login.defs\rTake a look at the USERGROUPS_ENAB parameter separately.\ngrep -B 4 -E \u0026#34;USERGROUPS_ENAB (yes|no)\u0026#34; /etc/login.defs\r# If set to yes, userdel will remove the user\u0026#39;s group if it contains no # more members, and useradd will create by default a group with the name # of the user. # USERGROUPS_ENAB yes\rIf the value of USERGROUPS_ENAB is yes:\nuserdel: When deleting a user, it will also delete the empty user group. useradd: When creating a user, it will also create a group with the same name as the user. This is why the default parameter GROUP=100 was not used when creating a user.\nModify Conf By Cmd Modify the default login Shell.\nsudo useradd -D -s /bin/bash\rModify the default group ID.\nsudo useradd -D -g 100\rModify the default HOME directory.\nsudo useradd -D -b path\rAfter executing the command, you will find that the file permissions have changed from 644 to 600.\n-rw------- 1 root root 1195 Aug 28 11:22 /etc/default/useradd\rThe corrected permissions are as follows.\nsudo chmod 644 /etc/default/useradd\rLook at the source code, the execution process in the set_defaults(void) method is roughly as follows:\n/* * set_defaults - write new defaults file * * set_defaults() re-writes the defaults file using the values that * are currently set. Duplicated lines are pruned, missing lines are * added, and unrecognized lines are copied as is. */ static int set_defaults(void) { ... }\rUse the mkstemp function to create a temporary file A. Process the /etc/default/useradd file and copy it to A. Backup the original useradd file, rename it to useradd-. Overwrite the A file with the original useradd file. The file created by the mkstemp function has permissions of 0600. Check the useradd and its backup useradd- files.\nls -li /etc/default/useradd*\r655124 -rw------- 1 root root 1197 Aug 28 16:28 /etc/default/useradd 655237 -rw------- 1 root root 1197 Aug 28 16:07 /etc/default/useradd-\rIf you use the command to modify the default login Shell.\nsudo useradd -D -s /bin/sh\rCheck the inode of the two files again.\n655454 -rw------- 1 root root 1195 Aug 28 17:27 /etc/default/useradd 655124 -rw------- 1 root root 1197 Aug 28 16:28 /etc/default/useradd-\rIt is not difficult to find that the inode of useradd- is the same as the inode of useradd before the modification. The issue of permissions being modified is obviously unreasonable, the command should not modify the file permissions. You can check this pull request on GitHub.\nUsermod Modify User Login Name sudo usermod -l newuser olduser\rAdd User to a Group The -a means to append to the group, not to replace the current group list.\nsudo usermod -aG group user\rModify User Default Shell usermod does not check the legality of the Shell, you can use chsh instead.\nsudo chsh -s /bin/bash user\rModify User ID sudo usermod -u newuid user\rPasswd Modify Current User PWD Without parameters, it is to change the password of the current user.\npasswd\rModify User PWD sudo passwd soda\rLogin Management Disable PWD Login The following two methods are the same, and will not disable SSH public key authentication.\nsudo usermod -L user\rsudo passwd -l user\rAfter execution, the password field in the /etc/shadow file will be prefixed with !.\nsudo grep user /etc/shadow\ruser:!$y...:19959:0:99999:7:::\rEnable PWD Login The following two methods are the same, and can be used together.\nsudo usermod -U user\rsudo passwd -u user\rAfter execution, the password field in the /etc/shadow file will delete the ! prefix.\nDisable SSH Auth Without a login Shell, naturally the password cannot be used for login.\nsudo usermod -s /usr/sbin/nologin user\rEnable SSH Auth sudo usermod -s /bin/bash user\rUserdel Delete User Only This method only deletes the user and keeps the main directory.\nsudo userdel user\rWith Home and Mail Not only delete the user, but also delete the main directory and mail.\nsudo userdel -r user\rIf a file or directory does not exist, a prompt will appear in the terminal.\nAdduser Package This package provides two useful commands, adduser and deluser, which are high-level encapsulated tools.\n","date":"2024-08-27","id":33,"permalink":"/en/linux/perm/user-mgmt/","summary":"\u003ch2 id=\"user-account\"\u003eUser Account\u003c/h2\u003e\n\u003ch3 id=\"etcpasswd\"\u003e/etc/passwd\u003c/h3\u003e\n\u003cp\u003eLinux uses the \u003ccode\u003e/etc/passwd\u003c/code\u003e file to store user account information.\nBecause many service processes need to read user account information, you can see that the file\u0026rsquo;s permissions are all readable.\u003c/p\u003e","tags":[],"title":"User Management"},{"content":"User/Group Relationship Primary Group When a user is created, a group with the same name is also created, which is the primary group.\ngrep soda /etc/passwd\rsoda:x:1001:1001:,,,:/home/soda:/bin/bash\rThe fourth field indicates the primary group ID 1001, which can also be viewed using the groups command.\ngroups soda\rsoda : soda\rSecondary Groups Users can also belong to multiple secondary groups, used for permission access control.\nID Command The most practical command for viewing user group information.\nid soda\ruid=1001(soda) gid=1001(soda) groups=1001(soda)\rgid indicates the primary group, and groups indicates the secondary groups.\n/etc/group The configuration file for groups, modified using commands, do not manually edit, otherwise, it will be messed up.\n-rw-r--r-- 1 root root 886 Aug 28 21:00 /etc/group\rGroup Information Viewing the information of the sudo group\ngrep sudo /etc/group\rsudo:x:27:kuga\rGroup Name: sudo Password: x Group ID: 27 Member: kuga Multiple group members are separated by commas: kuga,soda.\nCreating a New Group sudo groupadd rocks\rgrep rocks /etc/group\rrocks:x:1002:\rModifying Group Name sudo groupmod -n newrocks rocks\rUser Group Assignment Preserving Secondary Groups This method does not overwrite the list of secondary groups.\nsudo usermod -aG rocks soda\rid soda\r... groups=1001(soda),1002(rocks)\rOverwriting Secondary Groups Removing the -a (append) option will overwrite the entire secondary group list.\nsudo usermod -G sudo soda\rid soda\r... groups=1001(soda),27(sudo)\rClearly, the soda group is gone.\nDeleting Secondary Groups Deleting the sudo secondary group of the soda user.\nsudo gpasswd -d soda sudo\rAlternatively, you can use the overwrite method, keeping only the soda group.\nsudo usermod -G soda soda\r","date":"2024-08-27","id":34,"permalink":"/en/linux/perm/group-mgmt/","summary":"\u003ch2 id=\"usergroup-relationship\"\u003eUser/Group Relationship\u003c/h2\u003e\n\u003ch3 id=\"primary-group\"\u003ePrimary Group\u003c/h3\u003e\n\u003cp\u003eWhen a user is created, a group with the same name is also created, which is the primary group.\u003c/p\u003e","tags":[],"title":"Group Management"},{"content":"Composition Structure -rwxr-xr--\rThe first character indicates the file type:\n-：File, such as text files, binary files, etc. d：Directory. l：Symbolic link, Symbolic link (Soft link). b：Block device, such as hard disk, CD-ROM, etc. c：Character device, such as terminal device, keyboard, etc. p：Pipe, inter-process communication. s：Socket, network communication, data exchange between processes. The following characters are grouped into 3 (r=read, w=write, x=execute), corresponding to:\nCategory Permission Description Owner rwx Read/Write/Execute Group r-x Read/No Write/Execute Others r-- Read/No Write/No Execute Directory Exec Perm Like file execution permission, if you want to operate on a directory, the directory must also have execution permission.\ncd /home\rls /home\rIf there is no execution permission, the above commands will fail.\nUmask When creating a file or directory, the system uses the value of umask to calculate the file\u0026rsquo;s permissions.\numask\r0002\rThe first bit: special mode, not expanded here. The second bit: Owner, owner. The third bit: Group, group. The fourth bit: Others, others. Full Permissions New file: 666 (default does not require execution permission). New directory: 777 (directories all require execution permission). Permission Calculation Permission = Full Permission - umask\nFile: 666 - 002 = 664 Directory: 777 - 002 = 775 umask is a mask, representing the permissions that are not intended to be granted.\nchmod The command to modify file permissions.\nchmod - change file mode bits\rOctal Mode chmod 755 file\r-rwxr-xr-x 1 kuga kuga 16 Aug 23 11:08 file\rSymbolic Mode u represents user: adds execution permission for the user.\nchmod u+x file\rg represents group: removes write permission for the group.\nchmod g-w file\ro represents others: adds read permission for others.\nchmod g+r file\ra represents the above 3: adds execution permission for all.\nchmod a+x file\rchown Modifies the owner and group of a file.\nchown - change file owner and group\rChange Owner chown user file\rRecursively Change Owner chown -R user dir\rChange Owner and Group chown user:group file\rRecursively Change Owner and Group chown -R user:group dir\rChange Group Only chown :group file\rchgrp chgrp - change group ownership\rchgrp group file\r","date":"2024-08-27","id":35,"permalink":"/en/linux/perm/file-perm/","summary":"\u003ch2 id=\"composition-structure\"\u003eComposition Structure\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-rwxr-xr--\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThe first character indicates the file type:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/strong\u003e：File, such as text files, binary files, etc.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ed\u003c/code\u003e\u003c/strong\u003e：Directory.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003el\u003c/code\u003e\u003c/strong\u003e：Symbolic link, Symbolic link (Soft link).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eb\u003c/code\u003e\u003c/strong\u003e：Block device, such as hard disk, CD-ROM, etc.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ec\u003c/code\u003e\u003c/strong\u003e：Character device, such as terminal device, keyboard, etc.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ep\u003c/code\u003e\u003c/strong\u003e：Pipe, inter-process communication.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003es\u003c/code\u003e\u003c/strong\u003e：Socket, network communication, data exchange between processes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe following characters are grouped into 3 (r=read, w=write, x=execute), corresponding to:\u003c/p\u003e","tags":[],"title":"File Permission"},{"content":"ACL Access Control List (ACL) is a more flexible and fine-grained permission management mechanism, used to define and control the access permissions of file system objects. Compared to traditional file permission systems, ACL provides more detailed permission control, allowing you to set specific permissions for different users and user groups, no longer limited to the traditional three roles (Owner, Group, Others).\nInstallation If not installed, you can use the following command.\nsudo apt-get install acl\rGetfacl Get the access control list of a file\ngetfacl - get file access control lists\rUsage Example Get the ACL information of the foo file.\ngetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- group::rw- other::r--\rSetfacl Set the access control list of a file.\nsetfacl - set file access control lists\rSpecify User Authorization The soda user adds read and write permissions to the foo file.\nsetfacl -m u:soda:rw foo\rgetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- user:soda:rw- group::rw- mask::rw- other::r--\rSpecify Group Authorization The soda group adds read and write permissions to the foo file.\nsetfacl -m g:soda:rw foo\rgetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- user:soda:rw- group::rw- group:soda:rw- mask::rw- other::r--\rOther Authorization Add read and write permissions to the foo file for others.\nsetfacl -m o::rw foo\rgetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- user:soda:rw- group::rw- group:soda:rw- mask::rw- other::rw-\rAuthorization Modification The command is in the form of override.\nsetfacl -m o::r foo\rother::rw- will become other::r--.\nClear Authorization setfacl -m u:soda:- foo\rsetfacl -m o::- foo\ruser:soda:--- other::---\rDelete Authorization setfacl -x u:soda foo\rsetfacl -m g:soda foo\rThe two lines user:soda and group:soda will be deleted.\nEnd of Line + For files using ACL, there will be a + sign after the permission column.\n-rw-rw-r--+\rRBAC About 7-8 years ago, I once encountered a management interface for ACL, which was later changed to RBAC.\n","date":"2024-08-29","id":36,"permalink":"/en/linux/perm/acl/","summary":"\u003ch2 id=\"acl\"\u003eACL\u003c/h2\u003e\n\u003cp\u003eAccess Control List (ACL) is a more flexible and fine-grained permission management mechanism,\nused to define and control the access permissions of file system objects. Compared to traditional file permission systems, ACL provides more detailed permission control,\nallowing you to set specific permissions for different users and user groups, no longer limited to the traditional three roles (Owner, Group, Others).\u003c/p\u003e","tags":[],"title":"Access Control List"},{"content":"Systemd The first process of the system, with a process ID of 1.\nps -p 1\rPID TTY TIME CMD 1 ? 00:00:04 systemd\rHowever, when we want to display detailed information, the result will be different.\nps -p 1 -f\rUID PID PPID C STIME TTY TIME CMD root 1 0 0 Aug07 ? 00:00:04 /sbin/init noibrs\rIn fact, these two processes are the same, because init points to systemd.\nfile /sbin/init\r/sbin/init: symbolic link to /lib/systemd/systemd\rinit is the earliest initialization process in Unix. Since systemd has replaced init, for compatibility, /sbin/init is usually a symbolic link pointing to systemd. The naming convention of adding d after the name is the naming convention of Unix daemon processes, and System D is a term, which means the ability to think quickly and solve problems. systemd was born in 2010, and before that, SysVinit was used.\nSysVinit This initialization method of Unix System V is not used much now, but can still be seen in some old distributions.\nrunlevel runlevel is also a product of this SysVinit.\nrunlevel\rN 5\r5 corresponds to graphical.target, and N means the last runlevel was No.\nwho -r\rrun-level 5 2024-08-07 21:30\rThe default target for Ubuntu on Alibaba Cloud is graphical.target,‌ which is for users to manage the operating system using a graphical interface (VNC), if not needed, the target can be changed to multi-user.target.\nsystemctl set-default multi-user.target\r/etc/rcX.d rc stands for run commands, and .d stands for directory, the purpose is to avoid naming conflicts. This directory contains processes started under a specific runlevel, for example, runlevel 5 corresponds to /etc/rc5.d.\nls -l /etc/rc5.d\rlrwxrwxrwx 1 root root 13 Jul 10 11:08 K01fio -\u0026gt; ../init.d/fio lrwxrwxrwx 1 root root 20 Apr 21 2022 K01irqbalance -\u0026gt; ../init.d/irqbalance lrwxrwxrwx 1 root root 17 Jul 10 11:05 K01sysstat -\u0026gt; ../init.d/sysstat\rAlthough systemd is now used, for compatibility, these directories and scripts are still retained.\nUnit Files Unit files are the configuration files of systemd, used to define and manage system services, devices, mount points, sockets, and other system resources. Each unit file describes how systemd starts, stops, and monitors related resources.\nBasic Categories Type Description Extension Service Unit System service .service Mount Unit File system mount point .mount Device Unit Define device .device Socket Unit Socket service .socket Timer Unit Scheduled task .timer Target Unit System target state .target Location Directories /etc/systemd/system/: Unit files defined by the system administrator. /usr/lib/systemd/system/: Unit files provided by the distribution. /run/systemd/system/: Unit files generated at runtime. Nginx Status You can view the unit file path of the service through the status of Nginx.\nsystemctl status nginx\r● nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2024-08-08 12:43:17 CST; 2h 1min ago Docs: man:nginx(8) Main PID: 11037 (nginx) Tasks: 3 (limit: 1917) Memory: 8.6M CPU: 29ms CGroup: /system.slice/nginx.service ├─11037 \u0026#34;nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\u0026#34; ├─11039 \u0026#34;nginx: worker process\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; └─11040 \u0026#34;nginx: worker process\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; Aug 08 12:43:17 guitarocks systemd[1]: Starting A high performance web server and a reverse proxy server... Aug 08 12:43:17 guitarocks systemd[1]: Started A high performance web server and a reverse proxy server.\rNginx Unit Files /etc/systemd/system/multi-user.target.wants/nginx.service /lib/systemd/system/nginx.service /usr/lib/systemd/system/nginx.service\rThere are several paths for the unit file of the Nginx service, the first one is a symbolic link.\nfile /etc/systemd/system/multi-user.target.wants/nginx.service\r...: symbolic link to /lib/systemd/system/nginx.service\rThe second and third are hard links, their inodes are the same, and /lib is a symbolic link to /usr/lib.\nls -i /usr/lib/systemd/system/nginx.service\r265498 /usr/lib/systemd/system/nginx.service\rls -i /lib/systemd/system/nginx.service\r265498 /lib/systemd/system/nginx.service\rfile /lib\r/lib: symbolic link to usr/lib\rBelow is the content of the unit file.\ncat /lib/systemd/system/nginx.service\r# Stop dance for nginx # ======================= # # ExecStop sends SIGSTOP (graceful stop) to the nginx process. # If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control # and sends SIGTERM (fast shutdown) to the main process. # After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends # SIGKILL to all the remaining processes in the process group (KillMode=mixed). # # nginx signals reference doc: # http://nginx.org/en/docs/control.html # # Defines the description and dependency of the service [Unit] Description=A high performance web server and a reverse proxy server Documentation=man:nginx(8) After=network.target nss-lookup.target [Service] # forking means that the service will create a child process when starting, and the parent process will exit Type=forking # Store the ID of the main process PIDFile=/run/nginx.pid # Start preparation, test nginx configuration ExecStartPre=/usr/sbin/nginx -t -q -g \u0026#39;daemon on; master_process on;\u0026#39; # Start command, -g sets the global specification, which will override the options in the Nginx configuration file ExecStart=/usr/sbin/nginx -g \u0026#39;daemon on; master_process on;\u0026#39; # Reload configuration command ExecReload=/usr/sbin/nginx -g \u0026#39;daemon on; master_process on;\u0026#39; -s reload # Terminate process command ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid # Terminate service waiting time, force termination if it exceeds 5 seconds TimeoutStopSec=5 # Terminate process mode, SIGTERM, timeout, SIGKILL, graceful-\u0026gt;force KillMode=mixed # How to install and enable the service [Install] WantedBy=multi-user.target\rCommon Commands systemctl start [unit]: Start the unit. systemctl stop [unit]: Stop the unit. systemctl enable [unit]: Enable the unit, so that it will start automatically at boot. systemctl disable [unit]: Disable the unit. systemctl status [unit]: View the status of the unit. systemctl daemon-reload: Reload the systemd configuration after modifying or adding unit files. Targets From the above, we can see that a target is a type of unit file. Unlike general unit files, it represents the current running state of the system, the target defines which processes and services need to be started under that state, so a target can contain multiple unit files. You can view the current target of the system with the following command.\nsystemctl get-default\rmulti-user.target # Multi-user mode, does not include the graphical interface\rmulti-user.target Target files are usually stored in the /usr/lib/systemd/system/ or /etc/systemd/system/ directory. Each target file contains information about the dependencies and startup order of that target. Let\u0026rsquo;s take a look at the content of the multi-user.target file.\ncat /lib/systemd/system/multi-user.target\r# SPDX-License-Identifier: LGPL-2.1-or-later # # This file is part of systemd. # # systemd is free software; you can redistribute it and/or modify it # under the terms of the GNU Lesser General Public License as published by # the Free Software Foundation; either version 2.1 of the License, or # (at your option) any later version. [Unit] Description=Multi-User System Documentation=man:systemd.special(7) Requires=basic.target Conflicts=rescue.service rescue.target After=basic.target rescue.service rescue.target AllowIsolate=yes\rThe following two directories contain the content needed for the multi-user.target state.\n/etc/systemd/system/multi-user.target.wants/ /lib/systemd/system/multi-user.target.wants/\r/etc is user-defined configuration, /lib is system default configuration. User-defined configuration: higher priority, systemd will execute the same service first. System default configuration: when the system or software package is updated, it will be updated accordingly. Common Commands Set the default target:\nsystemctl set-default multi-user.target\rSwitch to a specific target:\nsystemctl isolate graphical.target\rView available targets:\nsystemctl list-units --type=target\r","date":"2024-08-30","id":37,"permalink":"/en/linux/proc/systemd/","summary":"\u003ch2 id=\"systemd\"\u003eSystemd\u003c/h2\u003e\n\u003cp\u003eThe first process of the system, with a process ID of 1.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eps -p \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ePID TTY          TIME CMD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"m\"\u003e1\u003c/span\u003e ?        00:00:04 systemd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eHowever, when we want to display detailed information, the result will be different.\u003c/p\u003e","tags":[],"title":"Systemd"},{"content":"Basic Concepts A file descriptor (FD) is an integer identifier used to represent an open file or other input/output resources in an operating system. It serves as a bridge between the operating system and applications for file operations.\nIn Linux, a file descriptor is a non-negative integer, and the operating system assigns a file descriptor to each open file or input/output (I/O) resource (such as pipes, network sockets, etc.). Whenever a process requests to open a file or resource, the operating system returns a file descriptor, and the process can then access that file or resource through this descriptor.\nCommon File Descriptors All processes automatically open the following 3 file descriptors.\nDescriptor Name Description 0 STDIN Standard Input 1 STDOUT Standard Output 2 STDERR Standard Error For example, command redirection directly uses the above file descriptors.\ncmd \u0026gt; foo.log 2\u0026gt; err.log\rThe above \u0026gt; and 1\u0026gt; are the same.\nFile Descriptors in Code The operating system manages file operations through file descriptors. Common file operations (such as reading, writing, closing) usually require file descriptors. Below are some common operations and their use of file descriptors:\nOpening a File The open() system call returns a file descriptor.\nint fd = open(\u0026#34;example.txt\u0026#34;, O_RDONLY);\rReading a File Read content through the file descriptor.\nchar buffer[100]; read(fd, buffer, sizeof(buffer));\rWriting to a File Write data to a file through the file descriptor.\nwrite(fd, \u0026#34;Hello, World!\u0026#34;, 13);\rClosing a File Close the file descriptor to release system resources.\nclose(fd);\rFile Descriptors in Process Each process has a corresponding /proc/PID/fd/ directory, which contains symbolic links to all file descriptors opened by that process.\nls -l /proc/NGINX_PID/fd\rlrwx------ 1 ... 0 -\u0026gt; /dev/null lrwx------ 1 ... 1 -\u0026gt; /dev/null lrwx------ 1 ... 10 -\u0026gt; \u0026#39;socket:[21631]\u0026#39; l-wx------ 1 ... 2 -\u0026gt; /var/log/nginx/error.log lrwx------ 1 ... 3 -\u0026gt; \u0026#39;socket:[21628]\u0026#39; l-wx------ 1 ... 4 -\u0026gt; /var/log/nginx/access.log l-wx------ 1 ... 5 -\u0026gt; /var/log/nginx/error.log lrwx------ 1 ... 6 -\u0026gt; \u0026#39;socket:[21614]\u0026#39; lrwx------ 1 ... 7 -\u0026gt; \u0026#39;socket:[21615]\u0026#39; lrwx------ 1 ... 8 -\u0026gt; \u0026#39;socket:[21629]\u0026#39; lrwx------ 1 ... 9 -\u0026gt; \u0026#39;socket:[21630]\u0026#39;\rSummary File descriptors provide an abstraction for processes. Programs can use a unified interface for various I/O operations without worrying about the underlying physical device details. For example, reading a file, receiving data from a network socket, and reading from a pipe, can all be implemented using the same read() function, which is all managed uniformly through file descriptors.\n","date":"2024-08-30","id":38,"permalink":"/en/linux/proc/fd/","summary":"\u003ch2 id=\"basic-concepts\"\u003eBasic Concepts\u003c/h2\u003e\n\u003cp\u003eA file descriptor (FD) is an \u003cstrong\u003einteger identifier\u003c/strong\u003e used to represent an open file or other input/output resources in an operating system.\nIt serves as a bridge between the operating system and applications for file operations.\u003c/p\u003e","tags":[],"title":"File Descriptor"},{"content":"Basic Concepts A pipe can use the output of one command as the input of the next command, represented by the symbol | in the command-line environment, which is a form of one-way communication between processes, implemented based on file descriptors.\nWorking Principle A pipe creates a memory buffer, and two processes (commands) communicate through this buffer.\nCreating a Pipe When creating a pipe using |, the Shell calls pipe() to create the pipe, which includes two file descriptors.\nWrite-end file descriptor: A. Read-end file descriptor: B. Command Connection Left command: Redirects the standard output (file descriptor 1) to the write-end A of the pipe. Right command: Redirects the standard input (file descriptor 0) to the read-end B of the pipe. Data Flow Real-time data transmission: The commands on both sides execute in parallel, without waiting for the previous command to finish. No temporary files: Data is transmitted in memory. Buffer size: Depends on the system. Buffer Size cat /proc/sys/fs/pipe-max-size\r1048576\rLimitations One-way communication: Two-way communication requires the use of other mechanisms, such as named pipes (FIFO) or sockets. Buffer size: If the buffer is full, the upstream command will pause. ","date":"2024-08-30","id":39,"permalink":"/en/linux/proc/pipe/","summary":"\u003ch2 id=\"basic-concepts\"\u003eBasic Concepts\u003c/h2\u003e\n\u003cp\u003eA pipe can use the output of one command as the input of the next command,\nrepresented by the symbol \u003ccode\u003e|\u003c/code\u003e in the command-line environment, which is a form of one-way communication between processes, implemented based on file descriptors.\u003c/p\u003e","tags":[],"title":"Pipe"},{"content":"todorocks\n","date":"2024-09-01","id":40,"permalink":"/en/linux/proc/lsof/","summary":"\u003cp\u003etodorocks\u003c/p\u003e","tags":[],"title":"LSOF"},{"content":"todorocks\n","date":"2024-09-01","id":41,"permalink":"/en/linux/proc/ulimit/","summary":"\u003cp\u003etodorocks\u003c/p\u003e","tags":[],"title":"ULIMIT"},{"content":"File System Types You can use the -T option of the df command to view the Type field.\ndf -Th\rFilesystem Type Size Used Avail Use% Mounted on tmpfs tmpfs 168M 1.1M 167M 1% /run /dev/vda3 ext4 40G 3.2G 35G 9% / tmpfs tmpfs 837M 0 837M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/vda2 vfat 197M 6.1M 191M 4% /boot/efi tmpfs tmpfs 168M 4.0K 168M 1% /run/user/1000 tmpfs tmpfs 168M 4.0K 168M 1% /run/user/0\rEXT4 The most commonly used Linux file system, which combines stability and performance.\nMaximum file size is 2 TB. Maximum partition size is 32 TB. The default logging mode is Ordered Mode. Supports multiple logging modes. Vfat Linux support for the FAT file system, commonly used for data sharing with Windows systems.\nTmpfs A virtual file system based on memory, with fast read and write capabilities.\nFile Metadata - Inode In the ext file system, metadata is stored using inode.\nUsing ls -i to View ls -i foo\r791470 foo\rThis will output the inode number of the foo file.\nUsing the stat Command Displays detailed information about the file.\nstat foo\rFile: foo Size: 0 Blocks: 0 IO Block: 4096 regular empty file Device: fc03h/64515d Inode: 791470 Links: 1 Access: (0664/-rw-rw-r--) Uid: ( 1000/ kuga) Gid: ( 1000/ kuga) Access: 2024-08-29 16:18:20.603296561 +0800 Modify: 2024-08-29 16:18:20.603296561 +0800 Change: 2024-08-29 16:38:49.498144965 +0800 Birth: 2024-08-29 16:18:20.603296561 +0800\rInode Usage df -i\rFilesystem Inodes IUsed IFree IUse% Mounted on tmpfs 214148 736 213412 1% /run /dev/vda3 2608144 100369 2507775 4% / tmpfs 214148 2 214146 1% /dev/shm tmpfs 214148 3 214145 1% /run/lock /dev/vda2 0 0 0 - /boot/efi tmpfs 42829 25 42804 1% /run/user/1000 tmpfs 42829 26 42803 1% /run/user/0\rCreating a new file consumes an inode, as shown in the following command.\ntouch foobar\r/dev/vda3 2608144 100370 2507774 4% /\rAs can be seen, the IFree of /dev/vda3 has decreased by 1. If all inodes are used up, no new files can be created.\nLog Mode Types File systems are generally divided into 3 types of log modes:\nWriteback: Writeback mode. Ordered: Ordered mode. Journal: Full journal mode. Writeback - Writeback Mode Features: The file system only logs metadata, and the actual data write operations and metadata updates are performed asynchronously. That is, data may be written to the disk before or after metadata.\nAdvantages: Higher performance, as the order of data writes is not strictly limited.\nDisadvantages: Due to the possible inconsistency in the write order between data and metadata, if the system crashes, it may lead to inconsistencies between metadata and data, resulting in the risk of data corruption.\nOrder - Ordered Mode Features: The file system ensures that all data blocks are written to the disk before the metadata is updated. In other words, the write of data must be completed before the metadata is updated.\nAdvantages: Much safer than writeback mode, as it reduces the risk of data and metadata inconsistencies, while maintaining good performance.\nDisadvantages: Slightly lower performance than writeback mode, but still a good balance point for many scenarios.\nJournal - Full Journal Mode Features: The file system not only logs metadata but also logs the data itself. All data and metadata are logged to the journal before being written to the disk.\nAdvantages: This mode provides the highest security, as data and metadata can always be recovered from the journal, ensuring data integrity even if the system crashes.\nDisadvantages: Lower performance, as each write requires two write operations (one to the journal and one to the actual data).\n","date":"2024-08-30","id":42,"permalink":"/en/linux/file-system/","summary":"\u003ch2 id=\"file-system-types\"\u003eFile System Types\u003c/h2\u003e\n\u003cp\u003eYou can use the \u003ccode\u003e-T\u003c/code\u003e option of the \u003ccode\u003edf\u003c/code\u003e command to view the Type field.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edf -Th\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eFilesystem     Type   Size  Used Avail Use% Mounted on\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  168M  1.1M  167M   1% /run\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/dev/vda3      ext4    40G  3.2G   35G   9% /\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  837M     \u003cspan class=\"m\"\u003e0\u003c/span\u003e  837M   0% /dev/shm\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  5.0M     \u003cspan class=\"m\"\u003e0\u003c/span\u003e  5.0M   0% /run/lock\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/dev/vda2      vfat   197M  6.1M  191M   4% /boot/efi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  168M  4.0K  168M   1% /run/user/1000\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  168M  4.0K  168M   1% /run/user/0\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"ext4\"\u003eEXT4\u003c/h3\u003e\n\u003cp\u003eThe most commonly used Linux file system, which combines stability and performance.\u003c/p\u003e","tags":[],"title":"File System"},{"content":"Shebang #!/usr/bin/env bash\rVariable Assignment No spaces are allowed around the = sign.\nname=foo\rDouble Quotes Can interpret variables.\nname=foo echo \u0026#34;hello, $name\u0026#34; # hello, foo echo \u0026#34;hello, \\$\\$\u0026#34; # hello, $$ echo \u0026#34;hello, \\\u0026#34;\\\u0026#34;\u0026#34; # hello, \u0026#34;\u0026#34;\rSingle Quotes Do not interpret variables, except for single quotes as special characters.\nname=foo echo \u0026#39;hello, $name\u0026#39; # hello, $name echo \u0026#39;hello, $$\u0026#39; # hello, $$ echo \u0026#39;hello, \u0026#34;\u0026#34;\u0026#39; # hello, \u0026#34;\u0026#34;\rTo output single quotes, you need to close single quotes first.\necho \u0026#39;I\u0026#39;\\\u0026#39;\u0026#39;m fine\u0026#39; # I\u0026#39;m fine\rCommand Substitution There are two ways to use backticks and $().\nresult=`date`\rresult=$(date)\rIt is recommended to use $(), which is more readable, with more examples as follows:\necho \u0026#34;dir is: $(pwd)\u0026#34;\rcount=$(ls $(pwd) | wc -l)\rHere, ls did not use the -l option, but the value of count is 4, the reason is here.\nOutput Redirection Standard output redirection \u0026gt;, creates a new file or overwrites an existing one.\ncmd \u0026gt; file\rAppend output redirection \u0026gt;\u0026gt;.\ncmd \u0026gt;\u0026gt; file\rStandard error redirection 2\u0026gt;, creates a new file or overwrites an existing one.\ncmd 2\u0026gt; file\rStandard output and error redirection to different files.\ncmd \u0026gt; foo.log 2\u0026gt; bar.log\rStandard output and error redirection to the same file.\nls 404 \u0026gt; foobar.log 2\u0026gt;\u0026amp;1\rInput Redirection Common way, using \u0026lt; symbol.\necho \u0026#34;a b c\u0026#34; \u0026gt; foo\rwc \u0026lt; foo\r1 3 6\rInline redirection, Inline Input Redirection.\nwc \u0026lt;\u0026lt; FOO apple banana cat FOO\r3 3 17\rFOO is a custom marker, used for multi-line input.\nEXPR Command The inhumane math operation command, spaces around the + sign cannot be less.\nexpr 2 + 5\rThe * sign is a wildcard, and it needs to be escaped.\nexpr 2 \\* 5\rOnly integer division is supported, no floating-point numbers.\nexpr 24 / 10\rBrackets You can use [] to perform mathematical operations.\nvar1=$[1+5*2] var2=$[2*(3+2)]\rBC Calculator A precise math operation calculator, full name Basic/Bench Calculator.\nInteractive Mode bc\rCopyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc. This is free software with ABSOLUTELY NO WARRANTY. For details type `warranty\u0026#39;.\r4*2.5 10.0 quit\rThe -q option does not print the above English welcome message.\nbc -q\rFloating Point You can directly use floating-point numbers for calculations.\n2.5*5 12.5\rDivision uses the scale variable, default value is 0, indicating integer division.\nscale=2 10/3\rIndicates to keep 2 decimal places, scale variable only applies to division.\nPipeline Method foo=$(echo \u0026#34;scale=2; 10/3\u0026#34; | bc)\rInline Input Redirection var1=10.24 foo=$(bc \u0026lt;\u0026lt; EOF scale=2 a=2 $var1/a EOF )\rEXIT Command The default exit code of the script is 0, indicating normal exit, and can be changed using exit.\nexit 5\rThe exit code range is 0-255, mod (%256).\n","date":"2024-08-30","id":43,"permalink":"/en/linux/script/syntax/","summary":"\u003ch2 id=\"shebang\"\u003eShebang\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#!/usr/bin/env bash\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"variable-assignment\"\u003eVariable Assignment\u003c/h2\u003e\n\u003cp\u003eNo spaces are allowed around the \u003ccode\u003e=\u003c/code\u003e sign.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003efoo\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"double-quotes\"\u003eDouble Quotes\u003c/h2\u003e\n\u003cp\u003eCan interpret variables.\u003c/p\u003e","tags":[],"title":"Basic Syntax"},{"content":"If Statement If the exit code of command is 0, then execute the content of then.\nif command then ... fi\rAnother form.\nif command; then ... fi\rElse if command; then ... else ... fi\rElif if command; then ... elif command; then ... fi\rCheck User Check if the soda user exists.\n#!/usr/bin/env bash if grep soda /etc/passwd then echo \u0026#34;soda exists\u0026#34; fi\rsoda:x:1001:1001:,,,:/home/soda:/bin/bash soda exists\rgrep has an exit code of 0 when there is data, and 1 when there is no data.\nTest Command Test conditions, if true, the return code is 0, otherwise the return code is 1.\ntest - check file types and compare values\rBasic syntax.\ntest EXPRESSION\rShort syntax.\n[ EXPRESSION ]\rAfter executing on the command line, you can use echo $? to see the return code.\nCheck File [ -e file ]：Check if the file exists. [ -d file ]：Check if the file exists and is a directory. [ -f file ]：Check if the file exists and is a file. [ -s file ]：Check if the file exists and is not empty. [ -r file ]：Check if the file exists and is readable. [ -w file ]：Check if the file exists and is writable. [ -x file ]：Check if the file exists and is executable. [ -O file ]：Check if the file exists and belongs to the current user. [ -G file ]：Check if the file exists and belongs to the user group. [ a -nt b ]：Check if file a is newer than file b. [ a -ot b ]：Check if file a is older than file b. If file or $file variable contains spaces, use double quotes.\n[ -e \u0026#34;file\u0026#34; ]\r[ -e \u0026#34;$file\u0026#34; ]\rCheck String [ -z str ]：Check if the string is empty (length is 0). [ -n str ]：Check if the string is not empty (length is not 0). [ s1 = s2 ]：Check if the strings are equal. [ s1 != s2 ]：Check if the strings are not equal. Check Number [ a -eq b ]：Check if the two numbers are equal. [ a -ne b ]：Check if the two numbers are not equal. [ a -gt b ]：Check if a is greater than b. [ a -ge b ]：Check if a is greater than or equal to b. [ a -lt b ]：Check if a is less than b. [ a -le b ]：Check if a is less than or equal to b. Compound Conditions Consistent with traditional programming languages.\n[ cond1 ] \u0026amp;\u0026amp; [ cond2 ]\r[ cond1 ] || [ cond2 ]\rDouble Parentheses Double parentheses can be used for advanced mathematical expressions without escaping.\nif (( 2**10 \u0026gt; 1000 )) then ... fi\rDouble Square Brackets Provide advanced matching patterns for strings.\nif [[ $BASH_VERSION == 5.* ]] then ... fi\rCase Statement #!/usr/bin/env bash # The first parameter of the script case \u0026#34;$1\u0026#34; in start) echo \u0026#34;Starting the service...\u0026#34; # Add the command to start the service here ;; stop) echo \u0026#34;Stopping the service...\u0026#34; # Add the command to stop the service here ;; *) echo \u0026#34;Usage: $0 {start|stop}\u0026#34; exit 1 ;; esac\r$0：The name of the script. $1：The first parameter of the script )：Branch condition end tag. ;;：Branch command end tag. *)：Default branch, executed when no branch matches. ","date":"2024-08-31","id":44,"permalink":"/en/linux/script/cond/","summary":"\u003ch2 id=\"if-statement\"\u003eIf Statement\u003c/h2\u003e\n\u003cp\u003eIf the exit code of \u003ccode\u003ecommand\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e, then execute the content of \u003ccode\u003ethen\u003c/code\u003e.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eAnother form.\u003c/p\u003e","tags":[],"title":"Condition"},{"content":"For Statement for var in list do ... done\rThe var variable can be normally used outside the loop body.\n#!/usr/bin/env bash for var in apple banana do echo \u0026#34;hello $var\u0026#34; done echo \u0026#34;outside $var\u0026#34;\rhello apple hello banana outside var\rStoring a list in a variable.\n#!/usr/bin/env bash list=\u0026#34;apple banana\u0026#34; list=$list\u0026#34; orange\u0026#34; for var in $list\rCommand substitution.\nfor var in $(cat file)\rWildcard iteration over a directory.\nfor var in /home/soda/*\rIFS - Internal Field Separator The environment variable IFS (Internal Field Separator) specifies the field separator.\necho $IFS\rThe default value is empty, indicating that the following characters are separated.\nSpace Tab Newline Separating by Newline IFS=$\u0026#39;\\n\u0026#39;\rSeparating by Multiple Symbols IFS=$\u0026#39;\\n:;\u0026#34;\u0026#39;\rIndicates that newline, colon, semicolon, and double quotes are used as separators.\nFor Loop in C Language The i variable can be normally accessed outside.\n#!/usr/bin/env bash for (( i = 1; i \u0026lt; 3; i++ )) do echo \u0026#34;index $i\u0026#34; done echo \u0026#34;last index $i\u0026#34;\rindex 1 index 2 last index 3\rWhile Statement while test command do ... done\r#!/usr/bin/env bash i=3 while [ $i -gt 0 ] do echo \u0026#34;index $i\u0026#34; i=$[ $i - 1 ] done\rindex 3 index 2 index 1\rMultiple while conditions are judged by the exit code of the last condition.\nUntil Statement until test command do ... done\r#!/usr/bin/env bash i=3 until [ $i -le 0 ] do echo \u0026#34;index $i\u0026#34; i=$[ $i - 1 ] done\rindex 3 index 2 index 1\rBreak Statement Supports specifying the number of loop levels to exit.\n#!/usr/bin/env bash for (( i = 0; i \u0026lt; 3; i++ )); do echo \u0026#34;i=$i\u0026#34; for (( j = 0; j \u0026lt; 3; j++ )); do echo \u0026#34; j=$j\u0026#34; if [ $j -eq 1 ]; then break 2 fi done done\ri=0 j=0 j=1\rThe break statement defaults to 1, indicating exit from 1 level of loop.\nContinue Statement #!/usr/bin/env bash for (( i = 0; i \u0026lt; 3; i++ )); do echo \u0026#34;i=$i\u0026#34; for (( j = 0; j \u0026lt; 3; j++ )); do echo \u0026#34; j=$j\u0026#34; if [ $j -eq 1 ]; then continue 2 fi done done\ri=0 j=0 j=1 i=1 j=0 j=1 i=2 j=0 j=1\rLike break, the default is also 1.\nLoop Output Redirection The standard output of the loop can be redirected.\n#!/usr/bin/env bash for var in apple banana do echo \u0026#34;hello $var\u0026#34; done \u0026gt; output.txt\rThe output of the loop body will be redirected to output.txt.\nLoop Output Pipe The output of the loop body can also be piped.\n#!/usr/bin/env bash for var in apple banana do echo \u0026#34;hello $var\u0026#34; done | sort\rSummary I surprisingly like the syntax sugar of break.\n","date":"2024-08-30","id":45,"permalink":"/en/linux/script/loop/","summary":"\u003ch2 id=\"for-statement\"\u003eFor Statement\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e var in list\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThe \u003ccode\u003evar\u003c/code\u003e variable can be normally used outside the loop body.\u003c/p\u003e","tags":[],"title":"Loop"},{"content":"Positional Parameters Positional Parameters, script positional parameters.\n$0: script name, including path. $1: the first argument, and so on. ${10}: arguments greater than 9 need to use curly braces. #!/usr/bin/env bash echo $0 echo $1\r./foo a\r./foo a\rBASENAME Can remove the script\u0026rsquo;s path, leaving only the name.\nbasename /home/kuga/foo\rUsage in the script.\nname=$(basename $0)\rSpecial Parameters Reference here.\nShift Parameters The shift command can shift the positional parameters to the left by one position.\n#!/usr/bin/env bash i=1 while [ -n \u0026#34;$1\u0026#34; ] do echo \u0026#34;param #$i = $1\u0026#34; i=$[ $i + 1 ] shift done\r./foo a b\rparam #1 = a param #2 = b\rScript Options Options are single letters preceded by a single hyphen, such as -a. Since options and arguments are both located after the script, to distinguish them, a double hyphen -- is usually used, with options on the left and arguments on the right, for example.\n./foo -a -b -- p1 p2\rTo correctly interpret options and arguments in the script is not a trivial task, for which the official provides two tools.\ngetopt External command. Supports long options, such as --help. Suitable for complex command-line tools. getopts Internal command. Does not support long options. Suitable for simple option scenarios. There are also many option interpretation projects on Github.\nGetopt Command getopt optstring parameters\roptstring: the definition of the options. parameters: the content of the options. For example, for optstring=ab:c.\nSingle letters a and c represent options without values. The letter b followed by : indicates an option with a value. Let\u0026rsquo;s look at the output of the following example.\ngetopt ab:c -a -b bval -c p1 p2\r-a -b bval -c -- p1 p2\rIt can be seen that it uses -- to separate options and arguments.\nGetopts Command getopts is a built-in command in Bash, which will parse options one by one and store the information of the options in specific variables, making it convenient for scripts to access. This is the command for me, a small potato.\ngetopts optstring name\rname: the name of the current option. OPTIND: each time an item is processed, this value will increase by 1. OPTARG: if the option has a value, it will be saved in this variable. #!/usr/bin/env bash while getopts \u0026#34;ab:c:\u0026#34; name; do case $name in a) echo \u0026#34;Option -a\u0026#34; ;; b) echo \u0026#34;Option -b: $OPTARG\u0026#34; ;; c) echo \u0026#34;Option -c: $OPTARG\u0026#34; ;; \\?) echo \u0026#34;Invalid option: -$OPTARG\u0026#34; exit 1 ;; esac done # Display the value of OPTIND echo \u0026#34;OPTIND: $OPTIND\u0026#34; # Use shift to remove parsed options and arguments shift $((OPTIND - 1)) # Remaining non-option arguments echo \u0026#34;Params: $@\u0026#34;\r./foo -a -b v1 -c v2 p1 p2\rOption -a Option -b: v1 Option -c: v2 OPTIND: 6 Params: p1 p2\r","date":"2024-08-31","id":46,"permalink":"/en/linux/script/input/","summary":"\u003ch2 id=\"positional-parameters\"\u003ePositional Parameters\u003c/h2\u003e\n\u003cp\u003ePositional Parameters, script positional parameters.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$0\u003c/code\u003e: script name, including path.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$1\u003c/code\u003e: the first argument, and so on.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e${10}\u003c/code\u003e: arguments greater than 9 need to use curly braces.\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./foo a\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./foo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ea\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"basename\"\u003eBASENAME\u003c/h2\u003e\n\u003cp\u003eCan remove the script\u0026rsquo;s path, leaving only the name.\u003c/p\u003e","tags":[],"title":"Input"},{"content":"Standard File Descriptors Standard File Descriptors.\nName Number Description STDIN 0 Standard Input STDOUT 1 Standard Output STDERR 2 Standard Error Standard Input The cat command reads content from the standard input by default. If you run cat without specifying a filename, it will wait for user input.\ncat\rRedirection is done using \u0026lt;.\ncat \u0026lt; foo\rwc \u0026lt; foo\rStandard Output The default is the terminal or screen.\necho \u0026#34;hello world\u0026#34;\rRedirection is done using \u0026gt; or 1\u0026gt;.\necho \u0026#34;hello world\u0026#34; \u0026gt; foo\rStandard Error The default is the terminal or screen.\nls 404\rRedirection is done using 2\u0026gt;.\nls 404 2\u0026gt; foo\rUsing \u0026amp;\u0026gt; can redirect both standard output and standard error output simultaneously.\nls 404 \u0026amp;\u0026gt; foo\rEXEC Command Using in Command Line exec ls\rThe Shell process will be replaced by the new command\u0026rsquo;s process, and after execution, it will not return to the original Shell.\nUsing in Script #!/usr/bin/env bash exec /bin/date echo \u0026#34;This will never be executed\u0026#34;\rThe script process will be replaced by the date command, and echo will not be executed.\nFile Descriptor Redirection #!/usr/bin/env bash echo \u0026#34;This will output to the terminal\u0026#34; exec 1\u0026gt; output.txt echo \u0026#34;This will be written to output.txt\u0026#34;\rWhen modifying file descriptors, it will not replace the current process, but will affect the input/output of subsequent commands.\nClosing File Descriptors Redirecting to \u0026amp;- will close it. After closing, no more data can be written.\n#!/usr/bin/env bash exec 3\u0026gt; testfile echo \u0026#34;apple\u0026#34; \u0026gt;\u0026amp;3 exec 3\u0026gt;\u0026amp;-\r/dev/null The null device, a bit bucket.\ncrw-rw-rw- 1 root root 1, 3 Aug 14 23:16 /dev/null\rRedirecting both standard output and standard error to the null device.\ncommand \u0026gt; /dev/null 2\u0026gt;\u0026amp;1\rMKTEMP Command Creates a temporary file based on a filename template.\nfilename.XXXXXX\rThe command will replace the X with random characters, and the template must have at least 6 X\u0026rsquo;s.\nCreating Files Files created by this command only have permissions for the Owner.\nmktemp foo.XXXXXX\r-rw------- 1 kuga kuga 0 Sep 2 17:27 foo.zPtFtG\rCreating Directories mktemp -d bar.XXXXXX\rdrwx------ 2 kuga kuga 4096 Sep 2 17:29 bar.RQAMzc\rUsing the /tmp Directory Using the -t option will create files in the /tmp directory.\nmktemp -t foo.XXXXXX\r/tmp/foo.0IglAI\rTEE Command Simultaneously redirects data to standard output and a file.\ntee - read from standard input and write to standard output and files\rdate | tee testfile\rMon Sep 2 05:36:44 PM CST 2024\rcat testfile\rMon Sep 2 05:36:44 PM CST 2024\rThe same data is on both the screen and in the file.\n","date":"2024-08-31","id":47,"permalink":"/en/linux/script/output/","summary":"\u003ch2 id=\"standard-file-descriptors\"\u003eStandard File Descriptors\u003c/h2\u003e\n\u003cp\u003eStandard File Descriptors.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eName\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eNumber\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eDescription\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDIN\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eStandard Input\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDOUT\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eStandard Output\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDERR\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e2\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eStandard Error\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"standard-input\"\u003eStandard Input\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003ecat\u003c/code\u003e command reads content from the standard input by default. If you run \u003ccode\u003ecat\u003c/code\u003e without specifying a filename, it will wait for user input.\u003c/p\u003e","tags":[],"title":"Output"},{"content":"Bash Shell By default, the Bash Shell ignores the SIGQUIT(3) and SIGTERM(15) signals, so executing the following commands will not have any effect ($$ is the process ID of the current Shell).\nkill -3 $$\rkill -15 $$\rIf the SIGHUP(1) signal is received, the Bash Shell will exit, but before exiting, it will pass the SIGHUP signal to all processes and scripts started by that Shell.\nkill -1 $$\rTRAP The trap command can be used to catch signals.\ntrap commands signals\rCatch Signals The SIGINT signal is the signal for Ctrl+C.\n#!/usr/bin/env bash trap \u0026#34;echo \u0026#39; Trapped Ctrl-C\u0026#39;\u0026#34; SIGINT count=1 while [ $count -le 5 ] do echo \u0026#34;loop #$count\u0026#34; sleep 1 count=$[ $count + 1 ] done\rloop #1 loop #2 ^C Trapped Ctrl-C loop #3 loop #4 ^C Trapped Ctrl-C loop #5\rExit Signals You can catch the signals when the script exits.\ntrap \u0026#34;echo \u0026#39; Trapped Ctrl-C\u0026#39;\u0026#34; EXIT\rRemove Signals Use -- to remove signals.\ntrap -- SIGINT\rNOHUP No Hang Up, processes or scripts started by this command will ignore the SIGHUP signal. In other words, even if the terminal exits, the processes or scripts started by that terminal will not exit.\nrun a command immune to hangups, with output to a non-tty\rnohup ./foo\rBy default, STDOUT and STDERR are redirected to nohup.out.\n-rw------- 1 kuga kuga 40 Sep 2 18:46 nohup.out\rIt\u0026rsquo;s better to redirect it yourself.\nnohup ./foo \u0026gt; out.log 2\u0026gt;\u0026amp;1\r-rw-rw-r-- 1 kuga kuga 62 Sep 2 18:50 out.log\rNice Value A parameter that controls the priority of a process. The higher the nice value, the lower the priority of the process, and the less CPU resources it is allocated.\nRange The nice value ranges from -20 to 19:\n-20: Highest priority. 0: Default priority. 19: Lowest priority. Start Process Priority nice -n VALUE command\rnice -n 10 ./foo\rModify Process Priority renice VALUE -p PID\rrenice 5 -p 404\rPermissions Regular users can only lower the priority of a process. Only root users can raise the priority of a process. ","date":"2024-09-02","id":48,"permalink":"/en/linux/script/signal/","summary":"\u003ch2 id=\"bash-shell\"\u003eBash Shell\u003c/h2\u003e\n\u003cp\u003eBy default, the Bash Shell ignores the \u003ccode\u003eSIGQUIT(3)\u003c/code\u003e and \u003ccode\u003eSIGTERM(15)\u003c/code\u003e signals,\nso executing the following commands will not have any effect (\u003ccode\u003e$$\u003c/code\u003e is the process ID of the current Shell).\u003c/p\u003e","tags":[],"title":"Signal"},{"content":"Creating a Function function name { commands }\ror\nname() { commands }\rFunction Return Value There are multiple forms of return values.\nUsing $? Represents the exit status code of the last command in the function.\necho $?\rUsing Return #!/usr/bin/env bash function double { echo \u0026#34;Double value\u0026#34; read -p \u0026#34;Enter a value:\u0026#34; value return $[ $value * 2 ] } double echo \u0026#34;Result: $?\u0026#34;\rEssentially, it\u0026rsquo;s the exit status code, ranging from [0, 255], and exceeding will be modulo 256.\nUsing Standard Output #!/usr/bin/env bash function double { read -p \u0026#34;Enter a value:\u0026#34; value echo $[ $value * 2 ] } result=$(double) echo \u0026#34;Result: $result\u0026#34;\rresult will save all the standard output from the function.\nFunction Parameters #!/usr/bin/env bash function add { if [ $# -lt 2 ]; then echo \u0026#34;invalid params\u0026#34; else echo $[ $1 + $2 ] fi } result=$(add 1 2) echo \u0026#34;Result: $result\u0026#34;\rThe $#, $1, and parameters within the function are independent of the outer parameters.\nVariable Scope Outside the Function Accessible anywhere.\n#!/usr/bin/env bash soda=green function foo { echo $soda soda=yellow } foo echo $soda\rgreen yellow\rInside the Function #!/usr/bin/env bash function foo { soda=green } # Cannot access before the function is executed echo $soda foo echo $soda soda=yellow echo $soda\rgreen yellow\rUsing Local local variables only take effect within the function and are independent of external variables with the same name.\n#!/usr/bin/env bash soda=green function foo { echo $soda local soda=yellow echo $soda } foo echo $soda\rgreen yellow green\rIs a Variable Defined Can use parameter expansion\u0026rsquo;s + marker.\nIs a Function Defined Later-defined functions with the same name will override previously defined functions with the same name, so it\u0026rsquo;s a good idea to check before defining a function.\ndeclare -f FUNC_NAME\rFor example, writing the function in the .bashrc file.\nfunction sayhello() { echo \u0026#34;hello\u0026#34; }\rdeclare -f sayhello\recho $?\rThe function is defined, exit code is 0, not defined, exit code is 1.\nif declare -f sayhello \u0026gt; /dev/null; then echo \u0026#34;sayhello is defined\u0026#34; else echo \u0026#34;sayhello not defined\u0026#34; fi\r","date":"2024-09-02","id":49,"permalink":"/en/linux/script/func/","summary":"\u003ch2 id=\"creating-a-function\"\u003eCreating a Function\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e name \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    commands\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eor\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ename\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    commands\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"function-return-value\"\u003eFunction Return Value\u003c/h2\u003e\n\u003cp\u003eThere are multiple forms of return values.\u003c/p\u003e","tags":[],"title":"Function"},{"content":"Parameter Expansion In Bash, parameter expansion is a mechanism for manipulating and handling the contents of variables. Through parameter expansion, you can get the value of a variable, modify the value of a variable, or provide a default value for an unset variable.\nShell Parameter Expansion\rgnu.org\nVariable Expansion The most common way.\nvar=\u0026#34;Bash\u0026#34; echo \u0026#34;Hello, ${var}!\u0026#34;\rDefault Value Expansion Mark + ${var+DEFAULT}\rvar is undefined: returns an empty string. var is defined: is empty: returns DEFAULT. is not empty: returns DEFAULT. unset var echo ${var+foo}\rvar= echo ${var+foo}\rfoo\rThis mark can be used to determine whether a variable is undefined.\n#!/usr/bin/env bash if [ -n \u0026#34;${var+defined}\u0026#34; ]; then echo \u0026#34;var already defined\u0026#34; else echo \u0026#34;var not defined\u0026#34; fi\rNote\nIf ${var+defined} is not used with double quotes, when an empty string is returned, the condition will become [ -n ], which is a valid condition, will not produce any errors, and its return value is true. Obviously this is unreasonable, so double quotes must be added.\nMark - ${var-DEFAULT}\rvar is undefined: returns DEFAULT. var is defined: is empty: returns var. is not empty: returns var. unset var echo ${var-foo}\rfoo\rvar= echo ${var-foo}\rvar and DEFAULT values may be the same, so they cannot be used to determine whether var is defined.\nMark :+ ${var:+DEFAULT}\rvar is undefined: returns an empty string. var is defined: is empty: returns an empty string. is not empty: returns DEFAULT. var=abc echo ${var:+foo}\rfoo\rMark :- ${var:-DEFAULT}\rvar is undefined: returns DEFAULT. var is defined is empty: returns DEFAULT. is not empty: returns var. unset var echo ${var:-foo}\rvar= echo ${var:-foo}\rBoth of the above two examples will output foo.\nMark := var is undefined: var=foo, returns var. var is defined is empty: var=foo, returns var. is not empty: returns var. unset var echo ${var:=foo} echo $var\rfoo foo\rString Operations Extract Substring var=\u0026#34;heybro!\u0026#34; echo ${var:3:4}\rbro!\rString Length var=\u0026#34;heybro!\u0026#34; echo ${#var}\r7\rRemove Prefix Remove the shortest match: use #, pattern */.\nvar=\u0026#34;a/b/c\u0026#34; echo ${var#*/}\rb/c\rRemove the longest match: use ##, pattern */.\nvar=\u0026#34;a/b/c\u0026#34; echo ${var##*/}\rc\rRemove Suffix Remove the shortest match: use %, pattern /*.\nvar=\u0026#34;a/b/c\u0026#34; echo ${var%/*}\ra/b\rRemove the longest match: use %%, pattern /*.\nvar=\u0026#34;a/b/c\u0026#34; echo ${var%%/*}\ra\rReplace First Substring var=\u0026#34;aa bb aa\u0026#34; echo ${var/aa/cc}\rcc bb aa\rReplace All Substrings var=\u0026#34;aa bb aa\u0026#34; echo ${var//aa/cc}\rcc bb cc\r","date":"2024-09-02","id":50,"permalink":"/en/linux/script/param-exp/","summary":"\u003ch2 id=\"parameter-expansion\"\u003eParameter Expansion\u003c/h2\u003e\n\u003cp\u003eIn Bash, parameter expansion is a mechanism for manipulating and handling the contents of variables.\nThrough parameter expansion, you can get the value of a variable, modify the value of a variable, or provide a default value for an unset variable.\u003c/p\u003e","tags":[],"title":"Parameter Expansion"},{"content":"Parameters: $? The exit code of the previous command or script, 0 for success, non-0 for failure.\nls 404\recho $?\rWill output 2, indicating failure. The return code can be specified in scripts using exit.\nParameters: $# Indicates the number of arguments passed to the script or function.\n#!/usr/bin/env bash echo $#\r./foo p1 p2\r2\rParameters: $* All arguments passed to the script, separated by spaces by default.\n#!/usr/bin/env bash echo $*\r./foo p1 p2p3\rp1 p2p3\rThe separator can be modified through the IFS variable.\nParameters: $@ All arguments passed to the script, separated by spaces by default.\n#!/usr/bin/env bash echo $@\r./foo p1 p2p3\rp1 p2p3\rThe separator can be modified through the IFS variable.\nDifference: $* vs $@ The main difference lies in handling arguments with spaces.\n$*: Represents all arguments as a single string, a whole. $@: Without double quotes: Same as $*. With double quotes: \u0026quot;$@\u0026quot;, represents an array of arguments, each argument is independent. # Assuming the arguments passed are \u0026#34;arg1\u0026#34; \u0026#34;arg2 with space\u0026#34; \u0026#34;arg3\u0026#34; for arg in \u0026#34;$@\u0026#34;; do echo \u0026#34;Argument: $arg\u0026#34; done\r# Passing all arguments to another script another_script \u0026#34;$@\u0026#34;\rParameters: $$ The process ID of the current script.\necho $$\rParameters: $! The process ID of the most recently backgrounded process.\necho $!\rParameters: $0 The name of the current script.\necho $0\r-bash\rParameters: $n The nth argument.\n#!/usr/bin/env bash echo $1\r./foo a b c\ra\rParameters: $- The options of the script.\necho $-\rhimBHs\rAbove are the startup options of the current Shell.\n","date":"2024-08-30","id":51,"permalink":"/en/linux/script/special-params/","summary":"\u003ch2 id=\"parameters-\"\u003eParameters: $?\u003c/h2\u003e\n\u003cp\u003eThe exit code of the previous command or script, 0 for success, non-0 for failure.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els \u003cspan class=\"m\"\u003e404\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$?\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eWill output 2, indicating failure. The return code can be specified in scripts using \u003ccode\u003eexit\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"Special Parameters"},{"content":"Echo Command Using the -e option can create simple multi-line text.\necho -e \u0026#39;aa\\nbb\u0026#39;\raa bb\rHere Document Here Document (abbreviated as Heredoc) is a way of input redirection in Shell, allowing you to embed multi-line text within scripts or commands and pass it to commands or files.\nBasic Syntax command \u0026lt;\u0026lt;EOF Multi-line text content EOF\rcommand：such as cat, sed, gawk. \u0026lt;\u0026lt;EOF：marks the beginning of the document and defines the end marker. EOF：marks the end position of the document. Here, EOF is just an example, and any marker can be used.\nMulti-Line Text File Multi-line text can be redirected to the foo.txt file.\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo.txt apple banana EOF\rcat foo.txt\rapple banana\rAs Input to a Command grep \u0026#39;app\u0026#39; \u0026lt;\u0026lt;EOF apple banana EOF\rDifference of Quotes If the EOF marker is used with quotes, the function will be different.\nQuote Type Variable/Special Character EOF Interpret 'EOF' Do Not Interpret \u0026quot;EOF\u0026quot; Do Not Interpret If the content is just a pure document, try to use quotes to reduce the impact of special characters.\nUsing Quotes Single/double quotes are the same, and neither will interpret the $ symbol.\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; $HOME EOF\r$HOME\rNot Using Quotes And not using quotes is the same, and will interpret the $ symbol.\ncat \u0026lt;\u0026lt;EOF $HOME EOF\r/home/kuga\r","date":"2024-09-04","id":52,"permalink":"/en/linux/text/multi-lines/","summary":"\u003ch2 id=\"echo-command\"\u003eEcho Command\u003c/h2\u003e\n\u003cp\u003eUsing the \u003ccode\u003e-e\u003c/code\u003e option can create simple multi-line text.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e -e \u003cspan class=\"s1\"\u003e\u0026#39;aa\\nbb\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eaa\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebb\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"here-document\"\u003eHere Document\u003c/h2\u003e\n\u003cp\u003eHere Document (abbreviated as Heredoc) is a way of input redirection in Shell,\nallowing you to embed multi-line text within scripts or commands and pass it to commands or files.\u003c/p\u003e","tags":[],"title":"Multi-Lines Text"},{"content":"Introduction Regular Expressions (regex) can be divided into the following categories based on different standards.\nType Abbr Full Name Basic Regular Expressions BRE Basic Regular Expressions Extended Regular Expressions ERE Extended Regular Expressions Perl Regular Expressions PCRE Perl-Compatible Regular Expressions POSIX Regular Expressions BRE \u0026amp; ERE BRE \u0026amp; ERE BRE and ERE are two types of regular expressions in the POSIX standard, BRE is more basic and requires escaping certain metacharacters, ERE is an extension of BRE, providing more metacharacters and functions. PCRE is a more powerful and flexible type of regular expression, widely used in modern programming languages such as: Python, Ruby, Javascript.\nSED Command Supports BRE and ERE, defaults to BRE.\nBRE Pattern This pattern requires escaping metacharacters, for example:\n)：needs to be escaped with \\)。 |：needs to be escaped with \\|。 echo \u0026#39;abc\u0026#39; | sed \u0026#39;s/\\(b\\|c\\)/p/g\u0026#39;\rapp\rERE Pattern Enables ERE using the -E or -r option, no need to escape metacharacters.\necho \u0026#39;abc\u0026#39; | sed -E \u0026#39;s/(b|c)/p/g\u0026#39;\rapp\rGAWK Defaults to ERE mode.\necho \u0026#39;abc\u0026#39; | gawk \u0026#39;{gsub(/(b|c)/, \u0026#34;p\u0026#34;); print }\u0026#39;\rapp\rSpecial Characters Characters with special meanings, need to be escaped.\n.*[]^${}\\+?|()\rAlthough / is not a special character in regular expressions, it also needs to be escaped in sed and gawk.\nLine Start ^ Matches the start position of a line.\necho \u0026#39;aa bb\u0026#39; | sed -n \u0026#39;/^aa/p\u0026#39;\rIf ^ is not at the beginning, it is treated as a normal character, no need to escape.\necho \u0026#39;aa b^b\u0026#39; | sed -n \u0026#39;/b^/p\u0026#39;\rLine End $ Matches the end position of a line.\necho \u0026#39;aa bb\u0026#39; | sed -n \u0026#39;/bb$/p\u0026#39;\rIf $ is not at the end, it is treated as a normal character, no need to escape.\necho \u0026#39;aa b$b\u0026#39; | sed -n \u0026#39;/b$b/p\u0026#39;\rDot Character . Matches any single character except newline.\necho \u0026#39;abc\u0026#39; | sed -n \u0026#39;/a.c/p\u0026#39;\rCharacter Group [] Character Class, can match any character within the group.\necho \u0026#39;cat\u0026#39; | sed -n \u0026#39;/[ch]at/p\u0026#39;\recho \u0026#39;yes\u0026#39; | sed -n \u0026#39;/[Yy][Ee][Ss]/p\u0026#39;\rExcludes characters within the group.\necho \u0026#39;bat\u0026#39; | sed -n \u0026#39;/[^ch]at/p\u0026#39;\rMatches characters between c and e.\necho \u0026#39;cat\u0026#39; | sed -n \u0026#39;/[c-e]at/p\u0026#39;\rMatches characters between c and e or 0 and 9.\necho \u0026#39;cat\u0026#39; | sed -n \u0026#39;/[c-e0-9]at/p\u0026#39;\rAsterisk * Matches the character before the * 0 or more times.\necho \u0026#39;24\u0026#39; | sed -n \u0026#39;/23*4/p\u0026#39;\recho \u0026#39;234\u0026#39; | sed -n \u0026#39;/23*4/p\u0026#39;\recho \u0026#39;2334\u0026#39; | sed -n \u0026#39;/23*4/p\u0026#39;\recho \u0026#39;bat\u0026#39; | sed -n \u0026#39;/b[ae]*/p\u0026#39;\recho \u0026#39;baaeeaet\u0026#39; | sed -n \u0026#39;/b[ae]*/p\u0026#39;\rAll the above examples can be successfully matched.\nQuestion Mark ? Matches the character before the ? 0 or 1 time.\necho \u0026#39;at\u0026#39; | sed -En \u0026#39;/c?at/p\u0026#39;\recho \u0026#39;ccbbat\u0026#39; | sed -En \u0026#39;/c?at/p\u0026#39;\rThe above examples can be matched, can be limited with ^.\necho \u0026#39;ccbbat\u0026#39; | sed -En \u0026#39;/^c?at/p\u0026#39;\rAbove can only match at or cat.\nPlus + Matches the character before the + 1 or more times.\necho \u0026#39;at\u0026#39; | sed -En \u0026#39;/c+at/p\u0026#39;\rInterval Specifies the number of matches for the character before {}.\necho \u0026#39;cat\u0026#39; | sed -En \u0026#39;/^c{1}at/p\u0026#39;\recho \u0026#39;ccat\u0026#39; | sed -En \u0026#39;/^c{1,2}at/p\u0026#39;\rVertical Line | Represents the OR logic.\necho \u0026#39;cat\u0026#39; | sed -En \u0026#39;/cat|hat/p\u0026#39;\rGrouping () Grouping can be viewed as a whole.\necho \u0026#39;cat\u0026#39; | sed -En \u0026#39;/(c|h)at/p\u0026#39;\recho \u0026#39;Sun\u0026#39; | sed -En \u0026#39;/(S|s)un(day)?/p\u0026#39;\r","date":"2024-09-04","id":53,"permalink":"/en/linux/text/regex/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eRegular Expressions (regex) can be divided into the following categories based on different standards.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eType\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eAbbr\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eFull Name\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Regular Expressions\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Regular Expressions\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eExtended Regular Expressions\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eERE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eExtended Regular Expressions\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerl Regular Expressions\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePCRE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerl-Compatible Regular Expressions\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePOSIX Regular Expressions\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE \u0026amp; ERE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE \u0026amp; ERE\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eBRE and ERE are two types of regular expressions in the POSIX standard,\nBRE is more basic and requires escaping certain metacharacters, ERE is an extension of BRE, providing more metacharacters and functions.\nPCRE is a more powerful and flexible type of regular expression,\nwidely used in modern programming languages such as: Python, Ruby, Javascript.\u003c/p\u003e","tags":[],"title":"Regular Expression"},{"content":"Stream Editor A Stream Text Processor, authored by Lee E. McMahon.\nBasic Syntax sed [OPTIONS] \u0026#39;command\u0026#39; file\rOPTIONS: Command options. command: Print, replace, delete, etc. file: The file to process; if omitted, reads from STDIN. Omitting file enters interactive mode, executing one line at a time.\nExecution Process Reading a line of data: With a match rule: Match successful: Executes related operations. Match failed: Prints data as is. Without a match rule: Executes related operations. Command Quotes Single quotes: Reduces the impact of escape characters, preferably used. Double quotes: Can use variable parameters, requires handling special characters. Common Examples Replace First Occurrence Replace the first occurrence of \u0026lsquo;a\u0026rsquo; with \u0026lsquo;b\u0026rsquo;.\necho \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/\u0026#39;\rbba\rReplace Nth Occurrence Replace the Nth occurrence of \u0026lsquo;a\u0026rsquo; with \u0026lsquo;b\u0026rsquo;.\necho \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/2\u0026#39;\rabb\rReplace All Occurrences echo \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/g\u0026#39;\rbbb\rExecute Mult Commands Can use ; to separate, or use the -e option.\necho \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/; s/a/c/\u0026#39;\recho \u0026#39;aba\u0026#39; | sed -e \u0026#39;s/a/b/\u0026#39; -e \u0026#39;s/a/c/\u0026#39;\rbbc\rUsing Command File The cmd.sed file content is as follows.\ns/a/b/ s/a/c/\recho \u0026#39;aba\u0026#39; | sed -f cmd.sed\rbbc\rPrint Only Replaced Lines -n indicates suppressing output, p indicates only outputting matched lines.\necho \u0026#39; aa bb cc dd \u0026#39; | sed -n \u0026#39;s/aa/bb/p\u0026#39;\rbb bb\rWrite Result to File echo \u0026#39; aa bb cc dd \u0026#39; | sed \u0026#39;s/aa/bb/w out.txt\u0026#39;\rcat out.txt\rbb bb\rModify Delimiter Can use another symbol to replace the command delimiter /.\necho \u0026#39;/bin/sh\u0026#39; | sed \u0026#39;s#/sh#/bash#\u0026#39;\r/bin/bash\rSpecify Line Match Match the 2nd line.\nsed \u0026#39;2s/aa/bb/\u0026#39;\rMatch lines 2-4.\nsed \u0026#39;2,4s/aa/bb/\u0026#39;\rMatch lines 2 to the last.\nsed \u0026#39;2,$s/aa/bb/\u0026#39;\rSpecify Command Group sed \u0026#39;2{s/cc/aa/; s/dd/bb/}\u0026#39;\rsed \u0026#39;2,4{ s/cc/aa/ s/dd/bb/ }\u0026#39;\rDelete All Lines sed \u0026#39;d\u0026#39;\rDelete Specific Lines sed \u0026#39;1d\u0026#39;\rsed \u0026#39;2,4d\u0026#39;\rsed \u0026#39;2,$d\u0026#39;\rDelete Matched Lines sed \u0026#39;/aa bb/d\u0026#39;\rInsert a Line Before echo \u0026#34;hello\u0026#34; | sed \u0026#39;i\\New Line\u0026#39;\rInsert a Line After echo \u0026#34;hello\u0026#34; | sed \u0026#39;a\\New Line\u0026#39;\rSpecify Line Insert sed \u0026#39;3i\\New Line\u0026#39;\rMatched Line Insert sed \u0026#39;/cc/i\\New Line\u0026#39;\rInsert Multiple Lines Must use \\.\nsed \u0026#39;2i\\ New Line 1\\ New Line 2 \u0026#39;\rModify Line sed \u0026#39;2c\\ Change Line 1\\ Change Line 2 \u0026#39;\rsed \u0026#39;/aa/c\\ Change Line 1 \u0026#39;\rSingle Char Replace echo \u0026#39;aabbcc\u0026#39; | sed \u0026#39;y/ac/ca/\u0026#39;\rccbbaa\rPrint Specific Lines sed -n \u0026#39;2,5p\u0026#39;\rPrint Before/After Replacement sed -n \u0026#39;/aa/{p; s/aa/cc/p}\u0026#39;\rPrint Line Number sed -n \u0026#39;/bb/{=; p}\u0026#39;\rReading from File Create foo and bar files.\necho -e \u0026#39;aa\\nbb\u0026#39; \u0026gt; foo echo -e \u0026#39;11\\n22\u0026#39; \u0026gt; bar\rRead from the foo file and insert after the first line of bar.\nsed \u0026#39;1r foo\u0026#39; bar\r11 aa bb 22\rMatch string then insert.\nsed \u0026#39;/22/r foo\u0026#39; bar\r11 22 aa bb\rMatch string, insert, and use d to delete the matched line.\nsed \u0026#39;/22/{ r foo d }\u0026#39; bar\r11 aa bb\rThe following will report a syntax error.\n# Will error sed \u0026#39;/22/{r foo; d}\u0026#39; bar\rIt\u0026rsquo;s not impossible to do it in one line.\nsed \u0026#39;/22/r foo\u0026#39; bar | sed \u0026#39;/22/d\u0026#39;\r","date":"2024-09-04","id":54,"permalink":"/en/linux/text/sed/","summary":"\u003ch2 id=\"stream-editor\"\u003eStream Editor\u003c/h2\u003e\n\u003cp\u003eA Stream Text Processor, authored by \u003cstrong\u003eLee E. McMahon\u003c/strong\u003e.\u003c/p\u003e\n\u003ch3 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esed \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTIONS\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;command\u0026#39;\u003c/span\u003e file\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOPTIONS\u003c/code\u003e: Command options.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecommand\u003c/code\u003e: Print, replace, delete, etc.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efile\u003c/code\u003e: The file to process; if omitted, reads from STDIN.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOmitting \u003ccode\u003efile\u003c/code\u003e enters interactive mode, executing one line at a time.\u003c/p\u003e","tags":[],"title":"SED"},{"content":"Gnu Awk Gawk is the GNU version of the text processing tool. In most GNU/Linux distributions, Gawk is the default awk implementation, so there is usually no difference in daily use.\nreadlink -f /usr/bin/awk\r/usr/bin/gawk\rThe Gawk command defaults to using ERE mode.\nBasic Syntax gawk [OPTIONS] program file\rOPTIONS: command options. program: there is a program in this damn command. file: the file being processed, if omitted, read from STDIN. Omitting file enters interactive mode, where one line is executed at a time.\nExecution Process Read a line of data: If there is a matching rule: If the match is successful: perform the corresponding operation. If the match fails: do not perform the operation. If there is no matching rule: perform the corresponding operation. Basic Usage Create the foo file.\necho -e \u0026#39;aa 11\\nbb 22\u0026#39; \u0026gt; foo\rFor each line of data, Gawk defaults to using space/tab to separate fields.\n$N: represents the Nth field. $0: represents the entire line of data. gawk \u0026#39;{print $1}\u0026#39; foo\raa bb\rBEGIN/END Structure BEGIN: initialization, executed before interpretation. BODY: executed once for each record. END: end of processing. Note the use of single quotes 'EOF' to create the file, so that special characters $ are not processed.\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; foo.gawk BEGIN { FS=\u0026#34;:\u0026#34; print \u0026#34;User\\tShell\u0026#34; print \u0026#34;-------\\t-------\u0026#34; } { print $1 \u0026#34;\\t\u0026#34; $6 } END { print \u0026#34;-------\\t-------\u0026#34; } EOF\rhead -n 3 /etc/passwd | gawk -f foo.gawk\rUser Shell ------- ------- root /root daemon /usr/sbin bin /bin ------- -------\rCommon Options Specify Separator The -F option can modify the line separator.\ngawk -F: \u0026#39;{print $1}\u0026#39; /etc/passwd | head -n 1\rSpecify File The -f option can specify a file.\necho \u0026#39;{print $1 \u0026#34;-dir:\u0026#34; $6}\u0026#39; \u0026gt; foo.gawk\rgawk -F: -f foo.gawk /etc/passwd | head -n 1\rroot-dir:/root\rAssign Variable Parameters The -v option can assign values to variables before BEGIN.\ngawk -v n=2 \u0026#39;BEGIN{print 2*n}\u0026#39;\r4\rIf you don\u0026rsquo;t need to use it in BEGIN, you can omit the -v parameter.\necho \u0026#39;a b c\u0026#39; | gawk \u0026#39;{print $n}\u0026#39; n=2\rb\rBuilt-in Variables Variable $N $N can also be assigned, and double quotes for strings cannot be omitted.\necho \u0026#39;hey man\u0026#39; | gawk \u0026#39;{$2=\u0026#34;bro\u0026#34;; print $0}\u0026#39;\rhey bro\rVariable FS Field Separator, field separator.\ngawk \u0026#39;BEGIN{FS=\u0026#34;:\u0026#34;} {print $1}\u0026#39; /etc/passwd | head -n 1\rVariable NF Number of Fields, represents the number of fields in the record.\ngawk -F: \u0026#39;$1==\u0026#34;root\u0026#34;{print $1\u0026#34;:\u0026#34;$NF}\u0026#39; /etc/passwd\rroot:/bin/bash\rVariable NR Number of Records, represents the current record number being processed, the default value is 1, and 1 is added after processing each line. Can be used to skip the first line of text, the NR value of the first line is 1.\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo name score foo 90 bar 80 EOF\rgawk \u0026#39;{if (NR\u0026gt;1) {if ($2\u0026gt;85) {print $1,$2}}\u0026#39; foo\rfoo 90\rVariable RS Record Separator, input record separator, the default value is \\n, which means that each record is separated by a newline. Setting RS to \u0026quot;\u0026quot; means that an empty line is used as the record separator. For the following text, it will be divided into two records, upper and lower.\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo apple sweet red banana sweet yellow EOF\rSet FS=\u0026quot;\\n\u0026quot;, then you can get each line of record through $N. RS and FS are usually used together.\ngawk \u0026#39;BEGIN{RS=\u0026#34;\u0026#34;; FS=\u0026#34;\\n\u0026#34;} {print $1\u0026#34;\\t\u0026#34;$3}\u0026#39; foo\rapple red banana yellow\rVariable OFS Output Field Separator, output field separator.\necho \u0026#39;aa,bb\u0026#39; | gawk \u0026#39;BEGIN{FS=\u0026#34;,\u0026#34;; OFS=\u0026#34;-\u0026#34;} {print $1,$2}\u0026#39;\raa-bb\rVariable FIELDWIDTHS Specify character width for separation.\necho \u0026#39;abbc\u0026#39; | gawk \u0026#39;BEGIN{FIELDWIDTHS=\u0026#34;1 2 1\u0026#34;} {print $1,$2,$3}\u0026#39;\ra bb c\rConditional and Structure Conditional Expression ==, \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;=.\ngawk -F: \u0026#39;$7==\u0026#34;/bin/bash\u0026#34;{print $1}\u0026#39; /etc/passwd\rOutput all users who start with bash.\nConditional Statement A single statement inside if does not need {}.\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{if ($1\u0026gt;15) print $1}\u0026#39;\rMultiple statements inside if need {}.\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{if ($1\u0026gt;15) {x=2*$i; print x}\u0026#39;\rFor a single line else statement, the previous statement needs a ;.\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{if ($1\u0026gt;15) print $1; else print \u0026#34;no\u0026#34;}\u0026#39;\rMultiple lines do not need a semicolon.\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{ if ($i\u0026gt;15) { x=2*$i print x } else { print \u0026#34;no\u0026#34; } }\u0026#39;\rFOR Statement Calculate the sum of each field for each line, both += and ++ are supported.\necho \u0026#39;1 2 3\u0026#39; | gawk \u0026#39;{ total=0 for (i=1; i\u0026lt;=NF; i++) { total += $i } print total }\u0026#39;\rWHILE Statement Calculate the sum of each field for each line.\necho \u0026#39;1 2 3\u0026#39; | gawk \u0026#39;{ i=1 total=0 while (i\u0026lt;=NF) { total += $i i++ } print total }\u0026#39;\rDO-WHILE Statement Calculate the sum of each field for each line\necho \u0026#39;1 2 3\u0026#39; | gawk \u0026#39;{ i=1 total=0 do { total += $i i++ } while(i\u0026lt;=NF) print total }\u0026#39;\rFunction Related Built-in Functions int(x): take the integer part of x. exp(x): x to the power. sqrt(x): square root of x. rand(): a random number greater than 0 and less than 1. length(x): length of string x. tolower(x): convert x to lowercase. toupper(x): convert x to uppercase. There are many more, such as gensub, gsub.\nCustom Functions Custom functions must appear before BEGIN block.\ngawk \u0026#39; function random(ts, num) { srand(ts) return int(num * rand()) } BEGIN { ts=systime() print ts print random(ts, 10) }\u0026#39;\rYou can use function library files and then reference them.\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; funclib.gawk function random(ts, num) { srand(ts) return int(num * rand()) } EOF\rThe gawk program file is as follows.\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; test.gawk BEGIN { ts=systime() print ts print random(ts, 10) } EOF\rUse the -f option to reference two files.\ngawk -f funclib.gawk -f test.gawk\rYou cannot use inline program mode when referencing function libraries, you need to reference both.\nOther Examples Custom Variables Support mathematical operations and floating point numbers, not stronger than bash 🤪.\ngawk \u0026#39;BEGIN{a=2; a=a*2/3; print a}\u0026#39;\r1.33333\rArray Operations Features: associative arrays, similar to dictionaries, unordered.\ngawk \u0026#39;BEGIN{arr[\u0026#34;name\u0026#34;]=\u0026#34;foo\u0026#34;; print arr[\u0026#34;name\u0026#34;]}\u0026#39;\rYou can use numeric subscripts, which are actually dictionaries.\ngawk \u0026#39;BEGIN{arr[3]=\u0026#34;foo\u0026#34;; print arr[3]}\u0026#39;\rTraverse the array, delete elements.\ngawk \u0026#39;BEGIN{ arr[\u0026#34;a\u0026#34;]=1 arr[2]=2 arr[\u0026#34;c\u0026#34;]=\u0026#34;cat\u0026#34; delete arr[2] for (k in arr) { print \u0026#34;key:\u0026#34;,k,\u0026#34; val:\u0026#34;, arr[k] } } \u0026#39;\rkey: a val: 1 key: c val: cat\rFormatted Printing Processing floating point numbers.\ngawk \u0026#39;BEGIN{printf \u0026#34;%.2f\\n\u0026#34;, 2/3}\u0026#39;\r0.67\rSpecify width.\necho -e \u0026#39;foo\\nfoobar\u0026#39; | gawk \u0026#39;{printf \u0026#34;%8s\\n\u0026#34;, $1}\u0026#39;\rLeft alignment.\necho -e \u0026#39;foo\\nfoobar\u0026#39; | gawk \u0026#39;{printf \u0026#34;%-8s\\n\u0026#34;, $1}\u0026#39;\r","date":"2024-09-05","id":55,"permalink":"/en/linux/text/gawk-1/","summary":"\u003ch2 id=\"gnu-awk\"\u003eGnu Awk\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eGawk\u003c/code\u003e is the GNU version of the text processing tool.\nIn most GNU/Linux distributions, \u003ccode\u003eGawk\u003c/code\u003e is the default \u003ccode\u003eawk\u003c/code\u003e implementation, so there is usually no difference in daily use.\u003c/p\u003e","tags":[],"title":"GAWK-1"},{"content":"Regular Expression gawk defaults to using ERE mode.\nBasic Usage First, create the foo text file.\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo a1,a2,a3 b1,b2,b3 EOF\rgawk -F, \u0026#39;/1,a/{ print $1 }\u0026#39; foo\ra1\rHere, the entire line is matched, equivalent to $0.\nField-Specific Matching $2 ~ specifies the use of the second field for matching.\ngawk \u0026#39;BEGIN{ FS=\u0026#34;,\u0026#34; } $2 ~ /^[ab]2/{ print $2 }\u0026#39; foo\ra2 b2\rSub Substitution, replaces the first matched string.\nBasic Syntax sub(regex, replacement [, target])\rregex：The regular expression to match. replacement：The string to replace the match. target：Optional, the target string, defaults to $0. Not providing target defaults to whole line matching.\nBasic Usage echo \u0026#34;aa bb aa\u0026#34; | gawk \u0026#39;{ sub(/aa/, \u0026#34;cc\u0026#34;); print }\u0026#39;\rcc bb aa\rSpecify to replace the third column.\necho \u0026#34;aa bb aa\u0026#34; | gawk \u0026#39;{ sub(/aa/, \u0026#34;cc\u0026#34;, $3); print }\u0026#39;\raa bb cc\rSpecial Symbol \u0026amp; echo \u0026#34;app cat\u0026#34; | gawk \u0026#39;{ sub(/\\w+/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\r[app] cat\rGsub Global Substitution, globally replaces.\nBasic Syntax gsub(regex, replacement [, target])\rregex：The regular expression to match. replacement：The string to replace the match. target：Optional, the target string, defaults to $0. Not providing target defaults to whole line matching.\nBasic Usage echo \u0026#39;aa bb aa\u0026#39; | gawk \u0026#39;{ gsub(\u0026#34;aa\u0026#34;, \u0026#34;cc\u0026#34;); print }\u0026#39;\rcc bb cc\rSpecify to replace the third column.\necho \u0026#39;aa bb aa\u0026#39; | gawk \u0026#39;{ gsub(\u0026#34;aa\u0026#34;, \u0026#34;cc\u0026#34;, $3); print }\u0026#39;\raa bb cc\rSpecial Symbol \u0026amp; echo \u0026#34;app cat\u0026#34; | gawk \u0026#39;{ gsub(/\\w+/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\r[app] [cat]\rFirst Character of a Word \\\u0026lt; indicates the start of a word.\necho \u0026#39;app cat\u0026#39; | gawk \u0026#39;{ gsub(/\\\u0026lt;[a-z]/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\r[a]pp [c]at\rLast Character of a Word \\\u0026gt; indicates the end of a word.\necho \u0026#39;app cat\u0026#39; | gawk \u0026#39;{ gsub(/[a-z]\\\u0026gt;/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\rap[p] ca[t]\rGensub General Substitution, general replacement.\nMore powerful than sub and gsub. Supports capture groups. Can choose to replace specific matches. Does not modify the original, returns the replaced string. sub and gsub do not support capture groups. Basic Syntax gensub(regex, replacement, how [, target])\rregex：The regular expression to match. replacement：The replacement string, can use capture groups. how：Can specify global or the Nth match replacement. target：Optional, the target string, defaults to $0. Basic Usage Using g for global replacement.\necho \u0026#34;aa aa aa\u0026#34; | gawk \u0026#39;{ print gensub(/aa/, \u0026#34;bb\u0026#34;, \u0026#34;g\u0026#34;) }\u0026#39;\rbb bb bb\rReplace the second match.\necho \u0026#34;aa aa aa\u0026#34; | gawk \u0026#39;{ print gensub(/aa/, \u0026#34;bb\u0026#34;, \u0026#34;2\u0026#34;) }\u0026#39;\raa bb aa\rUsing Capture Groups \\1 represents the first matched parameter.\necho \u0026#34;aa-bb\u0026#34; | gawk \u0026#39;{ print gensub(/(\\w+)-(\\w+)/, \u0026#34;\\\\2:\\\\1\u0026#34;, \u0026#34;g\u0026#34;)}\u0026#39;\rbb:aa\r","date":"2024-09-05","id":56,"permalink":"/en/linux/text/gawk-2/","summary":"\u003ch2 id=\"regular-expression\"\u003eRegular Expression\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egawk\u003c/code\u003e defaults to using ERE mode.\u003c/p\u003e\n\u003ch3 id=\"basic-usage\"\u003eBasic Usage\u003c/h3\u003e\n\u003cp\u003eFirst, create the \u003ccode\u003efoo\u003c/code\u003e text file.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF \u0026gt; foo\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003ea1,a2,a3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eb1,b2,b3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egawk -F, \u003cspan class=\"s1\"\u003e\u0026#39;/1,a/{ print $1 }\u0026#39;\u003c/span\u003e foo\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ea1\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eHere, the entire line is matched, equivalent to \u003ccode\u003e$0\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"GAWK-2"},{"content":"hassle-free 无麻烦的，省心的。\nGo compiles to a single, static binary with minimal runtime dependencies, making deployment straightforward and hassle-free. syntactic sugar 语法糖。obscure =\u0026gt; 模糊/掩盖。\nRuby’s principle of “programmer happiness” sometimes results in syntactic sugar that may feel elegant to some but can obscure the inner workings of the code.\rheader section 头部信息。\nThe header section of the top command provides a snapshot of the overall system performance.\rreclaim 回收。\nThe available memory (avail Mem) includes both free RAM and memory that can be reclaimed from buffers and cache.\rparentheses 括号 ()。\nSubshells are usually created using parentheses (), command substitution $(...), or background execution.\rinvoke 唤起、调用、执行。下面是 Bash 环境变量相关的解释。\nWhen a program is invoked it is given an array of strings called the environment.\rexpands to 展开为，发展为，代表。这翻译怪怪的。\n($$) Expands to the process ID of the shell. In a subshell, it expands to the process ID of the invoking shell, not the subshell.\rskeletal 骨骼的，类似于脚手架。\nThe SKEL variable specifies the directory containing \u0026#34;skeletal\u0026#34; user files; in other words, files such as a sample .profile that will be copied to the new user\u0026#39;s home directory when it is created.\rhyphen 连字符。\n- (Hyphen): Represents a regular file. This is the most common file type, typically used for text files, binary files, or other standard files.\r","date":"2024-08-29","id":57,"permalink":"/en/linux/appendix/term-1/","summary":"\u003ch2 id=\"hassle-free\"\u003ehassle-free\u003c/h2\u003e\n\u003cp\u003e无麻烦的，省心的。\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\" text-wrap=\"wrap\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eGo compiles to a single, static binary with minimal runtime dependencies, making deployment straightforward and hassle-free. \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"syntactic-sugar\"\u003esyntactic sugar\u003c/h2\u003e\n\u003cp\u003e语法糖。\u003ccode\u003eobscure\u003c/code\u003e =\u0026gt; 模糊/掩盖。\u003c/p\u003e","tags":[],"title":"Terms - 1"},{"content":"","date":"2024-10-01","id":58,"permalink":"/en/","summary":"","tags":[],"title":"MINI-ROCKS"},{"content":"","date":"2024-09-30","id":59,"permalink":"/en/toys/","summary":"","tags":[],"title":"Toys"},{"content":"","date":"2024-09-08","id":60,"permalink":"/en/tech/cursor/","summary":"","tags":[],"title":"Cursor"},{"content":"","date":"2024-09-08","id":61,"permalink":"/en/tech/","summary":"","tags":[],"title":"Tech"},{"content":"","date":"2024-09-07","id":62,"permalink":"/en/tech/fourd-pocket/","summary":"","tags":[],"title":"Four-D Pocket"},{"content":"","date":"2024-09-05","id":63,"permalink":"/en/linux/","summary":"","tags":[],"title":"Linux"},{"content":"","date":"2024-09-05","id":64,"permalink":"/en/linux/text/","summary":"","tags":[],"title":"Text Processing"},{"content":"","date":"2024-09-02","id":65,"permalink":"/en/linux/script/","summary":"","tags":[],"title":"Script"},{"content":"","date":"2024-09-01","id":66,"permalink":"/en/linux/proc/","summary":"","tags":[],"title":"Process"},{"content":"","date":"2024-08-29","id":67,"permalink":"/en/linux/appendix/","summary":"","tags":[],"title":"Appendix"},{"content":"","date":"2024-08-29","id":68,"permalink":"/en/linux/perm/","summary":"","tags":[],"title":"Permission Management"},{"content":"","date":"2024-08-27","id":69,"permalink":"/en/linux/env/","summary":"","tags":[],"title":"Environment"},{"content":"","date":"2024-08-27","id":70,"permalink":"/en/linux/shell/","summary":"","tags":[],"title":"Shell"},{"content":"","date":"2024-08-24","id":71,"permalink":"/en/linux/cmd/","summary":"","tags":[],"title":"Commands"},{"content":"","date":"2024-07-24","id":72,"permalink":"/en/tech/dev-env/","summary":"","tags":[],"title":"Development Environment"},{"content":" KEY VALUE University SCAU Major SE Like Open Source Work 115NetDisk/KuGou/BIGO/Quwan Lang Golang/Python/PHP Recent Cursor Contact Me RedBook: @kugarocks GitHub: @kugarocks ","date":"0001-01-01","id":73,"permalink":"/en/about/","summary":"\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eKEY\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eVALUE\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eUniversity\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSCAU\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eMajor\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSE\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eLike\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eOpen Source\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eWork\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e115NetDisk/KuGou/BIGO/Quwan\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eLang\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGolang/Python/PHP\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eRecent\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCursor\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"contact-me\"\u003eContact Me\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eRedBook: \u003ca href=\"https://www.xiaohongshu.com/user/profile/65683d68000000001c01b1e5\"\u003e@kugarocks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGitHub: \u003ca href=\"https://github.com/kugarocks\"\u003e@kugarocks\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","tags":[],"title":"About Me"},{"content":"","date":"0001-01-01","id":74,"permalink":"/en/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":75,"permalink":"/en/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":76,"permalink":"/en/tags/","summary":"","tags":[],"title":"Tags"}]