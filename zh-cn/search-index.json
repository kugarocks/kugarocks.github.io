[{"content":"KEYBOARD CAT ROCKS 您的浏览器不支持嵌入式视频，但别担心，您可以下载它并用您喜欢的视频播放器观看！ ","date":"2024-09-30","id":0,"permalink":"/zh-cn/toys/readme/","summary":"\u003ch2 id=\"keyboard-cat-rocks\"\u003eKEYBOARD CAT ROCKS\u003c/h2\u003e\n\u003cvideo controls preload=\"auto\" width=\"100%\"  poster=\"/images/misc/keyboard-cat-poster.jpg\" playsinline class=\"html-video\"\u003e\n      \u003csource src=\"/videos/misc/keyboard-cat-original.mp4\" type=\"video/mp4\"\u003e\n    \u003cspan\u003e您的浏览器不支持嵌入式视频，但别担心，您可以\u003ca href=\"/videos/misc/keyboard-cat-original.mp4\"\u003e下载它\u003c/a\u003e并用您喜欢的视频播放器观看！\u003c/span\u003e\n  \u003c/video\u003e","tags":[],"title":"README"},{"content":"WHAT DO U GOT ","date":"2024-08-24","id":1,"permalink":"/zh-cn/linux/readme/","summary":"\u003ch2 id=\"what-do-u-got\"\u003eWHAT DO U GOT\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/win-mac-linux_hu10690778400494544015.webp\"\r\n  width=\"799\"\r\n  height=\"489\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"win-mac-linux\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e","tags":[],"title":"README"},{"content":"我能修好，相信我，我可是一个工程师。\n","date":"2024-07-21","id":2,"permalink":"/zh-cn/tech/readme/","summary":"\u003cp\u003e我能修好，相信我，我可是一个工程师。\u003c/p\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/meme/i-can-fix-it_hu2625081424092851265.webp\"\r\n  width=\"484\"\r\n  height=\"326\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"i-can-fix-it\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e","tags":[],"title":"README"},{"content":"简介 偶然间发现 minions.wiki 的域名还没注册，于是就做了一个干净纯粹的小黄人百科。 不过里面的小黄还不完整，有空的时候我会继续完善，如果你有兴趣，欢迎提交 PR。\nMinions Wiki\r小黄人百科\nGithub Repository\rkugarocks/minions-wiki\nHUGO 项目使用 Hugo 和 hugo-cards 主题。 做的时候发现 hugo-cards 不支持 Profile Sidebar，在移动端的样式也不够理想，所以自己改了一下。 后来提交了 PR，现在已经合并了， 这也是我第一个在 GitHub 上合并的 PR。\nCursor 里面的翻译是使用 Cursor 完成的，不得不说其中的港式粤语翻译还蛮有意思的。\nDespicable Me Wiki 下面是另外一个关于小黄人电影的百科网站， 不过它不支持中文，有广告，界面还丑丑的。\nDespicable Me Wiki\rdespicableme.fandom.com\n","date":"2024-09-30","id":3,"permalink":"/zh-cn/toys/minions-wiki/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e偶然间发现 \u003ccode\u003eminions.wiki\u003c/code\u003e 的域名还没注册，于是就做了一个干净纯粹的小黄人百科。\n不过里面的小黄还不完整，有空的时候我会继续完善，如果你有兴趣，欢迎提交 PR。\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://minions.wiki\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eMinions Wiki\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003e小黄人百科\u003c/p\u003e","tags":[],"title":"小黄人百科"},{"content":"Linux Torvalds 这个名字的发音要怎么读呢，挺好奇的，搜了一下，还真有人搞了一个集合，救命啊哈哈哈。\n您的浏览器不支持嵌入式视频，但别担心，您可以下载它并用您喜欢的视频播放器观看！ Linux 的定义 根据维斯百科的资料，Linux 既是一个 Unix-like 内核， 又是一个基于 Linux 内核的开源 Unix-like 操作系统的统称。 Linux 内核由 Linus Torvalds 于 1991 年 9 月 17 日首次发布， 它通常被打包成一个发行版本，其中包括内核以及许多由 GNU 项目提供的系统软件和库。\nLinux 的历史 1990 年，Linux Torvalds 在 Helsinki 大学上了一门 Unix 课程。 1991 年，他对操作系统产生了兴趣，但是课本里 Minix 系统（Minimal Unix-like 操作系统）的许可证只能用于教学。 于是他自己写了一个操作系统内核，这就是 Linux 内核的第一版。\n后来 Linux Torvalds 把内核发布到 Internet 上征求大家的意见。 就这样，一个集合全球智慧的开源操作系统从此诞生了，还配套了一系列由 GNU 组积开发的系统软件和库。\nLinux 名字的由来 Torvalds 一开始想把操作系统命名为 Freax，这是 free、freak,、x（Unix）的混成词。 起初他也有想过用 Linux 这个名字，但觉得太自负了，所以没有用。 他的同事 Ari Lemmke，是当时 FTP 的管理员之一，觉得 Freax 不好，未经 Torvalds 同意的情况下，将项目命名为 Linux。 后来，Torvalds 也同意了 Linux 这个名字。\nLinux 吉祥物 Tux Torvalds 提到他以前在 Canberra 动物园被一只企鹅咬过。 他觉得一只吃饱后坐着的稍微有点胖的企鹅非常合适作为 Linux 的吉祥物。 第一个称这只企鹅为 Tux 的人是 James Hughes，他说这代表 (T)orvalds (u)ni(x)。 另外 Tux 也是 Tuxedo (燕尾服)的缩写，燕尾服与企鹅的外观相似。\n","date":"2024-08-24","id":4,"permalink":"/zh-cn/linux/say-my-name/","summary":"\u003ch2 id=\"linux-torvalds\"\u003eLinux Torvalds\u003c/h2\u003e\n\u003cp\u003e这个名字的发音要怎么读呢，挺好奇的，搜了一下，还真有人搞了一个集合，救命啊哈哈哈。\u003c/p\u003e\n\u003cvideo controls preload=\"auto\" width=\"100%\"  poster=\"/images/misc/say-my-name-poster.jpg\" playsinline class=\"html-video\"\u003e\n      \u003csource src=\"/videos/misc/say-my-name.mp4\" type=\"video/mp4\"\u003e\n    \u003cspan\u003e您的浏览器不支持嵌入式视频，但别担心，您可以\u003ca href=\"/videos/misc/say-my-name.mp4\"\u003e下载它\u003c/a\u003e并用您喜欢的视频播放器观看！\u003c/span\u003e\n  \u003c/video\u003e\n\u003ch2 id=\"linux-的定义\"\u003eLinux 的定义\u003c/h2\u003e\n\u003cp\u003e根据维斯百科的资料，Linux 既是一个 Unix-like 内核，\n又是一个基于 Linux 内核的开源 Unix-like 操作系统的统称。\nLinux 内核由 Linus Torvalds 于 1991 年 9 月 17 日首次发布，\n它通常被打包成一个发行版本，其中包括内核以及许多由 GNU 项目提供的系统软件和库。\u003c/p\u003e","tags":[],"title":"第一章：Say My Name"},{"content":"Keyboard System Preferences\nKey Repeat: Fast Delay Until Repeat: Short Modifier Keys: Caps Lock -\u0026gt; Escape defaults write -g ApplePressAndHoldEnabled -bool false\rShortcuts\nApp Shortcuts, + All Applications, Zoom, CMD+M All Applications, Minimize, CMD+H Chrome, Bookmark This Tab/Tab\u0026hellip;, CMD+L Chrome, Open Location\u0026hellip;, CMD+D Chrome, Downloads, SHIFT+CMD+D Input Sources Select the previous input source, CMD+E Spotlight Show Spotlight search: OPTION+SPACE Install Alfred iTerm2 iTerm2\rTerminal emulator for macOS.\nPreferences config\nSearch -\u0026gt; Dim inactive split panes Search -\u0026gt; Global key bindings, + Select Split Pane Above, CMD+I Select Split Pane on Left, CMD+J Select Split Pane Below, CMD+K Select Split Pane on Right, CMD+L Oh My Zsh Installation command\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34;\rCustom Alias:\n# custom aliases alias zsh=\u0026#39;vim ~/.zshrc\u0026#39; alias q=\u0026#39;exit\u0026#39; alias s=\u0026#39;sudo\u0026#39; alias v=\u0026#39;vim\u0026#39; alias g=\u0026#39;git\u0026#39; alias ga=\u0026#39;git add\u0026#39; alias gc=\u0026#39;git checkout\u0026#39; alias gs=\u0026#39;git status\u0026#39; alias gd=\u0026#39;git diff\u0026#39; alias sv=\u0026#39;sudo vim\u0026#39; alias sc=\u0026#34;source ~/.zshrc\u0026#34; alias ..=\u0026#39;cd ..\u0026#39; alias cls=\u0026#39;clear\u0026#39; alias nano=\u0026#34;vim\u0026#34; alias tailf=\u0026#34;tail -f\u0026#34; alias lf=\u0026#39;ll -p | grep -v /\u0026#39; alias ldir=\u0026#39;ls -ld -- */\u0026#39;\rHSTR HSTR\rEasily view, navigate and search your command history.\nbrew install hstr\rConfigure HSTR just by running:\nhstr --show-zsh-configuration \u0026gt;\u0026gt; ~/.zshrc\rGit Config Replace name, email, GitHub user.\n[user] name = kuga email = kuga@cestbon.mbp [alias] pr = pull --rebase br = branch -avv ci = commit co = checkout cm = checkout master mg = merge st = status l = log --color --graph --pretty=format:\u0026#39;%Cred%h%Creset -%C(bold yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --abbrev-commit accept-ours = \u0026#34;!f() { files=\\\u0026#34;$@\\\u0026#34;; [ -z $files ] \u0026amp;\u0026amp; files=\u0026#39;.\u0026#39;; git checkout --ours -- $files; git add -u $files; }; f\u0026#34; accept-theirs = \u0026#34;!f() { files=\\\u0026#34;$@\\\u0026#34;; [ -z $files ] \u0026amp;\u0026amp; files=\u0026#39;.\u0026#39;; git checkout --theirs -- $files; git add -u $files; }; f\u0026#34; diffeol = diff --ignore-space-at-eol [core] excludesfile = /Users/hairdresser/.gitignore [color] branch = auto diff = auto status = auto [GitHub] user = kuga [credential] helper = osxkeychain [pull] rebase = false\rKubernetes kubectl kubectl\rThe Kubernetes command-line tool.\nbrew install kubectl\rkubectx kubectx\rSwitch between contexts \u0026amp; namespaces.\nbrew install kubectx\rAdd the following to your .zshrc file:\n# kubectx alias kc=\u0026#34;kubectx\u0026#34; alias kn=\u0026#34;kubens\u0026#34; KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6)\rkube-ps1 kube-ps1\rKubernetes prompt for bash and zsh.\nbrew install kube-ps1\rAdd the following to your .zshrc file:\n# kube-ps1 # https://github.com/jonmosco/kube-ps1 # todo change source path source /usr/local/Cellar/kube-ps1/0.7.0/share/kube-ps1.sh PROMPT=\u0026#39;$(kube_ps1)\u0026#39;$PROMPT KUBE_PS1_PREFIX=\u0026#34;[\u0026#34; KUBE_PS1_SUFFIX=\u0026#34;]\u0026#34; KUBE_PS1_SYMBOL_ENABLE=false KUBE_PS1_CTX_COLOR=\u0026#34;83\u0026#34; KUBE_PS1_NS_COLOR=\u0026#34;201\u0026#34;\rkubectl-aliases kubectl-aliases\rConvenient shell aliases for kubectl.\nDownload .kubectl_aliases file \u0026amp; Add the following to your .zshrc file:\n# load kubectl aliases file [ -f ~/.kubectl_aliases ] \u0026amp;\u0026amp; source ~/.kubectl_aliases # Print the full command before running it function kubectl() { echo \u0026#34;+ kubectl $@\u0026#34;\u0026gt;\u0026amp;2; command kubectl $@; }\r","date":"2024-07-24","id":5,"permalink":"/zh-cn/tech/dev-env/macos/","summary":"\u003ch2 id=\"keyboard\"\u003eKeyboard\u003c/h2\u003e\n\u003cp\u003eSystem Preferences\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKey Repeat: Fast\u003c/li\u003e\n\u003cli\u003eDelay Until Repeat: Short\u003c/li\u003e\n\u003cli\u003eModifier Keys: Caps Lock -\u0026gt; Escape\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edefaults write -g ApplePressAndHoldEnabled -bool false\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eShortcuts\u003c/p\u003e","tags":[],"title":"MacOS"},{"content":"简介 有一次我想把一段文本从一台电脑发到另一台电脑上，但发现如此简单的需求却没有直接了当的工具。 问了一下 ChatGPT，总结了一下现有的工具，发现都不太好用。\n方法 缺点 Airdrop 创建文件和搜索设备 iMessage 登录苹果账号 通用剪贴板 登录苹果账号 微信/QQ 登录两个账号 邮件 什么年代了 那不如自己写一个聊天室，访问一下网页直接发送就行了，用 Cursor 开发还很快乐。 聊天室对移动端也做了一些简单的适配，服务部署在阿里云广州节点，访问速度嘎嘎快。\nMinichat\r迷你聊天室\nGithub Repository\rkugarocks/minichat\n主题 服务启动的时候可以指定主题，默认是小黄人。\ngo run main.go -theme onepiece\r小黄人 名称 头像 Stuart, Kevin Bob, Dave Jerry, Phil Tim, Mark 海贼王 名称 头像 Luffy, Zoro Nami, Sanji Robin, Franky Chopper, Usopp Brook 提示词 提示词也很简单，只要定义好使用的技术栈，根据自己的需求一步步修改就行了。 不过下面的提示词只是很小一部份，因为整个过程还包括大量的细节和优化，这里就不展开了。\n* 实现一个简单的实时聊天室 * 服务端使用 Golang、Websocket * 客户端使用网页\r* 网页左侧显示在线用户列表 * 当网页打开时自动生成用户名 * 用户名随机从复仇者联盟的角色中选取 * 不能选取重复的用户名 * 用户名的总数为 20 个\r* 网页右侧下方是消息输入框 * 消息输入框支持多行输入 * 消息输入框可以拖动调整大小\r* 聊天消息窗口支持多行显示 * 聊天内容用边框包围 * 用户名放在边框的外面，上方\r* 消息边框的右上方添加复制按钮 * 点击复制按钮后文字改为已复制 * 1 秒之后恢复为原来的文字\r* 消息输入框和聊天消息窗口用一条线分隔 * 可以上下拖动这条线来改变两个窗口大小 * 页面的风格改成终端形式\r* 用户名字的颜色用绿色 * 其它颜色用点黑白灰\r","date":"2024-09-30","id":6,"permalink":"/zh-cn/toys/minichat/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e有一次我想把一段文本从一台电脑发到另一台电脑上，但发现如此简单的需求却没有直接了当的工具。\n问了一下 ChatGPT，总结了一下现有的工具，发现都不太好用。\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e方法\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e缺点\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eAirdrop\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e创建文件和搜索设备\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eiMessage\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e登录苹果账号\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e通用剪贴板\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e登录苹果账号\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e微信/QQ\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e登录两个账号\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e邮件\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e什么年代了\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e那不如自己写一个聊天室，访问一下网页直接发送就行了，用 Cursor 开发还很快乐。\n聊天室对移动端也做了一些简单的适配，服务部署在阿里云广州节点，访问速度嘎嘎快。\u003c/p\u003e","tags":[],"title":"迷你聊天室"},{"content":"早期终端 早期的终端是一种独立的硬件设备，用于连接到主计算机或服务器。它们通常包括：\n输入设备：如键盘，用于输入命令和数据。 输出设备：如显示器或打印机，用于显示计算结果和系统反馈。 例如：早期的 Teletype (tty) 终端、DEC VT100 终端。\n现代终端 现代终端更多是以软件形式存在的，即终端模拟器（Terminal Emulator）， 它们在现代操作系统中（如Linux、macOS、Windows）作为应用程序运行，模拟早期硬件终端的功能。\n常见的终端模拟器 终端模拟器 描述 iTerm2 macOS 系统上的高级终端模拟器，提供了丰富的功能，如分屏、标签页、搜索等。 GNOME Terminal 常见于 Linux 系统的默认终端模拟器，功能强大且易于使用。 PuTTY Windows 系统上广泛使用的 SSH 客户端，适用于远程连接和管理。 Windows Terminal Windows 系统上的现代终端模拟器，支持多个命令行环境，如 PowerShell、CMD、WSL。 Teletype 虽然 Teletype 设备现在已经不再使用了，但它的概念和功能依然保留在 Linux 中。\n/dev/tty 可以看到它的文件类型是 c（字符设备），代表当前进程所连接的终端设备。\nls -l /dev/tty\rcrw-rw-rw- 1 root tty 5, 0 Aug 7 22:33 /dev/tty\r它的权限是 666，主设备号是 5，次设备号是 0，这就是我们常常看到的标准输入/输出。\necho \u0026#34;Hello, World\u0026#34; \u0026gt; /dev/tty\rread -p \u0026#34;Enter your name: \u0026#34; name \u0026lt; /dev/tty echo \u0026#34;Hello, $name\u0026#34;\r/dev/pts PTS 是伪终端的简写（Pseudo-Terminal），/dev/pts 是一个目录，用于存放伪终端设备文件。\nls -l /dev/pts/\rcrw------- 1 root tty 136, 0 Aug 8 09:52 0 c--------- 1 root root 5, 2 Aug 7 21:30 ptmx\r列出 /dev/pts 目录的文件，一般情况下会看到两类文件。\nptmx：Master Device，主设备，用于创建和管理伪终端对。 0/1/2：Slave Device，从设备，每一个 ssh 会话对应一个数字。 在命令行输入 tty 命令可以看到当前连接的伪终端设备文件。\ntty\r/dev/pts/0\rman tty\rtty - print the file name of the terminal connected to standard input\r查看当前登录的用户 最常用的方法是 w 命令。\nw\r11:18:19 up 15 days, 20:08, 2 users, load average: 0.00, 0.01, 0.05 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/0 120.231.138.130 10:59 3.00s 0.02s 0.00s w root pts/1 120.231.138.130 11:11 6:41 0.01s 0.01s -bash\r还可以使用 who 命令。\nwho\rroot pts/0 2024-08-04 10:59 (120.231.138.130) root pts/1 2024-08-04 11:11 (120.231.138.130)\r当然你要直接用 ls 也行。\nls -l /dev/pts/\rcrw------- 1 root tty 136, 0 Aug 8 2024 0 crw------- 1 root tty 136, 1 Aug 8 09:53 1 c--------- 1 root root 5, 2 Aug 7 21:30 ptmx\r给特定 PTS 发送消息 echo \u0026#34;hello, world\u0026#34; \u0026gt; /dev/pts/1\r强制退出特定 PTS ps -t /dev/pts/1\rkill -9 PID\r","date":"2024-08-24","id":7,"permalink":"/zh-cn/linux/terminal/","summary":"\u003ch2 id=\"早期终端\"\u003e早期终端\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/ibm-2260_hu8804125439870718022.webp\"\r\n  width=\"717\"\r\n  height=\"579\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"ibm-2260\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e\n\u003cp\u003e早期的终端是一种独立的硬件设备，用于连接到主计算机或服务器。它们通常包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e输入设备\u003c/strong\u003e：如键盘，用于输入命令和数据。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输出设备\u003c/strong\u003e：如显示器或打印机，用于显示计算结果和系统反馈。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如：早期的 Teletype (tty) 终端、DEC VT100 终端。\u003c/p\u003e\n\u003ch2 id=\"现代终端\"\u003e现代终端\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/iterm2-cover_hu8964007120718632924.webp\"\r\n  width=\"1600\"\r\n  height=\"624\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"iterm2\"id=\"h-rh-i-1\"\r\n/\u003e\u003c/p\u003e\n\u003cp\u003e现代终端更多是以软件形式存在的，即终端模拟器（Terminal Emulator），\n它们在现代操作系统中（如Linux、macOS、Windows）作为应用程序运行，模拟早期硬件终端的功能。\u003c/p\u003e\n\u003ch2 id=\"常见的终端模拟器\"\u003e常见的终端模拟器\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e终端模拟器\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e描述\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eiTerm2\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003emacOS 系统上的高级终端模拟器，提供了丰富的功能，如分屏、标签页、搜索等。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eGNOME Terminal\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e常见于 Linux 系统的默认终端模拟器，功能强大且易于使用。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003ePuTTY\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eWindows 系统上广泛使用的 SSH 客户端，适用于远程连接和管理。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eWindows Terminal\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eWindows 系统上的现代终端模拟器，支持多个命令行环境，如 PowerShell、CMD、WSL。\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"teletype\"\u003eTeletype\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/teletype-model-33_hu1566251502718545479.webp\"\r\n  width=\"1024\"\r\n  height=\"683\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"teletype-model-33\"id=\"h-rh-i-2\"\r\n/\u003e\u003c/p\u003e","tags":[],"title":"第二章：终端"},{"content":"\r# If you come from bash you might have to change your $PATH. # export PATH=$HOME/bin:/usr/local/bin:$PATH # Path to your oh-my-zsh installation. export ZSH=\u0026#34;$HOME/.oh-my-zsh\u0026#34; # Set name of the theme to load --- if set to \u0026#34;random\u0026#34;, it will # load a random theme each time oh-my-zsh is loaded, in which case, # to know which specific one was loaded, run: echo $RANDOM_THEME # See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes ZSH_THEME=\u0026#34;robbyrussell\u0026#34; # Set list of themes to pick from when loading at random # Setting this variable when ZSH_THEME=random will cause zsh to load # a theme from this variable instead of looking in $ZSH/themes/ # If set to an empty array, this variable will have no effect. # ZSH_THEME_RANDOM_CANDIDATES=( \u0026#34;robbyrussell\u0026#34; \u0026#34;agnoster\u0026#34; ) # Uncomment the following line to use case-sensitive completion. # CASE_SENSITIVE=\u0026#34;true\u0026#34; # Uncomment the following line to use hyphen-insensitive completion. # Case-sensitive completion must be off. _ and - will be interchangeable. # HYPHEN_INSENSITIVE=\u0026#34;true\u0026#34; # Uncomment one of the following lines to change the auto-update behavior # zstyle \u0026#39;:omz:update\u0026#39; mode disabled # disable automatic updates # zstyle \u0026#39;:omz:update\u0026#39; mode auto # update automatically without asking # zstyle \u0026#39;:omz:update\u0026#39; mode reminder # just remind me to update when it\u0026#39;s time # Uncomment the following line to change how often to auto-update (in days). # zstyle \u0026#39;:omz:update\u0026#39; frequency 13 # Uncomment the following line if pasting URLs and other text is messed up. # DISABLE_MAGIC_FUNCTIONS=\u0026#34;true\u0026#34; # Uncomment the following line to disable colors in ls. # DISABLE_LS_COLORS=\u0026#34;true\u0026#34; # Uncomment the following line to disable auto-setting terminal title. # DISABLE_AUTO_TITLE=\u0026#34;true\u0026#34; # Uncomment the following line to enable command auto-correction. # ENABLE_CORRECTION=\u0026#34;true\u0026#34; # Uncomment the following line to display red dots whilst waiting for completion. # You can also set it to another string to have that shown instead of the default red dots. # e.g. COMPLETION_WAITING_DOTS=\u0026#34;%F{yellow}waiting...%f\u0026#34; # Caution: this setting can cause issues with multiline prompts in zsh \u0026lt; 5.7.1 (see #5765) # COMPLETION_WAITING_DOTS=\u0026#34;true\u0026#34; # Uncomment the following line if you want to disable marking untracked files # under VCS as dirty. This makes repository status check for large repositories # much, much faster. # DISABLE_UNTRACKED_FILES_DIRTY=\u0026#34;true\u0026#34; # Uncomment the following line if you want to change the command execution time # stamp shown in the history command output. # You can set one of the optional three formats: # \u0026#34;mm/dd/yyyy\u0026#34;|\u0026#34;dd.mm.yyyy\u0026#34;|\u0026#34;yyyy-mm-dd\u0026#34; # or set a custom format using the strftime function format specifications, # see \u0026#39;man strftime\u0026#39; for details. # HIST_STAMPS=\u0026#34;mm/dd/yyyy\u0026#34; # Would you like to use another custom folder than $ZSH/custom? # ZSH_CUSTOM=/path/to/new-custom-folder # Which plugins would you like to load? # Standard plugins can be found in $ZSH/plugins/ # Custom plugins may be added to $ZSH_CUSTOM/plugins/ # Example format: plugins=(rails git textmate ruby lighthouse) # Add wisely, as too many plugins slow down shell startup. plugins=(git) source $ZSH/oh-my-zsh.sh # User configuration # export MANPATH=\u0026#34;/usr/local/man:$MANPATH\u0026#34; # You may need to manually set your language environment # export LANG=en_US.UTF-8 # Preferred editor for local and remote sessions # if [[ -n $SSH_CONNECTION ]]; then # export EDITOR=\u0026#39;vim\u0026#39; # else # export EDITOR=\u0026#39;mvim\u0026#39; # fi # Compilation flags # export ARCHFLAGS=\u0026#34;-arch x86_64\u0026#34; # Set personal aliases, overriding those provided by oh-my-zsh libs, # plugins, and themes. Aliases can be placed here, though oh-my-zsh # users are encouraged to define aliases within the ZSH_CUSTOM folder. # For a full list of active aliases, run `alias`. # # Example aliases # alias zshconfig=\u0026#34;mate ~/.zshrc\u0026#34; # alias ohmyzsh=\u0026#34;mate ~/.oh-my-zsh\u0026#34; # custom aliases alias zsh=\u0026#39;vim ~/.zshrc\u0026#39; alias q=\u0026#39;exit\u0026#39; alias s=\u0026#39;sudo\u0026#39; alias v=\u0026#39;vim\u0026#39; alias g=\u0026#39;git\u0026#39; alias ga=\u0026#39;git add\u0026#39; alias gc=\u0026#39;git checkout\u0026#39; alias gs=\u0026#39;git status\u0026#39; alias gd=\u0026#39;git diff\u0026#39; alias sv=\u0026#39;sudo vim\u0026#39; alias sc=\u0026#34;source ~/.zshrc\u0026#34; alias ..=\u0026#39;cd ..\u0026#39; alias cls=\u0026#39;clear\u0026#39; alias nano=\u0026#34;vim\u0026#34; alias tailf=\u0026#34;tail -f\u0026#34; alias lf=\u0026#39;ll -p | grep -v /\u0026#39; alias ldir=\u0026#39;ls -ld -- */\u0026#39; # kubectx alias kc=\u0026#34;kubectx\u0026#34; alias kn=\u0026#34;kubens\u0026#34; KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) # kube-ps1 # https://github.com/jonmosco/kube-ps1 # todo change source path source /usr/local/Cellar/kube-ps1/0.8.0/share/kube-ps1.sh PROMPT=\u0026#39;$(kube_ps1)\u0026#39;$PROMPT KUBE_PS1_PREFIX=\u0026#34;[\u0026#34; KUBE_PS1_SUFFIX=\u0026#34;]\u0026#34; KUBE_PS1_SYMBOL_ENABLE=false KUBE_PS1_CTX_COLOR=\u0026#34;83\u0026#34; KUBE_PS1_NS_COLOR=\u0026#34;201\u0026#34; # kubectl alias # load kubectl aliases file [ -f ~/.kubectl_aliases ] \u0026amp;\u0026amp; source ~/.kubectl_aliases # Print the full command before running it function kubectl() { echo \u0026#34;+ kubectl $@\u0026#34;\u0026gt;\u0026amp;2; command kubectl $@; } # HSTR configuration - add this to ~/.zshrc alias hh=hstr # hh to be alias for hstr setopt histignorespace # skip cmds w/ leading space from history export HSTR_CONFIG=hicolor # get more colors bindkey -s \u0026#34;\\C-r\u0026#34; \u0026#34;\\C-a hstr -- \\C-j\u0026#34; # bind hstr to Ctrl-r (for Vi mode check doc) export HSTR_TIOCSTI=y # snippet export PATH=/Users/kuga/snippet:$PATH # LANG Config export LANG=en_US.UTF-8 export LC_CTYPE=en_US.UTF-8\r","date":"2024-07-24","id":8,"permalink":"/zh-cn/tech/dev-env/zshrc/","summary":"\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# If you come from bash you might have to change your $PATH.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export PATH=$HOME/bin:/usr/local/bin:$PATH\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Path to your oh-my-zsh installation.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eZSH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$HOME\u003c/span\u003e\u003cspan class=\"s2\"\u003e/.oh-my-zsh\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Set name of the theme to load --- if set to \u0026#34;random\u0026#34;, it will\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# load a random theme each time oh-my-zsh is loaded, in which case,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# to know which specific one was loaded, run: echo $RANDOM_THEME\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eZSH_THEME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;robbyrussell\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Set list of themes to pick from when loading at random\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Setting this variable when ZSH_THEME=random will cause zsh to load\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# a theme from this variable instead of looking in $ZSH/themes/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# If set to an empty array, this variable will have no effect.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ZSH_THEME_RANDOM_CANDIDATES=( \u0026#34;robbyrussell\u0026#34; \u0026#34;agnoster\u0026#34; )\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to use case-sensitive completion.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# CASE_SENSITIVE=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to use hyphen-insensitive completion.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Case-sensitive completion must be off. _ and - will be interchangeable.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# HYPHEN_INSENSITIVE=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment one of the following lines to change the auto-update behavior\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; mode disabled  # disable automatic updates\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; mode auto      # update automatically without asking\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; mode reminder  # just remind me to update when it\u0026#39;s time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to change how often to auto-update (in days).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# zstyle \u0026#39;:omz:update\u0026#39; frequency 13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line if pasting URLs and other text is messed up.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_MAGIC_FUNCTIONS=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to disable colors in ls.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_LS_COLORS=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to disable auto-setting terminal title.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_AUTO_TITLE=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to enable command auto-correction.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ENABLE_CORRECTION=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line to display red dots whilst waiting for completion.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# You can also set it to another string to have that shown instead of the default red dots.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# e.g. COMPLETION_WAITING_DOTS=\u0026#34;%F{yellow}waiting...%f\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Caution: this setting can cause issues with multiline prompts in zsh \u0026lt; 5.7.1 (see #5765)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# COMPLETION_WAITING_DOTS=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line if you want to disable marking untracked files\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# under VCS as dirty. This makes repository status check for large repositories\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# much, much faster.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# DISABLE_UNTRACKED_FILES_DIRTY=\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Uncomment the following line if you want to change the command execution time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# stamp shown in the history command output.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# You can set one of the optional three formats:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# \u0026#34;mm/dd/yyyy\u0026#34;|\u0026#34;dd.mm.yyyy\u0026#34;|\u0026#34;yyyy-mm-dd\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# or set a custom format using the strftime function format specifications,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# see \u0026#39;man strftime\u0026#39; for details.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# HIST_STAMPS=\u0026#34;mm/dd/yyyy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Would you like to use another custom folder than $ZSH/custom?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ZSH_CUSTOM=/path/to/new-custom-folder\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Which plugins would you like to load?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Standard plugins can be found in $ZSH/plugins/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Custom plugins may be added to $ZSH_CUSTOM/plugins/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Example format: plugins=(rails git textmate ruby lighthouse)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Add wisely, as too many plugins slow down shell startup.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eplugins\u003c/span\u003e\u003cspan class=\"o\"\u003e=(\u003c/span\u003egit\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ZSH\u003c/span\u003e/oh-my-zsh.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# User configuration\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export MANPATH=\u0026#34;/usr/local/man:$MANPATH\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# You may need to manually set your language environment\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export LANG=en_US.UTF-8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Preferred editor for local and remote sessions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# if [[ -n $SSH_CONNECTION ]]; then\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#   export EDITOR=\u0026#39;vim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# else\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#   export EDITOR=\u0026#39;mvim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# fi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Compilation flags\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# export ARCHFLAGS=\u0026#34;-arch x86_64\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Set personal aliases, overriding those provided by oh-my-zsh libs,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# plugins, and themes. Aliases can be placed here, though oh-my-zsh\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# users are encouraged to define aliases within the ZSH_CUSTOM folder.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# For a full list of active aliases, run `alias`.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Example aliases\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# alias zshconfig=\u0026#34;mate ~/.zshrc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# alias ohmyzsh=\u0026#34;mate ~/.oh-my-zsh\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# custom aliases\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ezsh\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;vim ~/.zshrc\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;exit\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;sudo\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;vim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003eg\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ega\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git add\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003egc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git checkout\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003egs\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git status\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003egd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;git diff\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003esv\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;sudo vim\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003esc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;source ~/.zshrc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e ..\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;cd ..\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ecls\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;clear\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003enano\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;vim\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003etailf\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;tail -f\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003elf\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ll -p | grep -v /\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003eldir\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ls -ld -- */\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# kubectx\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ekc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;kubectx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ekn\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;kubens\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBECTX_CURRENT_FGCOLOR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003etput setaf 6\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# kube-ps1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# https://github.com/jonmosco/kube-ps1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# todo change source path\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e /usr/local/Cellar/kube-ps1/0.8.0/share/kube-ps1.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003ePROMPT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;$(kube_ps1)\u0026#39;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$PROMPT\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_PREFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_SUFFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;]\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_SYMBOL_ENABLE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_CTX_COLOR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;83\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKUBE_PS1_NS_COLOR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;201\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# kubectl alias\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# load kubectl aliases file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e -f ~/.kubectl_aliases \u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003esource\u003c/span\u003e ~/.kubectl_aliases\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Print the full command before running it\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e kubectl\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;+ kubectl \u003c/span\u003e\u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e2\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e kubectl \u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# HSTR configuration - add this to ~/.zshrc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e \u003cspan class=\"nv\"\u003ehh\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehstr                    \u003cspan class=\"c1\"\u003e# hh to be alias for hstr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esetopt histignorespace           \u003cspan class=\"c1\"\u003e# skip cmds w/ leading space from history\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHSTR_CONFIG\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehicolor       \u003cspan class=\"c1\"\u003e# get more colors\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebindkey -s \u003cspan class=\"s2\"\u003e\u0026#34;\\C-r\u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\\C-a hstr -- \\C-j\u0026#34;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# bind hstr to Ctrl-r (for Vi mode check doc)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHSTR_TIOCSTI\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ey\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# snippet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ePATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/Users/kuga/snippet:\u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# LANG Config\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eLANG\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003een_US.UTF-8\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eLC_CTYPE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003een_US.UTF-8\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"zshrc"},{"content":"With Bubbletea Coming soon\u0026hellip;\n","date":"2024-09-30","id":9,"permalink":"/zh-cn/toys/terminal-tool/","summary":"\u003ch2 id=\"with-bubbletea\"\u003eWith Bubbletea\u003c/h2\u003e\n\u003cp\u003eComing soon\u0026hellip;\u003c/p\u003e","tags":[],"title":"命令行工具"},{"content":"GNU Bash Manual Bash 是 Linux 中的默认 Shell，官方手册是永远的神。\nBash Reference Manual\rBash 参考手册\nShell 的定义 在 Linux 中，Shell 是一个命令解释器（软件程序），负责接收用户输入的命令并将其传递给操作系统内核执行。 Shell 提供了一种用户与操作系统交互的接口，是操作系统的最外层。 另外它还支持编程，包括变量、循环、条件判断等，这也是我们常常所说的 Shell 脚本。 常见的 Shell 按时间排序有以下几种：\nShell 描述 Sh Bourne Shell，最早期的 Shell，作者是 Stephen Bourne。 Bash Bourne Again Shell，Linux 最常用的 Shell，由 GNU 开发。 Dash Debian Almquist Shell，常见于 Ubuntu。 Zsh Z Shell，功能更强大，macOS 默认 Shell。 与终端的关系 我们现在所说的终端一般是指终端模拟器，常见的有 GNOME Terminal、iTerm2 等等。 终端提供了一个界面，用户可以通过该界面与 Shell 进行交互。 终端不执行任何命令，它只是负责接收输入并显示输出。 Shell 是在终端中运行的进程，负责实际的命令解释和执行工作。 不要混淆终端和 Shell 的概念，例如下面的对话内容是不准确的。\nA：你平时用什么 Shell\nB：我用 iTerm2\nA：打开 Shell，然后输入\u0026hellip;\niTerm2 不是 Shell，是终端，另外 Shell 是不需要打开的，终端打开的时候就会默认启动。\n不同 Shell 的区别 历史和起源 sh 是 Unix 系统的原始 Shell，提供基本功能。 bash 是 sh 的增强版，功能更加丰富，是 Linux 上的主流 Shell。 zsh 是一种功能更强大且可高度定制的 Shell，结合了多个 Shell 的优势。 功能性 sh 提供基础的命令和脚本执行功能，主要用于简单脚本和系统任务。 bash 增加了交互式功能（如命令历史、补全），适合日常使用和复杂的脚本编写。 zsh 拥有最丰富的功能，特别是在自动补全、命令行提示、语法高亮等方面。 交互体验 sh 的交互体验较为基础，没有现代化的功能。 bash 提供了丰富的命令行交互体验，支持命令补全、历史等。 zsh 在交互体验上更进一步，支持更高级的补全、自动建议和错误更正。 定制化 sh 几乎没有定制化选项。 bash 支持一些定制化，但相比 zsh 仍然有限。 zsh 可以通过框架（如 Oh My Zsh）轻松定制，支持插件、主题等。 ","date":"2024-08-24","id":10,"permalink":"/zh-cn/linux/shell/intro/","summary":"\u003ch2 id=\"gnu-bash-manual\"\u003eGNU Bash Manual\u003c/h2\u003e\n\u003cp\u003eBash 是 Linux 中的默认 Shell，\u003cstrong\u003e官方手册是永远的神\u003c/strong\u003e。\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/bash.html\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eBash Reference Manual\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eBash 参考手册\u003c/p\u003e","tags":[],"title":"Shell 简介"},{"content":"更换国内源 主仓库的配置 cd $(brew --repo) \u0026amp;\u0026amp; git remote -v\rorigin https://github.com/Homebrew/brew.git (fetch) origin https://github.com/Homebrew/brew.git (push)\r核心仓库的配置 cd $(brew --repo homebrew/core) \u0026amp;\u0026amp; git remote -v\rorigin https://github.com/Homebrew/homebrew-core.git (fetch) origin https://github.com/Homebrew/homebrew-core.git (push)\r阿里云镜像 git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\rgit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\rexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles\r中科大镜像 git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/brew.git\rgit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\rexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles\r清华大学镜像 git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\rgit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\rexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\r验证源配置 完成更换源操作后，可执行以下命令验证源配置是否成功。\nbrew update\rbrew config | grep -E \u0026#39;ORIGIN|BOTTLE\u0026#39;\r通过 brew config 命令，你可以检查当前使用的仓库源和 Bottle 源。\n常见报错 如果报 homebrew/core 目录不存在，可使用以下命令检查。\nbrew tap\r如果没有输出 homebrew/core，可使用以下命令强制安装。\nbrew tap --force homebrew/core\r","date":"2024-08-22","id":11,"permalink":"/zh-cn/tech/fourd-pocket/homebrew/","summary":"\u003ch2 id=\"更换国内源\"\u003e更换国内源\u003c/h2\u003e\n\u003ch3 id=\"主仓库的配置\"\u003e主仓库的配置\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git remote -v\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/brew.git \u003cspan class=\"o\"\u003e(\u003c/span\u003efetch\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/brew.git \u003cspan class=\"o\"\u003e(\u003c/span\u003epush\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"核心仓库的配置\"\u003e核心仓库的配置\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git remote -v\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/homebrew-core.git \u003cspan class=\"o\"\u003e(\u003c/span\u003efetch\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin https://github.com/Homebrew/homebrew-core.git \u003cspan class=\"o\"\u003e(\u003c/span\u003epush\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"阿里云镜像\"\u003e阿里云镜像\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHOMEBREW_BOTTLE_DOMAIN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps://mirrors.aliyun.com/homebrew/homebrew-bottles\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"中科大镜像\"\u003e中科大镜像\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.ustc.edu.cn/brew.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHOMEBREW_BOTTLE_DOMAIN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps://mirrors.ustc.edu.cn/homebrew-bottles\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"清华大学镜像\"\u003e清华大学镜像\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit -C \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --repo homebrew/core\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eHOMEBREW_BOTTLE_DOMAIN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"验证源配置\"\u003e验证源配置\u003c/h3\u003e\n\u003cp\u003e完成更换源操作后，可执行以下命令验证源配置是否成功。\u003c/p\u003e","tags":[],"title":"Homebrew"},{"content":"神奇的 ^[[A 首先在命令行启动一个新 Shell /bin/sh。\n/bin/sh\r然后输入以下命令，一切正常。\nls -l\r按一下方向键 ⬆️ 查看上一条命令。\n^[[A\r你会发现看不到上一条命令，取而代之的是这几个字符 ^[[A。 这是因为早期的 sh 并不支持查看命令的历史记录，直到 bash 才把这个功能加了上去。\nANSI 转义序列 ^[[A 是一个 ANSI 的转义序列，表示上方向键。\n^[：表示 Esc 键（ASCII 编码 27），是转义序列的开始。 [A：表示具体的操作，[A 表示上方向键。 当在终端中按下上方向键时，终端会发送 ^[[A 这个字符序列给程序， 通常用于调用命令历史记录中的上一条命令。 由于 sh 并不支持查看命令的历史记录，它会原样输出键位的字符序列。\nUbuntu 中的 sh 在 Ubuntu 中，sh 其实是一个指向 dash 的链接。\nfile /bin/sh\r/bin/sh: symbolic link to dash\r因此 dash 也不支持查看命令的历史记录。\n历史记录功能 history 命令 不带参数会输出所有历史记录。\nhistory\r也可以使用简短命令，效果一样。\n!!\r.bash_history 文件 命令历史记录的持久化文件。\n-rw------- 1 kuga kuga 5516 Aug 24 08:23 /home/kuga/.bash_history\r在和 Shell 交互的过程中，命令的历史记录会被保存在内存里。 使用 history 命令可以实时查看历史记录的变化， 但只有当退出 Shell，历史记录才会被写入到 .bash_history 文件中。 如果想立刻写到历史记录的文件中，可以使用以下命令。\nhistory -a\r环境变量 HISTFILE 历史记录文件路径。\necho $HISTFILE\r/home/kuga/.bash_history\rHISTFILESIZE 历史记录文件大小。\necho $HISTFILESIZE\r2000\rHISTSIZE 内存中历史记录列表的大小。\necho $HISTSIZE\r1000\r","date":"2024-08-24","id":12,"permalink":"/zh-cn/linux/shell/command-history/","summary":"\u003ch2 id=\"神奇的-a\"\u003e神奇的 ^[[A\u003c/h2\u003e\n\u003cp\u003e首先在命令行启动一个新 Shell \u003ccode\u003e/bin/sh\u003c/code\u003e。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/bin/sh\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e然后输入以下命令，一切正常。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els -l\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e按一下方向键 ⬆️ 查看上一条命令。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e^\u003cspan class=\"o\"\u003e[[\u003c/span\u003eA\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e你会发现看不到上一条命令，取而代之的是这几个字符 \u003ccode\u003e^[[A\u003c/code\u003e。\n这是因为早期的 sh 并不支持查看命令的历史记录，直到 bash 才把这个功能加了上去。\u003c/p\u003e","tags":[],"title":"命令行历史记录"},{"content":"ChatGPT Conversation 🤡：用 Python 写爬虫，可输入 URL 🤖：给了一个 Beautiful Soup 的例子 🤡：有什么方法可抓取 JS 动态生成的内容 🤖：可使用 Selenium、Scrapy + Splash 🤡：使用 Scrapy + Splash 的方法 🤖：以下是使用 Scrapy 的脚本示例 跑了一下，发现日志全打在屏幕上，于是去官网看了一下配置，发现可以指定日志文件、抓取深度、优先级等等。 再问一下 GPT 让他给一些配置的例子和注释，最后整理优化一下，得出了下面最终的输入。\n写一个 python 爬虫脚本 - 一共 4 个输入参数 - 第 1 个参数：开始抓取的 URL - 第 2 个参数：匹配的关键字，支持多个 - 第 3 个参数：设置多个关键字匹配的与或关系 - 第 4 个参数：设置爬虫抓取的深度 - 当一个网页成功匹配多个关键字时，只记录一次 - 把匹配内容的 URL 输出到屏幕，一行一个 - 使用 splash 和 scrapy 技术 - scrapy 项目名称为 mycrawler - scrapy 的日志级别为 INFO，日志文件为 spider.log - scrapy 的配置单独放到 settings.py - settings.py 中添加抓取深度的相关配置 - settings.py 中的每个配置添加中文注释\rChatGPT Answer 下面是 ChatGPT 的回答，但我做了一些修改和优化。\n安装 Splash 安装 Scrapy-Splash 以及 Splash 服务：\npip install scrapy scrapy-splash\r创建 Scrapy 项目 首先，在命令行中创建一个新的 Scrapy 项目：\nscrapy startproject mycrawler\r在 Docker 运行 Splash docker run -p 8050:8050 scrapinghub/splash\r修改 settings.py # -*- coding: utf-8 -*- # Scrapy settings for mycrawler project BOT_NAME = \u0026#39;mycrawler\u0026#39; SPIDER_MODULES = [\u0026#39;mycrawler.spiders\u0026#39;] NEWSPIDER_MODULE = \u0026#39;mycrawler.spiders\u0026#39; # 使用 Splash 渲染 JavaScript 页面 SPLASH_URL = \u0026#39;http://localhost:8050\u0026#39; DOWNLOADER_MIDDLEWARES = { \u0026#39;scrapy_splash.SplashCookiesMiddleware\u0026#39;: 723, \u0026#39;scrapy_splash.SplashMiddleware\u0026#39;: 725, \u0026#39;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware\u0026#39;: 810, } SPIDER_MIDDLEWARES = { \u0026#39;scrapy_splash.SplashDeduplicateArgsMiddleware\u0026#39;: 100, } DUPEFILTER_CLASS = \u0026#39;scrapy_splash.SplashAwareDupeFilter\u0026#39; # 抓取深度设置 DEPTH_LIMIT = 3 # 设置抓取深度限制 # 每次抓取的深度 DEPTH_STATS = True # 启用深度统计 # 启用抓取深度统计 DEPTH_PRIORITY = 1 # 启用抓取深度优先级 # 设置抓取深度优先级，1 表示深度优先，-1 表示广度优先 # 日志设置 LOG_LEVEL = \u0026#39;INFO\u0026#39; # 日志级别 # 设置日志记录的级别为 INFO LOG_FILE = \u0026#39;spider.log\u0026#39; # 日志文件 # 指定日志文件的路径 # 其他配置 ROBOTSTXT_OBEY = True # 遵守 robots.txt 规则 # 爬虫是否遵守 robots.txt 规则，默认为 True # 设置 User-Agent，模拟常见浏览器 #USER_AGENT = \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\u0026#39;\r创建爬虫 在 mycrawler/spiders 目录中创建一个新的爬虫文件 my_spider.py，内容如下：\nimport scrapy from scrapy_splash import SplashRequest class MySpider(scrapy.Spider): name = \u0026#34;my_spider\u0026#34; # 定义爬虫的名称 def __init__(self, start_url, keywords, logic, depth, *args, **kwargs): super(MySpider, self).__init__(*args, **kwargs) self.start_urls = [start_url] # 初始化抓取的起始 URL self.keywords = keywords.split(\u0026#39;,\u0026#39;) # 将关键字字符串拆分为列表 self.logic = logic # 设置关键字匹配的逻辑关系（与或关系） self.custom_settings = {\u0026#39;DEPTH_LIMIT\u0026#39;: int(depth)} # 设置抓取深度限制 def start_requests(self): # 生成初始请求 for url in self.start_urls: yield SplashRequest(url, self.parse, args={\u0026#39;wait\u0026#39;: 1}) def parse(self, response): # 解析响应内容 # 获取页面文本并转为小写 page_text = response.text.lower() # 检查每个关键字是否在页面文本中出现 matches = [kw.lower() in page_text for kw in self.keywords] # 根据逻辑关系判断是否匹配成功 if (self.logic == \u0026#39;and\u0026#39; and all(matches)) or (self.logic == \u0026#39;or\u0026#39; and any(matches)): # 记录匹配的 URL self.log(f\u0026#39;Matched URL: {response.url}\u0026#39;) print(response.url) # 获取页面中的所有链接，并进行递归抓取 for next_page in response.css(\u0026#39;a::attr(href)\u0026#39;).getall(): if next_page: yield SplashRequest(response.urljoin(next_page), self.parse, args={\u0026#39;wait\u0026#39;: 1})\r运行爬虫 使用命令行运行爬虫：\nscrapy crawl my_spider -a start_url=\u0026#39;http://example.com\u0026#39; -a keywords=\u0026#39;keyword1,keyword2\u0026#39; -a logic=\u0026#39;and\u0026#39; -a depth=3\r这个脚本会根据输入参数抓取网页，匹配关键字并输出匹配的 URL。\n总结 ChatGPT 更像是一个引导的角色。 有时候你需要一个工具，可能你并不知道这个工具最后长什么样子。 但只要通过不断对话，一步步打磨，他总能给出你想要的答案。 这个过程还能学到不少的东西，只要你懂得如何提问。\n","date":"2024-07-24","id":13,"permalink":"/zh-cn/tech/fourd-pocket/chatgpt-crawler/","summary":"\u003ch2 id=\"chatgpt-conversation\"\u003eChatGPT Conversation\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e🤡：用 Python 写爬虫，可输入 URL\u003c/li\u003e\n\u003cli\u003e🤖：给了一个 Beautiful Soup 的例子\u003c/li\u003e\n\u003cli\u003e🤡：有什么方法可抓取 JS 动态生成的内容\u003c/li\u003e\n\u003cli\u003e🤖：可使用 Selenium、Scrapy + Splash\u003c/li\u003e\n\u003cli\u003e🤡：使用 Scrapy + Splash 的方法\u003c/li\u003e\n\u003cli\u003e🤖：以下是使用 Scrapy 的脚本示例\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e跑了一下，发现日志全打在屏幕上，于是去官网看了一下配置，发现可以指定日志文件、抓取深度、优先级等等。\n再问一下 GPT 让他给一些配置的例子和注释，最后整理优化一下，得出了下面最终的输入。\u003c/p\u003e","tags":[],"title":"用 ChatGPT 写爬虫"},{"content":"查看终端默认的 Shell echo $SHELL\r/bin/bash\r如果你在当前终端中启动了一个新的 Shell（比如从 Bash 切换到 Zsh）， 这个命令显示的仍然是默认的登录 Shell，这个配置是存放在 /etc/passwd 里面的。\ngrep root /etc/passwd\rroot:x:0:0:root:/root:/bin/bash\r在 macOS 中，默认的 Shell 信息通常是存储在用户账户设置中的，而不是 /etc/passwd 文件中。 从 macOS Catalina（10.15）开始，默认的 shell 已更改为 zsh，之前的默认 Shell 是 bash。 可以通过以下方法查看默认 shell。\ndscl . -read /Users/$(whoami) UserShell\rUserShell: /bin/zsh\r查看正在运行的 Shell $0 在 Shell 中运行返回 Shell 名称，在脚本中运行返回脚本名称/路径。\necho $0\r-bash\r前面的连字符 - 表示该 Shell 是用户的登录 Shell。\n也可以通过 ps 命令查看进程状态。\nps -p $$\rPID TTY TIME CMD 17216 pts/0 00:00:00 bash\r如果你在当前终端中启动了一个新的 Shell（从 Bash 切换到 Sh），上面的两种方法会显示 sh。\n查看支持的 Shell cat /etc/shells\r# /etc/shells: valid login shells /bin/sh /bin/bash /usr/bin/bash /bin/rbash /usr/bin/rbash /usr/bin/sh /bin/dash /usr/bin/dash /usr/bin/tmux /usr/bin/screen\r修改默认的 Shell 修改成功后，/etc/passwd 中的内容会随之更新。\nchsh 修改当前用户的登录 Shell 会要求输入用户密码。\nchsh -s /bin/bash\r使用 root 用户或 sudo 还可以修改其它用户的登录 Shell。\nsudo chsh -s /bin/bash kuga\r注意：如果我们输入一个不存在的 Shell。\nchsh -s /bin/foo\rchsh: /bin/foo is an invalid shell\r它会检查输入的 Shell 是否在 /etc/shells 文件中，防止因为输入了不合法的 Shell 而导致登录失败。\nusermod 使用这个命令需要 root 用户或拥有 sudo 权限的用户。\nsudo usermod -s /bin/dash kuga\r注意\nusermod 不会检查 Shell 的合法性，不建议使用。\nsudo usermod -s /bin/notexist kuga\r上面的命令不会报错，但会导致 kuga 用户无法登录。\n添加 sudo 权限 查看 sudo 组的成员列表。\ngetent group sudo\r给用户添加 sudo 组的权限，需要 root 执行。\nusermod -aG sudo username\r不要直接编辑 passwd 如果不小心写错配置，很有可能会导致整个系统无法登录。\n尽量不要使用 root 我就是不小心把 root 的登录 Shell 改成了 zsh， 但 Ubuntu 并没有安装 zsh，所以 root 就登不上去了。 还好我另外一个用户有 sudo 权限，还能正常登录， 我才成功把 root 的 Shell 改回来。 如果运气不好，没有 sudo 权限的用户，那就麻烦了。\nsudo chsh -s /bin/bash root\r","date":"2024-08-24","id":14,"permalink":"/zh-cn/linux/shell/basic-operations/","summary":"\u003ch2 id=\"查看终端默认的-shell\"\u003e查看终端默认的 Shell\u003c/h2\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$SHELL\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e如果你在当前终端中启动了一个新的 Shell（比如从 Bash 切换到 Zsh），\n这个命令显示的仍然是默认的登录 Shell，这个配置是存放在 \u003ccode\u003e/etc/passwd\u003c/code\u003e 里面的。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egrep root /etc/passwd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eroot:x:0:0:root:/root:/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e在 macOS 中，默认的 Shell 信息通常是存储在用户账户设置中的，而不是 \u003ccode\u003e/etc/passwd\u003c/code\u003e 文件中。\n从 macOS Catalina（10.15）开始，默认的 shell 已更改为 \u003ccode\u003ezsh\u003c/code\u003e，之前的默认 Shell 是 \u003ccode\u003ebash\u003c/code\u003e。\n可以通过以下方法查看默认 shell。\u003c/p\u003e","tags":[],"title":"Shell 基本操作"},{"content":"背景 出于种种原因，要在一台苹果电脑上安装旧版本的 macOS 是一件不容易的事。 因为苹果官网的下载链接会引导你到 App Store， 当它发现你要下载的系统版本比你当前使用的系统还要旧的时候， 是不会提供下载的，只能下载更新的版本。\n前几天我一个朋友刚高中毕业，大学想要学计算机，我就推荐他买苹果电脑。 但他之前都没用过 macOS，所以我打算把我那台 2014 年的 MacBook Air 给他体验一下。 当时这台电脑的系统是 High Sierra 10.13， 我想着搞个 USB 启动盘重装一下系统，顺手把磁盘的数据都抹掉， 没想到这一顿操作以后，我人麻了。\n证书过期 我在网上随便找了一个 High Sierra 镜像，因为苹果官网根本下载不了旧版本的 macOS。 引导盘做好了之后，一切都很顺利，直到它给我来了个惊喜 。（这个图我是网上找的）\n查了一下资料，很多都说是证书过期的问题，因为以前苹果发布的证书有些是在 2019 年过期的。\n解决方案 下载最新官方镜像（推荐） 一个镜像能不能用不仅仅是证书的问题，所以最靠谱的方法是从苹果官方下载最新的安装包。 但前面说了 App Store 根本不提供下载， 幸运的是我们可以通过 softwareupdate 这个命令，去下载当前电脑所支持的系统版本。\nsoftwareupdate --list-full-installers\rFinding available software Software Update found the following full installers: * Title: macOS Sonoma, Version: 14.6, Size: 13339695KiB, Build: 23G80 * Title: macOS Sonoma, Version: 14.5, Size: 13353373KiB, Build: 23F79 * Title: macOS Sonoma, Version: 14.4.1, Size: 13298513KiB, Build: 23E224 * Title: macOS Ventura, Version: 13.6.8, Size: 11922165KiB, Build: 22G820 * Title: macOS Ventura, Version: 13.6.7, Size: 11924125KiB, Build: 22G720 * Title: macOS Ventura, Version: 13.6.6, Size: 11917983KiB, Build: 22G630 * Title: macOS Monterey, Version: 12.7.6, Size: 12118346KiB, Build: 21H1320 * Title: macOS Monterey, Version: 12.7.5, Size: 12116686KiB, Build: 21H1222 * Title: macOS Monterey, Version: 12.7.4, Size: 12117810KiB, Build: 21H1123 * Title: macOS Big Sur, Version: 11.7.10, Size: 12125478KiB, Build: 20G1427 * Title: macOS Catalina, Version: 10.15.7, Size: 8055650KiB, Build: 19H15 * Title: macOS Catalina, Version: 10.15.7, Size: 8055522KiB, Build: 19H2 * Title: macOS Catalina, Version: 10.15.6, Size: 8055450KiB, Build: 19G2021 * Title: macOS Mojave, Version: 10.14.6, Size: 5896894KiB, Build: 18G103 * Title: macOS Mojave, Version: 10.14.4, Size: 5894794KiB, Build: 18E2034\rsoftwareupdate --fetch-full-installer --full-installer-version 10.14.6\r因为我另一台电脑支持的最旧版本是 Mojave，不是 High Sierra，所以最后我安装了 10.14.6。\n安装时修改系统时间 打开 Utilities -\u0026gt; Terminal，使用 date 命令修改时间。\ndate 010101012018\r知其所以然 虽然问题是解决了，但我更想验证一下到底是不是证书过期的问题。\nHigh Sierra：报错，application is damaged Mojave：成功安装 这两个安装包都是后缀为 .app 的文件（其实也是目录）， 不像上面的 .pkg 文件，直接打开就能看到证书信息，需要使用别的方法。\n查看证书信息 我们可以通过 pkgutil 查看 .app 的证书信息。\npkgutil --check-signature Install\\ macOS\\ High\\ Sierra.app\rPackage \u0026#34;Install macOS High Sierra\u0026#34;: Status: signed by untrusted certificate Certificate Chain: 1. Software Signing SHA256 Fingerprint: 2A A4 B9 97 3B 7B A0 7A DD 44 7E E4 DA 8B 53 37 C3 EE 2C 3A 99 19 11 E8 0E 72 82 E8 A7 51 FC 32 ------------------------------------------------------------------------ 2. Apple Code Signing Certification Authority Expires: 2026-10-24 17:39:41 +0000 SHA256 Fingerprint: 5B DA B1 28 8F C1 68 92 FE F5 0C 65 8D B5 4F 1E 2E 19 CF 8F 71 CC 55 F7 7D E2 B9 5E 05 1E 25 62 ------------------------------------------------------------------------ 3. Apple Root CA Expires: 2035-02-09 21:40:36 +0000 SHA256 Fingerprint: B0 B1 73 0E CB C7 FF 45 05 14 2C 49 F1 29 5E 6E DA 6B CA ED 7E 2C 68 C5 BE 91 B5 A1 10 01 F0 24\r可以看到，这里面的证书信息包含了 3 个部份，但只有 2，3 部份有过期信息，且均没过期。 更离谱的是，我也查了 Mojave 的证书信息，和上面的 High Sierra 是一模一样的。 那到底是什么问题？后来我发现可以使用 codesign 查看更详细的证书信息。\ncodesign --display --extract-certificates Install\\ macOS\\ High\\ Sierra.app\r这个命令会在当前目录生成 3 个证书文件。\ncodesign0 codesign1 codesign2\r再使用 qlmanage 命令查看证书信息。\nqlmanage -c public.x509-certificate -p codesign0\r可以看到 Software Signing 的过期时间是 2021 年 4 月 13 日， 也正是上面 pkgutil 第一部份所缺失的信息。 当我以为真相大白的时候，同样的命令，Mojave 也的过期时间也是 2021 年 4 月 13 日。 这我就不懂了，那应该两个安装包都不行才对吧，然后我又问了一下 ChatGPT。\n🤡：为什么 macos 的安装程序中 Software Signing 证书过期，还能正常运行\n🤖：在 macOS 中，安装程序中的 Software Signing 证书过期后依然能够正常运行的原因是因为系统的设计方式。在创建安装程序时，只要证书在签署时是有效的，macOS 会忽略证书的过期日期，从而允许已签署的应用程序继续运行。以下是具体原因：\n签署时的有效性：在安装程序创建时，只要证书是有效的，签署过程就会成功完成。这意味着安装程序在创建时已经被认证为安全的，即使之后证书过期，系统依然认可该签署的合法性。 系统设计：macOS 的设计理念是为了确保应用程序的连续性和用户体验的稳定性。为了避免因证书过期而导致用户无法使用已安装的应用程序，macOS 在运行时会忽略已签署应用程序的证书过期问题。 减少用户和开发者的负担：如果每次证书过期都要求用户重新安装应用程序，或者开发者必须频繁更新证书，这将给用户和开发者带来极大的不便。忽略过期证书可以避免这种情况，确保用户能够持续使用他们依赖的应用程序。 实际操作中的容错性：虽然理论上证书有有效期，但实际操作中，macOS 的容错性设计允许过期证书签署的应用程序继续运行。这种设计是为了确保系统的灵活性和可靠性。 综上所述，macOS 的安装程序中，Software Signing 证书过期后依然能够正常运行，是由于系统在签署时验证有效性，并在运行时忽略证书过期日期，从而确保应用程序的连续性和用户体验的稳定性。\n所以到这里我是不是可以认为两个安装包的证书都是没问题的？\nApple Installer Checksums 似乎我们还可以验证一下安装包的完整性，Mac OSX Installers SHA1 Checksums。\nshasum /Applications/Install*OS*.app/Contents/SharedSupport/{Base,Install}*.dmg\r但我都试了，结果是一样的，这也代表不了什么。\n真相到底是什么 It doesn\u0026rsquo;t work，but I don\u0026rsquo;t know why.\n事情发展到这里，我已经不知道是什么原因导致 High Sierra 安装包报错了。\n参考 https://eclecticlight.co/2019/10/18/beware-apple-security-certificates-after-24-october-they-may-have-expired/ https://www.youtube.com/watch?v=E4Mu4tI8-iw https://github.com/notpeter/apple-installer-checksums ","date":"2024-08-02","id":15,"permalink":"/zh-cn/tech/fourd-pocket/old-macos/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e出于种种原因，要在一台苹果电脑上安装旧版本的 macOS 是一件不容易的事。\n因为苹果官网的下载链接会引导你到 App Store，\n当它发现你要下载的系统版本比你当前使用的系统还要旧的时候，\n是不会提供下载的，只能下载更新的版本。\u003c/p\u003e\n\u003cp\u003e前几天我一个朋友刚高中毕业，大学想要学计算机，我就推荐他买苹果电脑。\n但他之前都没用过 macOS，所以我打算把我那台 2014 年的 MacBook Air 给他体验一下。\n当时这台电脑的系统是 High Sierra 10.13，\n我想着搞个 USB 启动盘重装一下系统，顺手把磁盘的数据都抹掉，\n没想到这一顿操作以后，我人麻了。\u003c/p\u003e","tags":[],"title":"安装旧版 macOS"},{"content":"内建命令 Builtin Commands。 内建命令是由 Shell 自身实现的命令，它们在 Shell 内部运行， 无需启动新进程或调用外部程序，是 Shell 操作的基本功能。\n常见的内建命令 cd：更改当前工作目录。 echo：输出字符串到终端。 exit：退出当前 Shell 会话。 export：设置或导出环境变量。 alias：为命令创建别名。 set：设置 Shell 选项和变量。 read：从标准输入读取一行并赋值给变量。 完整的内键命令 Bash Builtin Commands\rBash 内建命令\n外部命令 External Commands。 外部命令是指那些不是由 Shell 自身实现的命令，而是系统中的可执行文件。 当你运行一个外部命令时，Shell 会通过查找 PATH 环境变量中的目录， 找到对应的可执行文件，并启动一个新进程来运行该命令。\n常见的外部命令 /bin/ls：列出目录内容。 /usr/bin/grep：搜索文件中内容。 /bin/cat：显示文件内容。 /bin/mkdir：创建目录。 区分内建命令与外部命令 使用 type 命令 type cd\rcd is a shell builtin\rtype cat\rcat is /usr/bin/cat\r列出所有实现 type -a pwd\rpwd is a shell builtin pwd is /usr/bin/pwd pwd is /bin/pwd\r上面列出了 pwd 的内建实现和外部实现，如果要使用外部实现，需要使用完整路径。\n列出命令的别名 type -a ls\rls is aliased to `ls --color=auto\u0026#39; ls is /usr/bin/ls ls is /bin/ls\r另外使用 which 命令只会显示外部命令。\n","date":"2024-08-24","id":16,"permalink":"/zh-cn/linux/shell/command-type/","summary":"\u003ch2 id=\"内建命令\"\u003e内建命令\u003c/h2\u003e\n\u003cp\u003eBuiltin Commands。\n内建命令是由 Shell 自身实现的命令，它们在 Shell 内部运行，\n\u003cstrong\u003e无需启动新进程\u003c/strong\u003e或调用外部程序，是 Shell 操作的基本功能。\u003c/p\u003e\n\u003ch3 id=\"常见的内建命令\"\u003e常见的内建命令\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecd\u003c/code\u003e：更改当前工作目录。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eecho\u003c/code\u003e：输出字符串到终端。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexit\u003c/code\u003e：退出当前 Shell 会话。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexport\u003c/code\u003e：设置或导出环境变量。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ealias\u003c/code\u003e：为命令创建别名。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eset\u003c/code\u003e：设置 Shell 选项和变量。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eread\u003c/code\u003e：从标准输入读取一行并赋值给变量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"完整的内键命令\"\u003e完整的内键命令\u003c/h3\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eBash Builtin Commands\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eBash 内建命令\u003c/p\u003e","tags":[],"title":"内建命令与外部命令"},{"content":"网络诊断 ping.pe ping.pe\r全球网络延迟和路由监控工具\n","date":"2024-08-22","id":17,"permalink":"/zh-cn/tech/fourd-pocket/useful-tool/","summary":"\u003ch2 id=\"网络诊断\"\u003e网络诊断\u003c/h2\u003e\n\u003ch3 id=\"pingpe\"\u003eping.pe\u003c/h3\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://ping.pe\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eping.pe\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003e全球网络延迟和路由监控工具\u003c/p\u003e\r\n      \u003c/div\u003e\r\n      \u003cdiv class=\"d-flex flex-column justify-content-center\"\u003e\r\n        \u003csvg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-arrow-right\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\r\n          \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"\u003e\u003c/path\u003e\r\n          \u003cpath d=\"M5 12l14 0\"\u003e\u003c/path\u003e\r\n          \u003cpath d=\"M13 18l6 -6\"\u003e\u003c/path\u003e\r\n          \u003cpath d=\"M13 6l6 6\"\u003e\u003c/path\u003e\r\n        \u003c/svg\u003e\r\n      \u003c/div\u003e\r\n    \u003c/div\u003e\r\n  \u003c/div\u003e\r\n  \u003c/div\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/images/misc/ping-pe_hu9632169485666567800.webp\"\r\n  width=\"1980\"\r\n  height=\"508\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"ping-pe\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e","tags":[],"title":"有用的东西"},{"content":"背景 2019-2020，当时用 PHP 写的这个活动模板项目，虽然已经停止开发了，但现在还在运行，在上面跑的活动已经有 400 多个了。 我记得我离职的时候才 50 多个，现在 PHP 在国内已经不怎么流行了，要不是因为迁移成本大，早就改成 Java 了。 不过得知自己写的代码还在运行，还上线了这么多活动，满打满算也省了不少开发成本，心里还是挺开心的。\n这次打算把活动模板再次搭建起来，也记录一下当中碰到的问题。 毕竟对于一个 5 年前的老项目，很多依赖的软件都更新了，会出现各种各样的问题。\nPHP 7.2 2024 年的 PHP 已经去到 8.X 了，有些特性已经不再支持，所以只能安装旧版。 不过 Homebrew 的官方不提供旧版本的下载，需要使用 shivammathur/homebrew-php。\nshivammathur/homebrew-php\rHomebrew 的 PHP 扩展\nHomebrew brew update\rbrew tap shivammathur/php\rbrew install shivammathur/php/php@7.2\recho \u0026#39;export PATH=\u0026#34;/usr/local/opt/php@7.2/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo \u0026#39;export PATH=\u0026#34;/usr/local/opt/php@7.2/sbin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc\r启动服务 brew services start php@7.2\r查看服务 brew services list\rphp@7.2 started kuga ~/Library/LaunchAgents/homebrew.mxcl.php@7.2.plist\rMySQL 8.4 MySQL 也从 5 跳到 8 了，这里直接安装 8.4。\nbrew install mysql@8.4\r身份验证报错 PHP 7.2 连接数据库的时候会报以下错误。\nCDbConnection failed to open the DB connection: SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client\r出于安全考虑，MySQL 8.0 之后引入了新的验证方法 caching_sha2_password， 这与旧版本客户端使用的 mysql_native_password 不兼容。 解决方法有两个，一是升级客户端，二是启用旧版模块。 这里最简单的方法当然是让 MySQL 8.4 启用 mysql_native_password 模块。\nvim /usr/local/etc/my.cnf\r在 [mysqld] 模块中添加以下配置。\nmysql_native_password=ON\r重启 MySQL 服务。\nbrew services restart mysql@8.4\r","date":"2024-09-07","id":18,"permalink":"/zh-cn/tech/fourd-pocket/act-tpl/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e2019-2020，当时用 PHP 写的这个活动模板项目，虽然已经停止开发了，但现在还在运行，在上面跑的活动已经有 400 多个了。\n我记得我离职的时候才 50 多个，现在 PHP 在国内已经不怎么流行了，要不是因为迁移成本大，早就改成 Java 了。\n不过得知自己写的代码还在运行，还上线了这么多活动，满打满算也省了不少开发成本，心里还是挺开心的。\u003c/p\u003e\n\u003cp\u003e这次打算把活动模板再次搭建起来，也记录一下当中碰到的问题。\n毕竟对于一个 5 年前的老项目，很多依赖的软件都更新了，会出现各种各样的问题。\u003c/p\u003e\n\u003ch2 id=\"php-72\"\u003ePHP 7.2\u003c/h2\u003e\n\u003cp\u003e2024 年的 PHP 已经去到 8.X 了，有些特性已经不再支持，所以只能安装旧版。\n不过 Homebrew 的官方不提供旧版本的下载，需要使用 \u003ccode\u003eshivammathur/homebrew-php\u003c/code\u003e。\u003c/p\u003e","tags":[],"title":"活动模板-搭建环境"},{"content":"Shell Variables Shell 变量是一个统称，如果用的是某个特定的 Shell，例如 Bash，那么可以称它为 Bash 变量。 但这里必须要注意，Shell 变量不是环境变量，不要被它的大写迷惑了，以下是相关的官方文档。\nShell Variables\rShell 变量\nBash Variables\rBash 变量\n使用 man 指令，然后搜索 Shell Variables 也能查看。\nman bash\r/Shell Variables\r常见 Shell 变量 PS1 Shell 命令提示符。\necho $PS1\r\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$\rUID 当前用户 ID。\necho $UID\r1000\rPPID ps -fp $PPID\rUID PID PPID C STIME TTY TIME CMD kuga 46635 46570 0 10:56 ? 00:00:00 sshd: kuga@pts/0\r可以看到 bash 的父进程是 sshd。\nBASH_VERSION echo $BASH_VERSION\r5.1.16(1)-release\rBASH_SUBSHELL Subshell 的嵌套级别，从 0 开始。\necho $BASH_SUBSHELL\r0\rSECONDS Shell 启动到现在的秒数。\necho $SECONDS\r13963\rRANDOM 0 ~ 32767 随机数。\necho $RANDOM\r1024\r自定义 Shell 变量 参考后面环境变量的章节\n","date":"2024-08-26","id":19,"permalink":"/zh-cn/linux/shell/shell-variables/","summary":"\u003ch2 id=\"shell-variables\"\u003eShell Variables\u003c/h2\u003e\n\u003cp\u003eShell 变量是一个统称，如果用的是某个特定的 Shell，例如 Bash，那么可以称它为 Bash 变量。\n但这里必须要注意，Shell 变量不是环境变量，不要被它的大写迷惑了，以下是相关的官方文档。\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/html_node/Shell-Variables.html\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eShell Variables\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eShell 变量\u003c/p\u003e","tags":[],"title":"Shell 变量"},{"content":"Prompt 修改代码类型 修改 markdown 的代码框类型。\n把 markdown 的代码框类型全部改成 bash {frame=\u0026#34;none\u0026#34;}\r我使用的模型是 cursor-small。 这里加了全部范围，所以会修改所有代码框类型。 如果不加全部，会检测代码框类型是否为 bash。 是：修改。 否：不修改。 中文翻译英文 翻译成英文，如果是标题，则每个单词的首字母大写。\r中文翻译繁体-HK 把中文翻译成香港的粤语繁体中文。\r","date":"2024-09-08","id":20,"permalink":"/zh-cn/tech/cursor/prompt/","summary":"\u003ch2 id=\"prompt\"\u003ePrompt\u003c/h2\u003e\n\u003ch3 id=\"修改代码类型\"\u003e修改代码类型\u003c/h3\u003e\n\u003cp\u003e修改 markdown 的代码框类型。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e把 markdown 的代码框类型全部改成 bash {frame=\u0026#34;none\u0026#34;}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e我使用的模型是 \u003ccode\u003ecursor-small\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e这里加了全部范围，所以会修改所有代码框类型。\u003c/li\u003e\n\u003cli\u003e如果不加全部，会检测代码框类型是否为 \u003ccode\u003ebash\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e是：修改。\u003c/li\u003e\n\u003cli\u003e否：不修改。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"中文翻译英文\"\u003e中文翻译英文\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e翻译成英文，如果是标题，则每个单词的首字母大写。\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"中文翻译繁体-hk\"\u003e中文翻译繁体-HK\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e把中文翻译成香港的粤语繁体中文。\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"常用提示词"},{"content":"Subshell Subshell 的定义在一些书本或资料中模糊不清，给出的解释往往和某些例子自相矛盾，让人捉摸不透。 因此，为了避免这种语义与逻辑上的问题，这里不会给出它的定义（建议参考官方 BASH 手册）， 也不会使用 “子 Shell” 这个翻译，仅仅从它的实际表现去理解它的定义。 下面列举的变量和 Subshell 概念有着密切的联系。\nBash Reference Manual\rBash 参考手册\nBASH_SUBSHELL Shell 变量，非环境变量，官方手册解释。\nIncremented by one within each subshell or subshell environment when the shell begins executing in that environment. The initial value is 0. If BASH_SUBSHELL is unset, it loses its special properties, even if it is subsequently reset.\r也可以使用 man 命令，内容可能会有一点差别。\nman bash | grep -A 3 \u0026#39;BASH_SUBSHELL\u0026#39; | head -n 4\recho $BASH_SUBSHELL\r0\rSHLVL 环境变量，官方手册解释。\nIncremented by one each time a new instance of Bash is started. This is intended to be a count of how deeply your Bash shells are nested.\r使用 man 命令。\nman bash | grep \u0026#39;SHLVL\u0026#39;\r这个值是从 1 开始的。\necho $SHLVL\r1\r命令分组 全称 Command Grouping，Bash 提供两种方法创建命令分组。\n括号：() 该方法会创建一个 Subshell 环境去处理命令分组。\n(pwd; echo $BASH_SUBSHELL)\r/home/kuga 1\r(pwd; (echo $BASH_SUBSHELL))\r/home/kuga 2 (pwd; (echo $SHLVL))\r1\r可以得出以下结论。\nBASH_SUBSHELL：每创建一个 Subshell 就加 1。 SHLVL：无论创建多少个 Subshell，都不变。 花括号：{} 这种方法不会创建 Subshell，命令分组是在当前 Shell 的上下文中处理的。 在语法上，花括号与命令之间的空格不能省略，每个命令结尾的分号也是必须的。\n{ pwd; { echo $BASH_SUBSHELL; } }\r/home/kuga 0\r{ pwd; { echo $SHLVL; } }\r/home/kuga 1\rShell PID 可通过 BASHPID 或 $$ 查看 Shell 的 PID，但它们是有区别的。\nBASHPID Shell 变量，非环境变量，官方解释。\nExpands to the process ID of the current Bash process. This differs from $$ under certain circumstances, such as subshells that do not require Bash to be re-initialized. Assignments to BASHPID have no effect. If BASHPID is unset, it loses its special properties, even if it is subsequently reset.\recho $BASHPID\r56414\r使用 () 查看 BASHPID。\n(ps -f --forest; echo $BASHPID)\rUID PID PPID C STIME TTY TIME CMD kuga 56414 56412 0 10:11 pts/0 00:00:00 -bash kuga 57325 56414 0 15:13 pts/0 00:00:00 \\_ -bash kuga 57326 57325 0 15:13 pts/0 00:00:00 \\_ ps -f --forest 57325\r可以看到，BASHPID 输出了 Subshell 的 PID。\n特殊参数 $$ 官方解释。\n($$) Expands to the process ID of the shell. In a subshell, it expands to the process ID of the invoking shell, not the subshell.\r在 Subshell 中，$$ 表示的是 invoking shell 的 PID。\n(pwd; (ps -f --forest; echo $$))\r/home/kuga UID PID PPID C STIME TTY TIME CMD kuga 56414 56412 0 10:11 pts/0 00:00:00 -bash kuga 57347 56414 0 15:20 pts/0 00:00:00 \\_ -bash kuga 57348 57347 0 15:20 pts/0 00:00:00 \\_ -bash kuga 57349 57348 0 15:20 pts/0 00:00:00 \\_ ps -f --forest 56414\r可以看到，无论有多少个 Subshells，$$ 始终表示顶层 Bash 的 PID。\n创建 Bash 实例 在 Bash 中输入 bash 就可以创建一个全新的 Bash 实例。\nbash\rps -f --forest\rUID PID PPID C STIME TTY TIME CMD kuga 56414 56412 0 10:11 pts/0 00:00:00 -bash kuga 57359 56414 0 15:29 pts/0 00:00:00 \\_ bash kuga 57402 57359 0 15:30 pts/0 00:00:00 \\_ ps -f --forest\r这时候再观察一下上面提到的变量。\necho $BASH_SUBSHELL $SHLVL $BASHPID $$\r0 2 57359 57359\rBASH_SUBSHELL：没有变化。 SHLVL：从 1 -\u0026gt; 2。 BASHPID：新 Bash 实例的 PID。 $$：新 Bash 实例的 PID。 如果说这种创建 Bash 的方式也是 Subshell 的话，语义和表现上就会自相矛盾。\n","date":"2024-08-27","id":21,"permalink":"/zh-cn/linux/shell/subshell/","summary":"\u003ch2 id=\"subshell\"\u003eSubshell\u003c/h2\u003e\n\u003cp\u003eSubshell 的定义在一些书本或资料中模糊不清，给出的解释往往和某些例子自相矛盾，让人捉摸不透。\n因此，为了避免这种语义与逻辑上的问题，这里不会给出它的定义（建议参考官方 BASH 手册），\n也不会使用 “子 Shell” 这个翻译，仅仅从它的实际表现去理解它的定义。\n下面列举的变量和 Subshell 概念有着密切的联系。\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/bash.html\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eBash Reference Manual\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eBash 参考手册\u003c/p\u003e","tags":[],"title":"Subshell"},{"content":"Orbstack 在 macOS 上使用 Orbstack 构建和安装 Shadow 项目。\nbrew install orbstack\r打开 Orbstack 应用（更换镜像仓库，可选）。\n安装相关依赖 进入容器。\ndocker run -it --name shadow ubuntu:22.04 /bin/bash\r先更新软件包，不然什么都装不了。\napt-get update\r安装 vim 和 git。\napt-get install -y vim git\r参考 shadow 项目文档，安装相关依赖。\napt-get build-dep -y shadow\r一般会报以下错误。\nE: You must put some \u0026#39;deb-src\u0026#39; URIs in your sources.list\r使用 vim 编辑 /etc/apt/sources.list，添加 deb-src 源。\n# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to # newer versions of the distribution. deb http://archive.ubuntu.com/ubuntu/ jammy main restricted # deb-src http://archive.ubuntu.com/ubuntu/ jammy main restricte\r把上面的 # deb-src 注释去掉就行，再次运行。\napt-get update\r再次安装相关依赖，这次应该不会报错了。\napt-get build-dep -y shadow\r配置 下载源码。\ngit clone https://github.com/shadow-maint/shadow.git\r运行项目的配置脚本 autogen.sh。\n./autogen.sh --without-selinux --enable-man --with-yescrypt\r报错如下。\nautoreconf: configure.ac: not using Intltool autoreconf: configure.ac: not using Gtkdoc autoreconf: running: aclocal --force autoreconf: running: /usr/bin/autoconf --force configure.ac:35: error: possibly undefined macro: LT_LIB_DLLOAD If this token and others are legitimate, please use m4_pattern_allow. See the Autoconf documentation. configure.ac:135: error: possibly undefined macro: AC_MSG_WARN autoreconf: error: /usr/bin/autoconf failed with exit status: 1\r这里有几个错误，先处理 LT_LIB_DLLOAD。\napt-get install -y libltdl-dev\r再运行 ./autogen.sh。\nconfigure.ac:135: error: possibly undefined macro: AC_MSG_WARN If this token and others are legitimate, please use m4_pattern_allow. See the Autoconf documentation. autoreconf: error: /usr/bin/autoconf failed with exit status: 1\r再安装 pkg-config。\napt-get install -y pkg-config\r再次运行 ./autogen.sh 还会报错。\nconfigure: error: readpassphrase() is missing, either from libc or libbsd\r安装 libbsd-dev。\napt-get install -y libbsd-dev\r再次运行 ./autogen.sh 应该不会报错了。\n构建安装 make -j4\rmake install\r","date":"2024-10-03","id":22,"permalink":"/zh-cn/tech/fourd-pocket/shadow-install/","summary":"\u003ch2 id=\"orbstack\"\u003eOrbstack\u003c/h2\u003e\n\u003cp\u003e在 macOS 上使用 Orbstack 构建和安装 Shadow 项目。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebrew install orbstack\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e打开 Orbstack 应用（更换镜像仓库，可选）。\u003c/p\u003e\n\u003ch2 id=\"安装相关依赖\"\u003e安装相关依赖\u003c/h2\u003e\n\u003cp\u003e进入容器。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run -it --name shadow ubuntu:22.04 /bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e先更新软件包，不然什么都装不了。\u003c/p\u003e","tags":[],"title":"Shadow Build \u0026 Install"},{"content":"MAN 该指令可以查看手册页中不同的章节（Section）。\nman man\rman - an interface to the system reference manuals The table below shows the section numbers of the manual followed by the types of pages they contain. 1 Executable programs or shell commands 2 System calls (functions provided by the kernel) 3 Library calls (functions within program libraries) 4 Special files (usually found in /dev) 5 File formats and conventions, e.g. /etc/passwd 6 Games 7 Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7) 8 System administration commands (usually only for root) 9 Kernel routines [Non standard]\rSection man 1 ls/cp/mv man 2 write/open/close man 3 printf/malloc/free man 4 tty/null/random man 5 passwd/fstab man 7 man man 8 ifconfig/iptables/mount man 9 fork # not work\rGames fortune 可以随机的名言警句和笑话。\napt install fortune/fortune-mod/fortunes-zh\rman 6 fortune\rfortune - print a random, hopefully interesting, adage\r可以结合 cowsay 和 lolcat 一起玩。\nfortune | cowsay | lolcat\rPWD Print Working Directory。\nman pwd\rpwd - print name of current/working directory\rCAT man cat\rcat - concatenate files and print on the standard output\r显示行号 - 包括空行 cat -n FILE\r显示行号 - 不包括空行 cat -b FILE\rLS man ls\rls - list directory contents\r文件详细信息 ls -lh\rdrwx------ 9 root root 4.0K Aug 7 22:38 root crw-rw-rw- 1 root tty 5, 0 Aug 7 22:33 /dev/tty brw-rw---- 1 root disk 252, 0 Aug 7 21:30 /dev/vda\r文件类型：d 目录，- 文件，l 链接，c 字符设备，b 块设备。 文件权限：700，Owner: 7，Group: 0, Other: 0 硬链接数：9 文件属主：root 文件组别：root 文件大小：4.0K 修改时间：Aug 7 22:38 文件名称：root 主设备号：Major Number，5/252，标识设备驱动程序 次设备号：Minor Number，0，标识同一类设备中的某个设备实例 只显示目录 ls -ld */\r包括隐藏文件\nls -ld .*/ */\r显示特定目录信息 ls -ld /usr\r在文件后面添加类型符号 ls -lF /\r/：目录 *：可执行文件 @：符号链接 |：命名管道 =：套接字 隐藏字符 ls ~ | wc -l\rls 命令的输出中有隐藏字符 \\n。\nls ~ | od -c\r0000000 f i l e \\n f o o \\n f o o b a r \\n 0000020\r还可以使用 cat -A。\nls ~ | cat -A\rfile$ foo$ foobar$\rFILE 显示文件类型\nman file\rfile — determine file type\r字符/块设备 file /dev/tty\r/dev/tty: character special (5/0)\rfile /dev/vda\r/dev/vda: block special (252/0)\r链接文件 注意结尾斜杆。\nfile /bin\r/bin: symbolic link to usr/bin\rfile /bin/\r/bin/: directory\rLESS more 命令只能按回车加载，less 命令更强大，因为 less is more。\nman less\rless - opposite of more\rUSERMOD man usermod\rusermod - modify a user account\r禁止账号登录 usermod -s /sbin/nologin kuga\r此命令会在 /etc/passwd 中把 bin/sh 改为 /sbin/nologin\nkuga:x:1000:1000::/home/kuga:/sbin/nologin\r授权用户组 下面的命令会给 kuga 用户授权 sudo 用户组。\nusermod -aG sudo kuga\rLN man ln\rln - make links between files\r软链接 go rocks\nDF man df\rdf - report file system disk space usage\r以可读格式输出 df -h\r指定文件系统类型 df -h -t ext4\rdf -h -t apfs\rext4 是 Linux 的文件系统类型，apfs 是 macOS 的文件系统类型。\nDU Disk Usage\nman du\rdu - estimate file space usage\r查看文件/目录总大小 du -sh ~/Downloads\r排序文件 - 含子目录 du -ah ~/Downloads/* | sort -rh | head -n 5\rdu -ah ~/Downloads --max-depth=1 | sort -rh | head -n 10\r排序文件 - 不含子目录 du -sh ~/Downloads/* | sort -rh | head -n 5\r","date":"2024-08-24","id":23,"permalink":"/zh-cn/linux/cmd/common-1/","summary":"\u003ch2 id=\"man\"\u003eMAN\u003c/h2\u003e\n\u003cp\u003e该指令可以查看手册页中不同的章节（Section）。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman man\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\" text-wrap=\"wrap\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman - an interface to the system reference manuals\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThe table below shows the section numbers of the manual followed by the types of pages they contain.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e Executable programs or shell commands\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e System calls \u003cspan class=\"o\"\u003e(\u003c/span\u003efunctions provided by the kernel\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e Library calls \u003cspan class=\"o\"\u003e(\u003c/span\u003efunctions within program libraries\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e Special files \u003cspan class=\"o\"\u003e(\u003c/span\u003eusually found in /dev\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e5\u003c/span\u003e File formats and conventions, e.g. /etc/passwd\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e6\u003c/span\u003e Games\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e7\u003c/span\u003e Miscellaneous \u003cspan class=\"o\"\u003e(\u003c/span\u003eincluding macro packages and conventions\u003cspan class=\"o\"\u003e)\u003c/span\u003e, e.g. man\u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e, groff\u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e8\u003c/span\u003e System administration commands \u003cspan class=\"o\"\u003e(\u003c/span\u003eusually only \u003cspan class=\"k\"\u003efor\u003c/span\u003e root\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e9\u003c/span\u003e Kernel routines \u003cspan class=\"o\"\u003e[\u003c/span\u003eNon standard\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"section\"\u003eSection\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e1\u003c/span\u003e ls/cp/mv\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e2\u003c/span\u003e write/open/close\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e3\u003c/span\u003e printf/malloc/free\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e4\u003c/span\u003e tty/null/random\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e5\u003c/span\u003e passwd/fstab\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e7\u003c/span\u003e man\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e8\u003c/span\u003e ifconfig/iptables/mount\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman \u003cspan class=\"m\"\u003e9\u003c/span\u003e fork \u003cspan class=\"c1\"\u003e# not work\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"games\"\u003eGames\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003efortune\u003c/code\u003e 可以随机的名言警句和笑话。\u003c/p\u003e","tags":[],"title":"常用命令-1"},{"content":"SORT 默认按字符的编码排序，非数值。\nsort - sort lines of text files\r按逆序排列 sort -r file\r按数值排序 sort -n file\r按月份排序 月份格式：Jan、Feb、Mar。\nsort -M file\r指定列 默认按（连续的）空格或制表符分隔。\nsort -k 1 file\r指定分隔符和列 -k 下标从 1 开始，第 3 列为用户 ID。\nsort -t \u0026#39;:\u0026#39; -k 3 -n /etc/passwd\r忽略大小写 sort -f file\r结果去重 sort -u file\rALIAS sort - sort lines of text files\r查看可能别名 alias -p\rTYPE 外/内部命令 可查看命令是否内部命令，内部命令与 Shell 编译成一体，与外部命令不同，无须子进程执行。\ntype cd\rcd is a shell builtin\rtype ps\rps is hashed (/usr/bin/ps)\r查看所有实现 type -a echo\recho is a shell builtin echo is /usr/bin/echo echo is /bin/echo\r查看命令的别名 type ll\rll is aliased to `ls -alF\u0026#39;\rtype -a ls\rls is aliased to `ls --color=auto\u0026#39; ls is /usr/bin/ls ls is /bin/ls\rREADLINK readlink - print resolved symbolic links or canonical file names\r查看最后的链接 不用一个一个看了。\nreadlink -f /bin/vim\r/usr/bin/vim.basic\r","date":"2024-08-24","id":24,"permalink":"/zh-cn/linux/cmd/common-2/","summary":"\u003ch2 id=\"sort\"\u003eSORT\u003c/h2\u003e\n\u003cp\u003e默认按字符的编码排序，非数值。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esort - sort lines of text files\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"按逆序排列\"\u003e按逆序排列\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esort -r file\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"按数值排序\"\u003e按数值排序\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esort -n file\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"按月份排序\"\u003e按月份排序\u003c/h3\u003e\n\u003cp\u003e月份格式：\u003ccode\u003eJan\u003c/code\u003e、\u003ccode\u003eFeb\u003c/code\u003e、\u003ccode\u003eMar\u003c/code\u003e。\u003c/p\u003e","tags":[],"title":"常用命令-2"},{"content":"简介 全称 Global Regular Expression Print，来源于一个 Unix 编辑器 ed 中的命令 g/re/p， 其中 g（global）是全局匹配，re（regular expression）是正则表达式，p（print）是打印。 因此，grep 工具本质上就是用来全局匹配正则表达式并打印结果。\nman grep\rgrep, egrep, fgrep, rgrep - print lines that match patterns\r另外 egrep、fgrep 、rgrep 分别与 grep -E、grep -F 、grep -r 相同。 这些变体已被弃用，但为了向后兼容仍然提供。 另外如果不使用正则表达式，使用 -F 选项会更快， 因为默认情况下，即使没有使用正则表达式，grep 仍然会将模式视为正则表达式。\n正则表达式 grep 默认使用POSIX的正则表达式，根据不同选项分为以下几种：\n基本正则表达式（Basic Regular Expressions，BRE）： 默认模式，POSIX 标准，某些元字符（如 ?、+、{}）需要通过反斜杠 \\ 来转义。\n扩展正则表达式（Extended Regular Expressions，ERE）： 通过 grep -E 或 egrep 使用，像 ?、+、{} 等元字符可以直接使用，无需转义。\nPerl 风格的正则表达式（Perl-Compatible Regular Expressions，PCRE）： 某些 grep 实现（如 GNU grep）提供了 -P 选项，用于启用 Perl 风格的正则表达式。\nNote\n某些 grep 实现（如 GNU grep）提供了 -P 选项，用于启用 Perl 风格的正则表达式。\n常用例子 反向匹配 grep -v foo file\r忽略大小写 grep -i Foo file\r统计匹配行数 grep -c foo file\r固定字符串匹配 grep -F foo file\r递归搜索目录文件 grep -r foo /path\r列出匹配的文件名 grep -l foo *.txt\r列出不匹配的文件名 grep -rL foo /path\r匹配行及后面 N 行 After\ngrep -A 3 foo file\r匹配行及前面 N 行 Before\ngrep -B 3 foo file\r匹配行及前后 N 行 Context\ngrep -C 3 foo file\r匹配多个单词 grep -E \u0026#39;foo|bar\u0026#39; file\rgrep -e \u0026#39;foo\u0026#39; -e \u0026#39;bar\u0026#39; file\r排除目录某些文件 grep foo --exclude=\u0026#34;*.log\u0026#34; /path\r匹配目录某些文件 grep foo --include=\u0026#34;*.txt\u0026#34; /path\r","date":"2024-08-24","id":25,"permalink":"/zh-cn/linux/cmd/grep/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e全称 \u003cstrong\u003eGlobal Regular Expression Print\u003c/strong\u003e，来源于一个 Unix 编辑器 \u003ccode\u003eed\u003c/code\u003e 中的命令 \u003ccode\u003eg/re/p\u003c/code\u003e，\n其中 \u003ccode\u003eg\u003c/code\u003e（global）是全局匹配，\u003ccode\u003ere\u003c/code\u003e（regular expression）是正则表达式，\u003ccode\u003ep\u003c/code\u003e（print）是打印。\n因此，\u003ccode\u003egrep\u003c/code\u003e 工具本质上就是用来全局匹配正则表达式并打印结果。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman grep\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egrep, egrep, fgrep, rgrep - print lines that match patterns\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e另外 \u003ccode\u003eegrep\u003c/code\u003e、\u003ccode\u003efgrep\u003c/code\u003e 、\u003ccode\u003ergrep\u003c/code\u003e 分别与 \u003ccode\u003egrep -E\u003c/code\u003e、\u003ccode\u003egrep -F\u003c/code\u003e 、\u003ccode\u003egrep -r\u003c/code\u003e 相同。\n这些变体已被弃用，但为了向后兼容仍然提供。\n另外如果不使用正则表达式，\u003cstrong\u003e使用 \u003ccode\u003e-F\u003c/code\u003e 选项会更快\u003c/strong\u003e，\n因为默认情况下，即使没有使用正则表达式，\u003ccode\u003egrep\u003c/code\u003e  仍然会将模式视为正则表达式。\u003c/p\u003e","tags":[],"title":"GREP 命令"},{"content":"登录信息 w\r13:46:05 up 3 days, 16:15, 2 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/0 120.231.138.139 13:43 1.00s 0.00s 0.00s w kuga pts/1 120.231.138.139 13:44 53.00s 0.02s 0.02s -bash\r下面执行的命令都是基于以上的环境配置。\n进程状态 PS 全称是 Process Status。\nman ps\rps - report a snapshot of the current processes.\r风格 来源 前缀 Unix 贝尔实验室的 AT\u0026amp;T 系统 - BSD 伯克利软件发行版 无 GNU GNU 组织的改进版本 -- 因为历史的原因 ps 命令混杂着各种不同的风格，有时候确跟 💩 一样。\n不添加任何选项 ps\rPID TTY TIME CMD 20274 pts/0 00:00:00 bash 20714 pts/0 00:00:00 sleep 20715 pts/0 00:00:00 ps\r不添加任何选项时，它会显示所有与当前终端相关的进程。 简单来说，如果当前终端的 TTY 是 pts/0，那么他会显示所有 TTY 是 pts/0 的进程。 通常包括 Shell 进程、从这个终端启动的任何进程（无论是前台还是后台），以及 ps 命令本身。 上面的 sleep 进程是我使用后台进程的方式启动的。\nnohup sleep 60 \u0026amp;\r基础选项 选项：a 显示与终端相关的所有进程，不仅仅是当前终端或当前用户。\nps a\rPID TTY STAT TIME COMMAND 821 ttyS0 Ss+ 0:00 /sbin/agetty -o -p -- \\u --keep-baud 115200,57600,38400,9600 ttyS0 vt220 845 tty1 Ss+ 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux 23300 pts/0 Ss 0:00 -bash 23393 pts/1 Ss+ 0:00 -bash 23475 pts/0 R+ 0:00 ps a\r上面的结果是从 pts/0 终端执行的，可以看到，终端为 ttyS0、tty1、pts/1 的进程都显示出来了， 也没有区分用户，pts/0、ttyS0 、tty1 是 root 的，pts/1 是 kuga 的。\n选项：u 以用户友好的格式显示进程信息。\nps u\rUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 821 0.0 0.0 5800 1092 ttyS0 Ss+ Aug07 0:00 /sbin/agetty -o -p -- \\u --keep-baud 115200,57600,3 root 845 0.0 0.0 6176 1072 tty1 Ss+ Aug07 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux root 23300 0.0 0.3 8792 5616 pts/0 Ss 13:43 0:00 -bash root 23480 0.0 0.0 10072 1588 pts/0 R+ 14:01 0:00 ps u\r如果这个选项只跟显示字段有关，那它的进程集应该和没有添加任何选项的 ps 命令一样。 然而上面的结果表明，除了自身终端 pts/0 的进程，它也显示了别的终端进程， 但它没有显示 pts/1 的终端进程（用户是 kuga）。\n可以简单得出结论，u 选项的进程集就是：与当前用户终端相关的所有进程。 上面就是与 root 用户相关的所有终端进程，如果在 kuga 用户的终端执行 ps u， 可以得到下面的结果，完全符合预期。\nps u\rUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND kuga 23393 0.0 0.3 8660 5452 pts/1 Ss 13:44 0:00 -bash kuga 23496 0.0 0.0 10072 1608 pts/1 R+ 14:22 0:00 ps u\r另外这个进程集的定义不是 u 选项特有的，它和 BSD 风格有关。\n选项：x 显示属于当前用户的所有进程。\nps x\rPID TTY STAT TIME COMMAND 23330 ? Ss 0:00 /lib/systemd/systemd --user 23331 ? S 0:00 (sd-pam) 23392 ? R 0:00 sshd: kuga@pts/1 23393 pts/1 Ss 0:00 -bash 23719 pts/1 R+ 0:00 ps x\r上面的结果是在 kuga 用户的终端执行的，所以进程数量不会太多。\n选项：-e 显然所有进程。\nman ps | grep \u0026#34;\\-e \u0026#34;\r-e Select all processes. Identical to -A.\r选项：-f 以全格式（full-format）显示进程信息，可以与其他 UNIX-style 的选项组合使用。\nman ps | grep \u0026#34;\\-f \u0026#34;\r-f Do full-format listing. This option can be combined with many other UNIX-style options to add\rps -f\rUID PID PPID C STIME TTY TIME CMD root 23300 23163 0 13:43 pts/0 00:00:00 -bash root 24317 23300 0 16:53 pts/0 00:00:00 ps -f\r选项：-o 自定义输出字段，不能与 -f 和 u 选项共用。\nps -o uid,user,pid,%cpu,%mem,cmd\rUID USER PID %CPU %MEM CMD 0 root 23300 0.0 0.3 -bash 0 root 24311 0.0 0.0 ps -o uid,user,pid,%cpu,%mem,cmd\r注意这里的 uid 和使用 -f 选项显示的内容不一样，这里是数字 ID，但 -f 会显示用户名。\n选项：-p 指定进程 PID。\nps up 1\rUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.7 167696 13328 ? Ss Aug07 0:08 /lib/systemd/systemd --system --deserialize 36 noib\r选项：--forest 以 ASCII 显示进程与子进程的树状结构。\nman ps | grep -A 1 \u0026#34;\\--forest\u0026#34;\r--forest ASCII art process tree.\rps -o pid,ppid,cmd --forest\rPID PPID CMD 23300 23163 -bash 24537 23300 \\_ ps -o pid,ppid,cmd --forest\r不同风格的进程集 不同风格的选项进程集是不一样的，但只要细心观察，还是能发现一些规律。\nps：不添加任何选项\nps\rPID TTY TIME CMD 2090 pts/0 00:00:00 bash 2261 pts/0 00:00:00 ps\rps -l：Unix 风格，-l 表示以长格式显示。\nps -l\rF S UID PID PPID C PRI NI ADDR SZ WCHAN TTY TIME CMD 4 S 0 2090 2034 0 80 0 - 2198 do_wai pts/0 00:00:00 bash 4 R 0 2262 2090 0 80 0 - 2518 - pts/0 00:00:00 ps\rps l：BSD 风格，l 表示以 BSD 长格式显示。\nps l\rF UID PID PPID PRI NI VSZ RSS WCHAN STAT TTY TIME COMMAND 4 0 760 1 20 0 5800 1160 do_sel Ss+ ttyS0 0:00 /sbin/agetty -o -p -- \\u --keep-baud 115200,57600,38400,9600 ttyS0 vt220 4 0 779 1 20 0 6176 1108 do_sel Ss+ tty1 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux 4 0 2090 2034 20 0 8792 5492 do_wai Ss pts/0 0:00 -bash 4 0 2298 2090 20 0 10072 1608 - R+ pts/0 0:00 ps l\rps --forest：GNU 风格，--forest 表示以进程树的方式显示。\nps --forest\rPID TTY TIME CMD 2090 pts/0 00:00:00 bash 2316 pts/0 00:00:00 \\_ ps\r上面的例子中，所用的选项都是和进程集无关的，可以总结出如下规律：\n风格 进程集 无选项 显示所有与当前终端相关的进程 Unix 与不添加选项一致 BSD 显示与当前用户终端相关的所有进程 GNU 与不添加选项一致 显然，Unix 和 GNU 风格看上去更符合逻辑，因为它们的进程集和不添加选项时的进程集是一样的， 但 BSD 风格就自己加戏了，把当前用户其他终端相关的进程也包含进来了。 不同风格的选项可以一起使用，但如果两个选项都是指定显示格式，会无法执行。 另外，如果多个风格中包含了 BSD 风格，但选项中又没有指定进程集，那么默认会使用 BSD 的进程集。\n常用功能 列出用户进程 ps -fu kuga\r列出所有进程 ps -ef\r-e 显示所有进程，-f 以全格式显示，这没什么好说的。\nps aux\r奇怪的是 aux 的进程集，从上面的分析可以知道：\na：显示与终端相关的所有进程，不仅仅是当前终端或当前用户。 x：显示属于当前用户的所有进程。 显然 ax 加起来也只是当前用户的所有进程和不区分用户的所有终端进程，但如果再看一下官方的文档。\na ... or to list all processes when used together with the x option. x ... or to list all processes when used together with the a option.\rax 一起用的时候代表所有进程，我们也可以验证一下进程数。\nps aux | wc -l\rps -ef | ec -l\r可以看到 aux 和 -ef 的进程集数量是一样的，我很细节的，我说的是数量🤪。\n占用内存排名 go rocks\n特殊字段说明 VSZ Virtual Memory Size，虚拟内存大小，以 KB 为单位。\nRSS Resident Set Size，常驻内存大小，以 KB 为单位。\nTTY 进程关联的终端。如果进程与某个终端关联，它会显示终端的名称；如果未关联终端，则显示 ?。\nSTAT 进程的状态码。常见的状态码包括：\nR: 运行中（Running）。 S: 睡眠中（Sleeping），等待某个事件完成。 D: 不可中断的睡眠状态（Uninterruptible Sleep），通常是等待 I/O。 T: 暂停或跟踪中（Stopped or Traced）。 Z: 僵尸进程（Zombie），进程已经终止，但未被父进程清理。 I: 空闲内核线程（Idle Kernel Thread）。 Ss: 主进程处于睡眠状态。 R+: 运行中的进程，并且在前台显示。 go rocks 需要深入理解不同的进程状态\nSTART 进程启动的时间或日期。对于新进程，显示的是时间，对于旧进程，显示的是日期。\nTIME 进程使用 CPU 的累计时间，表示该进程总共占用了多少 CPU 时间。\nC 进程的 CPU 使用率。这个字段显示的是自进程启动以来，CPU 时间的累积使用百分比。\n","date":"2024-08-24","id":26,"permalink":"/zh-cn/linux/cmd/ps/","summary":"\u003ch2 id=\"登录信息\"\u003e登录信息\u003c/h2\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ew\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e 13:46:05 up \u003cspan class=\"m\"\u003e3\u003c/span\u003e days, 16:15,  \u003cspan class=\"m\"\u003e2\u003c/span\u003e users,  load average: 0.00, 0.00, 0.00\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eroot     pts/0    120.231.138.139  13:43    1.00s  0.00s  0.00s w\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ekuga     pts/1    120.231.138.139  13:44   53.00s  0.02s  0.02s -bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e下面执行的命令都是基于以上的环境配置。\u003c/p\u003e","tags":[],"title":"PS 命令"},{"content":"简介 man top\rtop - display Linux processes\rtop 命令默认按进程 CPU 使用率的倒序进行排序，并动态展示结果。\ntop - 09:19:05 up 6 days, 10:02, 2 users, load average: 0.13, 0.05, 0.01 Tasks: 126 total, 1 running, 125 sleeping, 0 stopped, 0 zombie %Cpu(s): 0.5 us, 0.0 sy, 0.0 ni, 99.5 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st MiB Mem : 1673.0 total, 252.3 free, 299.5 used, 1121.3 buff/cache MiB Swap: 0.0 total, 0.0 free, 0.0 used. 1197.7 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 988 root 20 0 90428 14260 11860 S 0.7 0.8 58:31.33 AliYunDun 1008 root 20 0 139912 36880 18280 S 0.7 2.2 99:59.21 AliYunDunMonito 39433 root 20 0 10508 3912 3304 R 0.3 0.2 0:00.03 top 1 root 20 0 167744 13388 8416 S 0.0 0.8 0:07.59 systemd\r头部信息 系统信息 top - 09:19:05 up 6 days, 10:02, 2 users, load average: 0.13, 0.05, 0.01\r当前系统时间：09:19:05 系统运行时间：6 天 10 小时 2 分 当前登录用户：2 个 系统平均负载：1 分钟、5 分钟、15 分钟 进程概要 Tasks: 126 total, 1 running, 125 sleeping, 0 stopped, 0 zombie\r总进程数：126 正在运行的进程数：1 睡眠状态的进程数：125 停止状态的进程数：0 僵尸状态的进程数：0 CPU 使用情况 %Cpu(s): 0.5 us, 0.0 sy, 0.0 ni, 99.5 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st\r用户进程的 CPU 占比：0.5, user 系统进程的 CPU 占比：0.0, system 包含 nice value 进程的 CPU 占比：0.0 空闲 CPU 占比：99.5, idle 等待 IO 操作的 CPU 占比：0.0, wait 处理硬件中断的 CPU 占比：0.0, hardware interrupts 处理软件中断的 CPU 占比：0.0, software interrupts 被虚拟化程序偷走的 CPU 占比：0.0, stolen 内存使用情况 MiB Mem : 1673.0 total, 252.3 free, 299.5 used, 1121.3 buff/cache\r单位：MiB, Million Byte 总数：1673.0 MB 空闲：252.3 MB 已用：299.5 MB 缓存：1121.3 MB 交换区使用情况 MiB Swap: 0.0 total, 0.0 free, 0.0 used. 1197.7 avail Mem\r总数：0.0 空闲：0.0 已用：0.0 可用：1197.7 MB（buff/cache） 总数为 0 有可能是因为没有配置交换区，可以使用以下命令检查。\nswapon --show\r如果什么也没有输出，就表示没有配置交换区。\n字段管理模式 按下 f 或 Shift + f 键，此时会进入字段管理模式。\nFields Management for window 1:Def, whose current sort field is %CPU Navigate with Up/Dn, Right selects for move then \u0026lt;Enter\u0026gt; or Left commits, \u0026#39;d\u0026#39; or \u0026lt;Space\u0026gt; toggles display, \u0026#39;s\u0026#39; sets sort. Use \u0026#39;q\u0026#39; or \u0026lt;Esc\u0026gt; to end!\rwindow 1:Def 窗口编号是 1，使用默认（Default）的字段配置。\n修改字段显示顺序 按右方向键选择需要移动的字段，上下移动后，按回车或左方向键提交。\n设置是否显示字段 选择好字段后，按 d 或空格键。\n设置当前排序字段 选择好字段后，按 s 键，只在当前会话生效。\n其它非常用字段 go rocks\n多窗口模式 按下 Shift + A 键，会出现 4 个 top 窗口，左上角会显示窗口的名称， 每个窗口显示的字段和排序的方式不同，都可以通过字段管理模式修改。\n常用操作 返回单窗口模式：Shift + A 选择下一个窗口：a 键。 选择上一个窗口：w 键。 选择指定的窗口：g 键，选 1-4 。 修改窗口的名称：Shift + G，输入 1-3 个字符。 进入字段管理模式：Shift + F。 常见窗口 1:Def：编号 1，按 %CPU 逆序排序。 2:Job：编号 2，按 PID 逆序排序。 3:Mem：编号 3，按 %Mem 逆序排序。 4:Usr：编号 4，按 USER 逆序排序。 个性化窗口颜色 Shift + Z 进入颜色配置模式，下面已经写得明明白白了。\nHelp for color mapping - \u0026#34;Current Window\u0026#34; = 1:Def color - 04:25:44 up 8 days, 50 min, 7 users, load average: Tasks: 64 total, 2 running, 62 sleeping, 0 stopped, %Cpu(s): 76.5 user, 11.2 system, 0.0 nice, 12.3 idle Nasty Message! -or- Input Prompt PID TTY PR NI %CPU TIME+ VIRT SWAP S COMMAND 17284 pts/2 8 0 0.0 0:00.75 1380 0 S /bin/bash 8601 pts/1 7 -10 0.4 0:00.03 916 0 R color -b -z 11005 ? 9 0 0.0 0:02.50 2852 1008 S amor -sessi available toggles: B =disable bold globally (Off), z =color/mono (On), b =tasks \u0026#34;bold\u0026#34;/reverse (On) 1) Select a target as an upper case letter, current target is T : S = Summary Data, M = Messages/Prompts, H = Column Heads, T = Task Information 2) Select a color as a number or use the up/down arrow keys to raise/lower the 256 colors value, current color is 1 : 0 = black, 1 = red, 2 = green, 3 = yellow, 4 = blue, 5 = magenta, 6 = cyan, 7 = white 3) Then use these keys when finished: \u0026#39;q\u0026#39; or \u0026lt;Esc\u0026gt; to abort changes to window \u0026#39;1:Def\u0026#39; \u0026#39;a\u0026#39; or \u0026#39;w\u0026#39; to commit \u0026amp; change another, \u0026lt;Enter\u0026gt; to commit and end\r可修改不同窗口（1:Def）的配置，按 a 或 w 选择。 可用开关：Shift + B、z、b。 可修改 4 个部分的颜色，Shift + S/M/H/T。 修改的颜色可以输入数字，也可以使用上下键选择。 q 或 Esc 取消配置，Enter 提交配置。 退出颜色模式后，如果想持久化配置，需要按 Shift + W，文件保存路径：\n~/.config/procps/toprc\r注意，如果保存的时候在多窗口模式，下次打开也会是多窗口模式。\n常用快捷键 部分快捷键也会修改当前 top 命令会话窗口的属性。\nh：显示帮助菜单，列出所有可用的命令。 0：切换值为 0 的字段显示/隐藏。 1：切换显示每个 CPU 核心的使用情况。 k：终止进程，输入 PID。 r：调整进程的优先级（renice）。 z：切换颜色显示模式。 x：高亮显示当前排序的列。 c：切换命令行显示/隐藏。 n：改变显示进程的数量，输入显示的进程数。 Shift + W：保存当前配置。 Shift + Z：进入颜色模式。 Shift + P：按 CPU 使用率排序。 Shift + M：按内存使用率排序。 Shift + N：按 PID 排序。 Shift + T：按进程运行时间排序。 特殊字段说明 PR 优先级。\nNI Nice Value。\nVIRT Virtual Image (KiB)。\nRES Resident Size (KiB)。\nSHR 共享内存大小。\nS 进程状态，参考 PS 命令。\nTIME+ CPU Time, hundredths，进程启动后占用的 CPU 时间总和。\n","date":"2024-08-24","id":27,"permalink":"/zh-cn/linux/cmd/top/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman top\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etop - display Linux processes\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003etop 命令默认按进程 \u003cstrong\u003eCPU 使用率的倒序\u003c/strong\u003e进行排序，并动态展示结果。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etop - 09:19:05 up \u003cspan class=\"m\"\u003e6\u003c/span\u003e days, 10:02,  \u003cspan class=\"m\"\u003e2\u003c/span\u003e users,  load average: 0.13, 0.05, 0.01\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTasks: \u003cspan class=\"m\"\u003e126\u003c/span\u003e total,   \u003cspan class=\"m\"\u003e1\u003c/span\u003e running, \u003cspan class=\"m\"\u003e125\u003c/span\u003e sleeping,   \u003cspan class=\"m\"\u003e0\u003c/span\u003e stopped,   \u003cspan class=\"m\"\u003e0\u003c/span\u003e zombie\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e%Cpu\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e:  0.5 us,  0.0 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMiB Mem :   1673.0 total,    252.3 free,    299.5 used,   1121.3 buff/cache\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMiB Swap:      0.0 total,      0.0 free,      0.0 used.   1197.7 avail Mem\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"m\"\u003e988\u003c/span\u003e root      \u003cspan class=\"m\"\u003e20\u003c/span\u003e   \u003cspan class=\"m\"\u003e0\u003c/span\u003e   \u003cspan class=\"m\"\u003e90428\u003c/span\u003e  \u003cspan class=\"m\"\u003e14260\u003c/span\u003e  \u003cspan class=\"m\"\u003e11860\u003c/span\u003e S   0.7   0.8  58:31.33 AliYunDun\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"m\"\u003e1008\u003c/span\u003e root      \u003cspan class=\"m\"\u003e20\u003c/span\u003e   \u003cspan class=\"m\"\u003e0\u003c/span\u003e  \u003cspan class=\"m\"\u003e139912\u003c/span\u003e  \u003cspan class=\"m\"\u003e36880\u003c/span\u003e  \u003cspan class=\"m\"\u003e18280\u003c/span\u003e S   0.7   2.2  99:59.21 AliYunDunMonito\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"m\"\u003e39433\u003c/span\u003e root      \u003cspan class=\"m\"\u003e20\u003c/span\u003e   \u003cspan class=\"m\"\u003e0\u003c/span\u003e   \u003cspan class=\"m\"\u003e10508\u003c/span\u003e   \u003cspan class=\"m\"\u003e3912\u003c/span\u003e   \u003cspan class=\"m\"\u003e3304\u003c/span\u003e R   0.3   0.2   0:00.03 top\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"m\"\u003e1\u003c/span\u003e root      \u003cspan class=\"m\"\u003e20\u003c/span\u003e   \u003cspan class=\"m\"\u003e0\u003c/span\u003e  \u003cspan class=\"m\"\u003e167744\u003c/span\u003e  \u003cspan class=\"m\"\u003e13388\u003c/span\u003e   \u003cspan class=\"m\"\u003e8416\u003c/span\u003e S   0.0   0.8   0:07.59 systemd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"头部信息\"\u003e头部信息\u003c/h2\u003e\n\u003ch3 id=\"系统信息\"\u003e系统信息\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etop - 09:19:05 up \u003cspan class=\"m\"\u003e6\u003c/span\u003e days, 10:02,  \u003cspan class=\"m\"\u003e2\u003c/span\u003e users,  load average: 0.13, 0.05, 0.01\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e当前系统时间：09:19:05\u003c/li\u003e\n\u003cli\u003e系统运行时间：6 天 10 小时 2 分\u003c/li\u003e\n\u003cli\u003e当前登录用户：2 个\u003c/li\u003e\n\u003cli\u003e系统平均负载：1 分钟、5 分钟、15 分钟\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"进程概要\"\u003e进程概要\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTasks: \u003cspan class=\"m\"\u003e126\u003c/span\u003e total,   \u003cspan class=\"m\"\u003e1\u003c/span\u003e running, \u003cspan class=\"m\"\u003e125\u003c/span\u003e sleeping,   \u003cspan class=\"m\"\u003e0\u003c/span\u003e stopped,   \u003cspan class=\"m\"\u003e0\u003c/span\u003e zombie\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e总进程数：126\u003c/li\u003e\n\u003cli\u003e正在运行的进程数：1\u003c/li\u003e\n\u003cli\u003e睡眠状态的进程数：125\u003c/li\u003e\n\u003cli\u003e停止状态的进程数：0\u003c/li\u003e\n\u003cli\u003e僵尸状态的进程数：0\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"cpu-使用情况\"\u003eCPU 使用情况\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e%Cpu\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e:  0.5 us,  0.0 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e用户进程的 CPU 占比：0.5, user\u003c/li\u003e\n\u003cli\u003e系统进程的 CPU 占比：0.0, system\u003c/li\u003e\n\u003cli\u003e包含 \u003ccode\u003enice value\u003c/code\u003e 进程的 CPU 占比：0.0\u003c/li\u003e\n\u003cli\u003e空闲 CPU 占比：99.5, idle\u003c/li\u003e\n\u003cli\u003e等待 IO 操作的 CPU 占比：0.0, wait\u003c/li\u003e\n\u003cli\u003e处理硬件中断的 CPU 占比：0.0, hardware interrupts\u003c/li\u003e\n\u003cli\u003e处理软件中断的 CPU 占比：0.0, software interrupts\u003c/li\u003e\n\u003cli\u003e被虚拟化程序偷走的 CPU 占比：0.0, stolen\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"内存使用情况\"\u003e内存使用情况\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMiB Mem :   1673.0 total,    252.3 free,    299.5 used,   1121.3 buff/cache\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e单位：MiB, Million Byte\u003c/li\u003e\n\u003cli\u003e总数：1673.0 MB\u003c/li\u003e\n\u003cli\u003e空闲：252.3 MB\u003c/li\u003e\n\u003cli\u003e已用：299.5 MB\u003c/li\u003e\n\u003cli\u003e缓存：1121.3 MB\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"交换区使用情况\"\u003e交换区使用情况\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMiB Swap:      0.0 total,      0.0 free,      0.0 used.   1197.7 avail Mem\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e总数：0.0\u003c/li\u003e\n\u003cli\u003e空闲：0.0\u003c/li\u003e\n\u003cli\u003e已用：0.0\u003c/li\u003e\n\u003cli\u003e可用：1197.7 MB（buff/cache）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e总数为 0 有可能是因为没有配置交换区，可以使用以下命令检查。\u003c/p\u003e","tags":[],"title":"TOP 命令"},{"content":"KILL 命令 其实它是一个给进程发信号的工具，不一定是杀进程。\nman kill\rkill - send a signal to a process\r默认信号 kill 命令的默认信号是 SIGTERM，对应数字 15，优雅终止。\n列出可用信号 kill -l\r1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM ......\rkill -l 9 15\rKILL TERM\r指定信号类型 kill -s SIGKILL \u0026lt;PID\u0026gt;\rkill -9 \u0026lt;PID\u0026gt;\r发给多个进程 kill -15 \u0026lt;PID\u0026gt; \u0026lt;PID\u0026gt; \u0026lt;PID\u0026gt;\r特殊进程号 -1 -1 进程号表示所有进程，以下命令会终止你（当前用户）能终止的所有进程。\n危险\n不要在 root 用户执行\nkill -9 -1\r假如我想在 kuga 用户执行，可先在 root 用户查看该用户的进程。\nps -fu kuga\rUID PID PPID C STIME TTY TIME CMD kuga 42994 1 0 14:13 ? 00:00:00 /lib/systemd/systemd --user kuga 42995 42994 0 14:13 ? 00:00:00 (sd-pam) kuga 43056 42991 0 14:13 ? 00:00:00 sshd: kuga@pts/0 kuga 43057 43056 0 14:13 pts/0 00:00:00 -bash\r然后再到 kuga 终端执行命令 kill -9 -1。\nConnection to x.x.x.x closed by remote host. Connection to x.x.x.x closed.\r会立刻断开连接，在 root 上查看 kuga 用户进程会发现全没了。\nPKILL 命令 通过进程的名称来查找并发送信号给匹配的进程。\nman pkill\rsignal for processes based on name and other attributes\r默认信号 pkill 命令的默认信号是 SIGTERM，对应数字 15，优雅终止。\n指定信号类型 pkill -SIGKILL bash\rpkill -9 bash\r指定用户进程 pkill -u kuga\rpkill -9 -u kuga bash\r精确匹配进程名称 pkill -x sshd\rPGREP 通过进程的名称来查找进程 ID。\nman pgrep\rlook up for processes based on name and other attributes 忽略大小写 pgrep -i BASH\r指定用户进程 pgrep -u kuga\r44087 44088 44149 44150\r列出进程 ID 和名称 没有 -l 就只会显示进程 ID。\npgrep -l bash\r42977 bash 44150 bash\r列出匹配进程的数量 pgrep -c bash\r2\r指定父进程 ID pgrep -P 1729\r42912 44084\r最近启动的进程 pgrep -n -l\rpgrep -n bash -l\r最早启动的进程 pgrep -o -l\r1 systemd\r精确匹配进程名称 pgrep -x sshd\r常用信号 SIGTERM - 15 请求进程终止。这个信号是“友好”的终止请求，进程可以捕捉到这个信号并执行清理工作，然后退出。 它是 kill 和 pkill 命令的默认信号。 通常用于优雅地终止进程，给进程时间来处理未完成的任务。\nSIGKILL - 9 强制终止进程。此信号不能被进程捕捉、阻塞或忽略，进程会立即被终止。 发送 SIGKILL 会直接停止进程，不允许进程进行任何清理操作。 用于无法正常终止的进程，当 SIGTERM 无效时使用。\nSIGINT - 2 中断信号，通常由用户通过 Ctrl+C 发送，用于中断前台运行的进程。 用于手动中断进程，尤其是交互式进程。\nSIGQUIT - 3 退出信号，通常由用户通过 Ctrl+\\ 发送，表示希望进程生成核心转储（core dump）并退出。 用于调试，当希望进程生成核心转储以便分析问题时使用。\nSIGHUP - 1 挂起信号，通常表示终端或控制台断开连接。 许多守护进程在接收到 SIGHUP 信号时，会重新加载其配置文件。 用于重新加载守护进程的配置，或让守护进程重启。\n","date":"2024-08-24","id":28,"permalink":"/zh-cn/linux/cmd/terminate/","summary":"\u003ch2 id=\"kill-命令\"\u003eKILL 命令\u003c/h2\u003e\n\u003cp\u003e其实它是一个给进程发信号的工具，不一定是杀进程。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eman kill\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ekill\u003c/span\u003e - send a signal to a process\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"默认信号\"\u003e默认信号\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ekill\u003c/code\u003e 命令的默认信号是 \u003ccode\u003eSIGTERM\u003c/code\u003e，对应数字 \u003ccode\u003e15\u003c/code\u003e，优雅终止。\u003c/p\u003e","tags":[],"title":"终止进程"},{"content":"todorocks\n","date":"2024-08-24","id":29,"permalink":"/zh-cn/linux/cmd/compression/","summary":"\u003cp\u003etodorocks\u003c/p\u003e","tags":[],"title":"压缩与解压"},{"content":"起源 Linux 中的环境变量源自早期 UNIX 系统的设计需求。 通过环境变量，用户和进程能够动态地影响系统行为，而不需要修改系统的核心代码。 这种灵活性和可配置性使环境变量成为 Linux 系统和应用程序配置的关键部分。\n在 UNIX 中，每个进程都有自己的环境（即一组环境变量），这些环境变量在进程的启动时由父进程传递给子进程。 最典型的例子是当用户登录系统时，系统启动的 Shell 进程会继承一组默认的环境变量，例如用户的主目录、Shell 类型等。 用户可以在这个基础上修改或添加环境变量，影响自己启动的程序或进程的行为。\n概念勘误 有些书籍和文章会把环境变量分为全局环境变量和局部环境变量，但这种分类是不准确的， 因为在官方的文档中，从来没有这两种分类的定义，甚至连英文名称也没有。 因此，为了避免语义上的逻辑问题，本文不会对环境变量进行上述的分类。\n《Linux 命令行与Shell 脚本编程大全》\n《Linux Command Line and Shell Scripting Bible》\n上面这本书关于环境变量的章节是有问题的，不是翻译的问题，原版就有问题。\n打印环境变量 命令：printenv 不带参数会打印所有环境变量。\nprintenv | head -n 3\rSHELL=/bin/bash PWD=/home/kuga LOGNAME=kuga\r打印指定环境变量。\nprintenv PATH\r/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r命令：env 不带参数会打印所有环境变量。\nenv | head -n 3\rSHELL=/bin/bash PWD=/home/kuga LOGNAME=kuga\r命令：echo 打印指定变量，可以是环境变量或 Shell 变量。\necho $HOME\r/home/kuga\r自定义 Shell 变量 定义名为 soda 的 Shell 变量，值为 green。\nsoda=green\recho $soda\rgreen\r使用 printenv 访问 printenv soda\r输出为空，因为 soda 不是环境变量，它只是一个 Shell 变量。\n使用命令分组 () 访问 (echo $soda)\rgreen\r使用命令分组 () 修改 (soda=yellow; echo $soda); echo $soda\ryellow green\rSubshell 内部的修改不会影响外部的数据。\n创建 Bash 实例访问 bash\recho $soda\r输出为空，这就是普通 Shell 变量的基本作用域。\n自定义环境变量 可以通过 export 指令把 Shell 变量转变为环境变量，官方手册的定义如下。\nMark each name to be passed to child processes in the environment.\r翻译：标记变量名称，使其在环境中可以传递给子进程。\r可以同时定义和导出变量，也可以分开操作。\nexport soda=green\rsoda=green; export soda;\r使用 printenv 访问 转变为环境变量之后，使用 printenv 就能正常打印了。\nprintenv soda\rgreen\r使用命令分组 () 访问 (printenv soda)\rgreen\r使用命令分组 () 修改 (soda=yellow; echo $soda); echo $soda\ryellow green\r同样，内部修改环境变量是不会影响外部的数据。\n创建 Bash 实例访问 bash -c \u0026#34;printenv soda\u0026#34;\rgreen\r环境变量在新创建的 Bash 实例中是能访问的。\n查看所有 export 变量 不带参数，或使用 -p 就能打印所有 export 变量。\nexport\rexport | grep soda\rdeclare -x soda=\u0026#34;green\u0026#34;\r取消 export 环境变量 使用 -n 选项就能取消 export，变回普通的 Shell 变量。\nexport -n soda\rprintenv soda; echo $soda\rprintenv 无输出，echo 正常输出，因为 soda 已经不再是环境变量。\n删除变量 下面会删除整个变量，无论是环境变量还是 Shell 变量。\nunset soda\recho $soda\r命令：declare 用于声明变量和属性，不带任何参数就输出所有的变量声明和当前值。\nDeclare variables and give them attributes. If no names are given, then display the values of variables instead.\r常用参数：\n-i：将变量声明为整数。 -r：将变量声明为只读。 -x：将变量导出为环境变量。 -p：显示变量的声明和当前值。 不带参数声明 效果和普通的 Shell 变量一样。\ndeclare soda=\u0026#34;green\u0026#34;\recho $soda\r显示当前变量的声明 declare -p soda\rdeclare -- soda=\u0026#34;green\u0026#34;\r显示所有变量的声明 declare -p\r声明环境变量 declare -x soda=\u0026#34;green\u0026#34;\rprintenv soda\rgreen\r在 export 中也能看到 soda 的定义。\nexport | grep soda\r-x 与 -- 的区别 不难发现，可以通过声明的符号区分不同的变量类型。\n-x：环境变量的声明。 --：普通 Shell 变量的声明。 declare -p soda\rdeclare -x soda=\u0026#34;green\u0026#34;\r取消 export 后。\nexport -n soda\rdeclare -p soda\rdeclare -- soda=\u0026#34;green\u0026#34;\r内建命令手册 有些内建命令使用 man 是无法查看手册的，但可以使用 help 命令，或 --help 选项。\nexport type -a export\rexport is a shell builtin\rhelp export\rexport --help\rdeclare 同上\nunset 同上\n","date":"2024-08-24","id":30,"permalink":"/zh-cn/linux/env/concept/","summary":"\u003ch2 id=\"起源\"\u003e起源\u003c/h2\u003e\n\u003cp\u003eLinux 中的环境变量源自早期 UNIX 系统的设计需求。\n通过环境变量，用户和进程能够动态地影响系统行为，而不需要修改系统的核心代码。\n这种灵活性和可配置性使环境变量成为 Linux 系统和应用程序配置的关键部分。\u003c/p\u003e\n\u003cp\u003e在 UNIX 中，每个进程都有自己的环境（即一组环境变量），这些环境变量在进程的启动时由父进程传递给子进程。\n最典型的例子是当用户登录系统时，系统启动的 Shell 进程会继承一组默认的环境变量，例如用户的主目录、Shell 类型等。\n用户可以在这个基础上修改或添加环境变量，影响自己启动的程序或进程的行为。\u003c/p\u003e\n\u003ch2 id=\"概念勘误\"\u003e概念勘误\u003c/h2\u003e\n\u003cp\u003e有些书籍和文章会把环境变量分为\u003cdel\u003e全局环境变量和局部环境变量\u003c/del\u003e，但这种分类是不准确的，\n因为在官方的文档中，从来没有这两种分类的定义，甚至连英文名称也没有。\n因此，为了避免语义上的逻辑问题，本文不会对环境变量进行上述的分类。\u003c/p\u003e","tags":[],"title":"重要概念"},{"content":"Shell 的启动方式 Shell 的启动方式会影响环境变量的加载过程，可分为以下几种。\n交互式（Interactive） 登录：以登录方式启动的 Shell 实例，如 SSH 登录。 非登录： 在 Shell 中输入 Bash 新建 Shell 实例。 在 GNOME Terminal 中打开一个新的终端会话。 非交互式（Non-Interactive） 在脚本中启动的 Shell 实例。 什么是交互式 Shell What is an Interactive Shell\r什么是交互式 Shell\nAn interactive shell is one started without non-option arguments (unless -s is specified) and without specifying the -c option, whose input and error output are both connected to terminals (as determined by isatty(3)), or one started with the -i option. An interactive shell generally reads from and writes to a user’s terminal. The -s invocation option may be used to set the positional parameters when an interactive shell is started.\r交互式 Shell 是指在启动时没有非选项参数（除非指定了 -s 选项），并且没有指定 -c 选项，其输入和错误输出都连接到终端（由 isatty(3) 判断），或者是通过 -i 选项启动的 Shell。 交互式 Shell 通常从用户的终端读取并向终端写入内容。 当启动交互式 Shell 时，可以使用 -s 选项来设置位置参数。\r交互登录式 在 Ubuntu 中，使用 SSH 登录时，文件的加载流程大致如下。\n/etc/profile：入口文件 - A，所有用户都会执行。 /etc/bash.bashrc：全局环境配置文件，A 会加载此文件。 /etc/profile.d：全局环境配置目录，A 会加载此目录的所有文件。 ~/.profile：用户环境配置入口件文 - B。 ~/.bashrc：用户环境配置文件，B 会加载此文件。 rc(Run Commands)，源于 Unix 传统。\n/etc/profile system-wide：系统范围的配置文件。\n# /etc/profile: system-wide .profile file for the Bourne shell (sh(1)) # and Bourne compatible shells (bash(1), ksh(1), ash(1), ...). # 检查提示符变量 PS1 是否被设置 if [ \u0026#34;${PS1-}\u0026#34; ]; then # 检查 BASH 变量是否被设置，且它的值是否不等于 /bin/sh if [ \u0026#34;${BASH-}\u0026#34; ] \u0026amp;\u0026amp; [ \u0026#34;$BASH\u0026#34; != \u0026#34;/bin/sh\u0026#34; ]; then # The file bash.bashrc already sets the default PS1. # PS1=\u0026#39;\\h:\\w\\$ \u0026#39; # 如果 bash.bashrc 文件存在，则加载 if [ -f /etc/bash.bashrc ]; then . /etc/bash.bashrc fi else # 当前用户的 id 是否等于 0 (root) if [ \u0026#34;$(id -u)\u0026#34; -eq 0 ]; then # root 用户提示符设为 # PS1=\u0026#39;# \u0026#39; else # 普通用户提示符设为 $ PS1=\u0026#39;$ \u0026#39; fi fi fi # profile.d 目录是否存在 if [ -d /etc/profile.d ]; then # 遍历目录下的所有 sh 文件 for i in /etc/profile.d/*.sh; do # 如果文件可读，则加载 if [ -r $i ]; then . $i fi done unset i fi\r/etc/bash.bashrc 文件内容有点多，就看几行注释吧。\n# System-wide .bashrc file for interactive bash(1) shells. # To enable the settings / commands in this file for login shells as well, # this file has to be sourced in /etc/profile. # If not running interactively, don\u0026#39;t do anything [ -z \u0026#34;$PS1\u0026#34; ] \u0026amp;\u0026amp; return\r如果不是交互式（PS1 变量没有设置），则直接退出。\n/etc/profile.d 看一看目录的文件就好了。\nls -l /etc/profile.d\rtotal 24 -rw-r--r-- 1 root root 96 Oct 15 2021 01-locale-fix.sh -rw-r--r-- 1 root root 835 Apr 8 2022 apps-bin-path.sh -rw-r--r-- 1 root root 726 Nov 16 2021 bash_completion.sh -rw-r--r-- 1 root root 1107 Mar 23 2022 gawk.csh -rw-r--r-- 1 root root 757 Mar 23 2022 gawk.sh -rw-r--r-- 1 root root 1557 Feb 17 2020 Z97-byobu.sh\r~/.profile 这个文件会去加载我们常常用到的 ~/.bashrc 文件。\n# ~/.profile: executed by the command interpreter for login shells. # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login # exists. # see /usr/share/doc/bash/examples/startup-files for examples. # the files are located in the bash-doc package. # the default umask is set in /etc/profile; for setting the umask # for ssh logins, install and configure the libpam-umask package. #umask 022 # if running bash if [ -n \u0026#34;$BASH_VERSION\u0026#34; ]; then # include .bashrc if it exists if [ -f \u0026#34;$HOME/.bashrc\u0026#34; ]; then . \u0026#34;$HOME/.bashrc\u0026#34; fi fi # set PATH so it includes user\u0026#39;s private bin if it exists if [ -d \u0026#34;$HOME/bin\u0026#34; ] ; then PATH=\u0026#34;$HOME/bin:$PATH\u0026#34; fi # set PATH so it includes user\u0026#39;s private bin if it exists if [ -d \u0026#34;$HOME/.local/bin\u0026#34; ] ; then PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34; fi\r看头部注释可以得知，如果 ~/.bash_profile 和 ~/.bash_login 存在的话，~/.profile 是不会被加载的，文件加载顺序如下。\nbash_profile \u0026gt; bash_login \u0026gt; profile\r~/.bashrc 下面分析一下头部就差不多了。\n# ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac\r看第一行注释，这个文件会被非登录 Shell 执行。 前面说到 ~/.profile 文件也会加载此文件，也就是说登录式 Shell 和非登录式 Shell 都会用到这个文件。\n再来分析一下这些魔法代码（真的是天才设计🤪）：\n# If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac\r$- 是一个特殊变量，表示当前 Shell 运行时启用的选项，可以打印出来。\necho $-\rhimBHs\r*i* 是一个匹配条件： $- 中是否包含 i。 i 选项表示当前 Shell 是交互式的。 如果匹配成功，会退出 case。 如果匹配失败，会执行 return，退出当前脚本。 总结：如果不是在交互式中运行，直接退出，什么都不做。\n交互非登录式 这里讨论的是非登录的情况。例如：\n在 Shell 中输入 Bash 新建一个 Shell 实例。 使用 () 执行命令分组时生成的 Subshell。 在 GNOME Terminal 中打开一个新的终端会话。 一句话总结：不加载 /etc/profile，只加载 ~/.bashrc。\n非交互式 这种方式没有命令行提示符，不会加载任可配置文件，即使手动加载 ~/.bashrc，也不会生效。 因为上面的分析里提到，在非交互式中，会直接退出，什么都不做。\n# If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac\r当然，你可以使用 BASH_ENV 变量来设置加载的文件，解释如下。\nIf this variable is set when Bash is invoked to execute a shell script, its value is expanded and used as the name of a startup file to read before executing the script. See Bash Startup Files.\r环境变量的持久化 只需把环境变量写在对应的文件中，如：~/.bashrc。\necho \u0026#39;export MY_VARIABLE=\u0026#34;my_value\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc\rsource ~/.bashrc\r","date":"2024-08-27","id":31,"permalink":"/zh-cn/linux/env/shell-startup/","summary":"\u003ch2 id=\"shell-的启动方式\"\u003eShell 的启动方式\u003c/h2\u003e\n\u003cp\u003eShell 的启动方式会影响环境变量的加载过程，可分为以下几种。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e交互式（Interactive）\n\u003cul\u003e\n\u003cli\u003e登录：以登录方式启动的 Shell 实例，如 SSH 登录。\u003c/li\u003e\n\u003cli\u003e非登录：\n\u003cul\u003e\n\u003cli\u003e在 Shell 中输入 Bash 新建 Shell 实例。\u003c/li\u003e\n\u003cli\u003e在 GNOME Terminal 中打开一个新的终端会话。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e非交互式（Non-Interactive）\n\u003cul\u003e\n\u003cli\u003e在脚本中启动的 Shell 实例。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"什么是交互式-shell\"\u003e什么是交互式 Shell\u003c/h2\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/bash.html#What-is-an-Interactive-Shell_003f\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eWhat is an Interactive Shell\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003e什么是交互式 Shell\u003c/p\u003e","tags":[],"title":"Shell 的启动过程"},{"content":"SHELL 当前使用的 Shell。\nprintenv SHELL\r/bin/bash\rHOME 用户主目录路径。\nprintenv HOME\r/home/kuga\rPWD 当前目录的路径。\nprintenv PWD\r/home/kuga\rUSER 当前用户。\nprintenv USER\rkuga\rPATH 可执行程序搜索的路径，以冒号分隔。\nprintenv PATH\r/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\rSHLVL Shell 的层级，从 1 开始。\nprintenv SHLVL\r1\r","date":"2024-08-27","id":32,"permalink":"/zh-cn/linux/env/variables/","summary":"\u003ch2 id=\"shell\"\u003eSHELL\u003c/h2\u003e\n\u003cp\u003e当前使用的 Shell。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprintenv SHELL\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"home\"\u003eHOME\u003c/h2\u003e\n\u003cp\u003e用户主目录路径。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprintenv HOME\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/home/kuga\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"pwd\"\u003ePWD\u003c/h2\u003e\n\u003cp\u003e当前目录的路径。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprintenv PWD\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/home/kuga\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"user\"\u003eUSER\u003c/h2\u003e\n\u003cp\u003e当前用户。\u003c/p\u003e","tags":[],"title":"常见环境变量"},{"content":"简介 Shebang 是 Unix 和类 Unix 操作系统中的一个特殊符号，由字符 #! 组成， 用于指示脚本文件应该由哪个解释器来执行。它通常出现在脚本文件的第一行，后面跟着解释器的路径。 Shebang 使得脚本文件能够像可执行程序一样直接运行，而不必手动调用解释器。\n名称由来 # 在英语中表示 hash 或 sharp，! 在编程和命令行中表示 bang， 这两个符号组合在一起就成了 hash-bang 或 sharp-bang。 随着时间的推移，hash-bang 最终简化为 shebang。\n指定解释器 Shebang 后面指定的路径是解释器的位置，例如：\n#!/bin/bash\r系统会使用该路径下的 bash 来执行这个脚本内容。\n统一执行形式 不同类型的脚本可以统一使用 ./file 的形式执行，无需显式调用解释器。\n#!/bin/bash\r无需使用 bash file 执行，直接使用 ./file。\n#!/bin/python3\r无需使用 python file 执行，直接使用 ./file。\n常见例子 我们在 bash 脚本中常常会看到下面的例子。\n#!/usr/bin/env bash\renv 是一个与环境变量相关的命令。 当后面跟的参数是 bash 时，它会根据环境变量 PATH 提供的路径查找 bash 的解释器。 这样做的好处是无须写死 bash 解释器的路径，因为在不同的系统中，bash 解释器可能会在不同的位置。\ntype -a bash\rbash is /usr/bin/bash bash is /bin/bash\r对于上面的 python 例子，更好的 Shebang 是使用 env。\n#!/usr/bin/env python\r手动调用 如果没有 Shebang，可以手动调用解释器。\nbash script.sh\r","date":"2024-08-27","id":33,"permalink":"/zh-cn/linux/env/shebang/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003eShebang 是 Unix 和类 Unix 操作系统中的一个特殊符号，由字符 \u003ccode\u003e#!\u003c/code\u003e 组成，\n用于指示脚本文件应该由哪个解释器来执行。它通常出现在脚本文件的第一行，后面跟着解释器的路径。\nShebang 使得脚本文件能够像可执行程序一样直接运行，而不必手动调用解释器。\u003c/p\u003e\n\u003ch2 id=\"名称由来\"\u003e名称由来\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e#\u003c/code\u003e 在英语中表示 hash 或 sharp，\u003ccode\u003e!\u003c/code\u003e 在编程和命令行中表示 bang，\n这两个符号组合在一起就成了 hash-bang 或 sharp-bang。\n随着时间的推移，hash-bang 最终简化为 shebang。\u003c/p\u003e","tags":[],"title":"Shebang"},{"content":"用户账号 /etc/passwd Linux 使用 /etc/passwd 文件来保存用户账号信息。 因为许多服务进程需要读取用户账号的信息，可以看到这个文件的权限都是可读的。\n-rw-r--r-- 1 root root 2010 Aug 24 15:12 /etc/passwd\r查看某个用户的账号信息。\ngrep kuga /etc/passwd\rkuga:x:1000:1000:,,,:/home/kuga:/bin/bash\rKEY VALUE 用户名 kuga 用户密码 x 用户 ID 1000 用户组 ID 1000 备注字段 ,,, 目录位置 /home/kuga 默认 Shell /bin/bash 系统会预留一定的 UID 范围，Ubuntu 新添加的用户 ID 从 1000 开始。 下面的命令会按第 3 个字段 UID 逆序排序，然后输出前 10 行，只显示 136 字段（用户名，UID，目录位置）。\nsort -t \u0026#39;:\u0026#39; -k 3 -nr /etc/passwd | cut -d \u0026#39;:\u0026#39; -f1,3,6 | head -n 10\rnobody:65534:/nonexistent soda:1001:/home/soda kuga:1000:/home/kuga lxd:999:/var/snap/lxd/common/lxd ecs-instance-connect:998:/home/ecs-instance-connect fwupd-refresh:115:/run/systemd _chrony:114:/var/lib/chrony usbmux:112:/var/lib/usbmux landscape:111:/var/lib/landscape tss:110:/var/lib/tpm\r/etc/shadow 由于历史原因，早期的用户密码使用 /etc/passwd 存储，所以文件名是 passwd。 后来因为密码容易被暴力破解，现在的密码已经搬到新文件 /etc/shadow。 这个文件只有 root 和 shadow 组可读。\n-rw-r----- 1 root shadow 1255 Aug 24 15:08 /etc/shadow\r可以粗略看看这个文件的内容。\nroot:*:19955:0:99999:7::: daemon:*:19103:0:99999:7::: bin:*:19103:0:99999:7::: sys:*:19103:0:99999:7::: sync:*:19103:0:99999:7:::\r这些字段一般都是管理密码的（如多少天后必须更改），这里不展开。\nUseradd HOME 目录 默认不创建用户目录。\nuseradd foo\r使用 -m 参数会创建用户目录。\nuseradd -m foo\r使用 -M 参数不会创建用户目录。\nuseradd -M foo\r查看默认配置 使用 -D 选项可以查看添加用户时采用的默认配置。\nuseradd -D\rGROUP=100 HOME=/home INACTIVE=-1 EXPIRE= SHELL=/bin/sh SKEL=/etc/skel CREATE_MAIL_SPOOL=no\rGROUP：用户默认组 ID。 HOME：用户目录位置。 INACTIVE：密码过期后多少天禁用账号。 EXPIRE：账号过期日期。 SHELL：默认使用的登录 Shell。 SKEL：Skeletal，该目录内容会复制到用户主目录。 CREATE_MAIL_SPOOL：是否创建邮件存储文件。 /etc/default/useradd useradd 命令的默认配置文件。\n-rw-r--r-- 1 root root 1118 Aug 28 10:58 /etc/default/useradd\rcat /etc/default/useradd | head -n 20\r# Default values for useradd(8) # # The SHELL variable specifies the default login shell on your # system. # Similar to DSHELL in adduser. However, we use \u0026#34;sh\u0026#34; here because # useradd is a low level utility and should be as general # as possible SHELL=/bin/sh # # The default group for users # 100=users on Debian systems # Same as USERS_GID in adduser # This argument is used when the -n flag is specified. # The default behavior (when -n and -g are not specified) is to create a # primary user group with the same name as the user being added to the # system. # GROUP=100 # # The default home directory. Same as DHOME for adduser # HOME=/home\r如果把 SHELL 改成 /bin/bash，那么 useradd -D 就会自动更新。\n/etc/login.defs 用户账号和登录管理的核心配置文件。 功能包括：密码策略、UID/GID 范围、HOME 目录管理、用户和组管理、登录设置等等。 文件中的设置会影响诸如 useradd、usermod、passwd 等命令的行为，修改前建议提前备份。\n-rw-r--r-- 1 root root 10734 Nov 11 2021 /etc/login.defs\r单独看一下 USERGROUPS_ENAB 参数。\ngrep -B 4 -E \u0026#34;USERGROUPS_ENAB (yes|no)\u0026#34; /etc/login.defs\r# If set to yes, userdel will remove the user\u0026#39;s group if it contains no # more members, and useradd will create by default a group with the name # of the user. # USERGROUPS_ENAB yes\r如果 USERGROUPS_ENAB 的值为 yes：\nuserdel：删除用户的时候，会同时删除空的用户用。 useradd：创建用户的时候，会同时创建和用户名一样的组。 这就是为什么上面创建用户的时候，没有使用 GROUP=100 这个默认参数。\n使用命令修改配置 修改默认登录 Shell。\nsudo useradd -D -s /bin/bash\r修改默认组 ID。\nsudo useradd -D -g 100\r修改默认的 HOME 目录。\nsudo useradd -D -b path\r执行命令后，你会发现，文件的权限从 644 -\u0026gt; 600。\n-rw------- 1 root root 1195 Aug 28 11:22 /etc/default/useradd\r权限更正如下。\nsudo chmod 644 /etc/default/useradd\r翻一下源码，在 set_defaults(void) 方法中，执行过程大致如下：\n/* * set_defaults - write new defaults file * * set_defaults() re-writes the defaults file using the values that * are currently set. Duplicated lines are pruned, missing lines are * added, and unrecognized lines are copied as is. */ static int set_defaults(void) { ... }\r使用 mkstemp 函数创建临时文件 A。 处理 /etc/default/useradd 文件并复制到 A 中。 备份原来的 useradd 文件，重命名为 useradd-。 把 A 文件覆盖原来的 useradd 文件。 mkstemp 函数创建的文件权限是 0600。 查看 useradd 和它的备份 useradd-。\nls -li /etc/default/useradd*\r655124 -rw------- 1 root root 1197 Aug 28 16:28 /etc/default/useradd 655237 -rw------- 1 root root 1197 Aug 28 16:07 /etc/default/useradd-\r如果使用执行命令修改默认登录 Shell。\nsudo useradd -D -s /bin/sh\r再次查看两个文件的 inode。\n655454 -rw------- 1 root root 1195 Aug 28 17:27 /etc/default/useradd 655124 -rw------- 1 root root 1197 Aug 28 16:28 /etc/default/useradd-\r不难发现 useradd- 的 inode 就是修改前 useradd 的 inode。 关于权限被修改的问题，显然是不合理的，命令不应该修改文件的权限。 在 GitHub 上可以查看这个 pull request。\nUsermod 更改用户的登录名 sudo usermod -l newuser olduser\r将用户添加到一个组 -a 表示追加到组，而不是替换当前组列表。\nsudo usermod -aG group user\r更改用户的默认 Shell usermod 不会检查 Shell 的合法性，可用 chsh 代替。\nsudo chsh -s /bin/bash user\r更改用户 ID sudo usermod -u newuid user\rPasswd 修改当前用户的密码 不加参数就是修改当前用户的密码。\npasswd\r修改指定用户的密码 sudo passwd soda\r登录管理 禁止密码登录 下面两种方法是一样的，而且不会禁止 SSH 公钥认证。\nsudo usermod -L user\rsudo passwd -l user\r执行后，/etc/shadow 文件的密码字段前面会加 ! 。\nsudo grep user /etc/shadow\ruser:!$y...:19959:0:99999:7:::\r恢复密码登录 下面两种方法是一样的，可以混着用。\nsudo usermod -U user\rsudo passwd -u user\r执行后，/etc/shadow 文件的密码字段前面会删除 ! 。\n禁止 SSH 公钥认证 没有了登录 Shell，自然密码也是不能登录。\nsudo usermod -s /usr/sbin/nologin user\r恢复 SSH 公钥认证 sudo usermod -s /bin/bash user\rUserdel 仅删除用户 这种方法只删除用户，保留主目录。\nsudo userdel user\r主目录和邮件 不但删除用户，还要删除主目录和邮件。\nsudo userdel -r user\r如果文件或目录没不存在，会在终端提示。\nAdduser Package 这个包提供两个实用命令，adduser 和 deluser，属于上层封装好的工具。\n","date":"2024-08-27","id":34,"permalink":"/zh-cn/linux/perm/user-mgmt/","summary":"\u003ch2 id=\"用户账号\"\u003e用户账号\u003c/h2\u003e\n\u003ch3 id=\"etcpasswd\"\u003e/etc/passwd\u003c/h3\u003e\n\u003cp\u003eLinux 使用 \u003ccode\u003e/etc/passwd\u003c/code\u003e 文件来保存用户账号信息。\n因为许多服务进程需要读取用户账号的信息，可以看到这个文件的权限都是可读的。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e root root \u003cspan class=\"m\"\u003e2010\u003c/span\u003e Aug \u003cspan class=\"m\"\u003e24\u003c/span\u003e 15:12 /etc/passwd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e查看某个用户的账号信息。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egrep kuga /etc/passwd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ekuga:x:1000:1000:,,,:/home/kuga:/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eKEY\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eVALUE\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用户名\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ekuga\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用户密码\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用户 ID\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用户组 ID\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e备注字段\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e,,,\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e目录位置\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e/home/kuga\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e默认 Shell\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e/bin/bash\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e系统会预留一定的 UID 范围，Ubuntu 新添加的用户 ID 从 1000 开始。\n下面的命令会按第 3 个字段 UID 逆序排序，然后输出前 10 行，只显示 136 字段（用户名，UID，目录位置）。\u003c/p\u003e","tags":[],"title":"用户管理"},{"content":"用户和组的关系 主组 - Primary Group 创建用户的时候，会同时创建一个同名组，这个就是主组。\ngrep soda /etc/passwd\rsoda:x:1001:1001:,,,:/home/soda:/bin/bash\r第 4 个字段表示主组 ID 1001，还可以使用 groups 命令查看。\ngroups soda\rsoda : soda\r附加组 - Secondary Groups 用户还可以属于多个附加组，用于权限的访问控制。\nID 指令 查看用户组信息最实用的命令。\nid soda\ruid=1001(soda) gid=1001(soda) groups=1001(soda)\rgid 表示主组，groups 表示附加组。\n/etc/group 组的配置文件，使用命令修改，不要手动编辑，不然改错就寄了。\n-rw-r--r-- 1 root root 886 Aug 28 21:00 /etc/group\r组信息 查看 sudo 组的信息\ngrep sudo /etc/group\rsudo:x:27:kuga\r组名：sudo 密码：x 组ID：27 成员：kuga 组成员有多个时，以逗号分隔：kuga,soda。\n新建组 sudo groupadd rocks\rgrep rocks /etc/group\rrocks:x:1002:\r修改组名 sudo groupmod -n newrocks rocks\r用户分配组 保留附加组 此方法不会覆盖附加组列表。\nsudo usermod -aG rocks soda\rid soda\r... groups=1001(soda),1002(rocks)\r覆盖附加组 去掉 -a (append) 选项会覆盖整个符加组列表。\nsudo usermod -G sudo soda\rid soda\r... groups=1001(soda),27(sudo)\r显然，soda 组不见了。\n删除附加组 删除 soda 用户的 sudo 附加组。\nsudo gpasswd -d soda sudo\r也可以使用覆盖的方式，只保留 soda 组。\nsudo usermod -G soda soda\r","date":"2024-08-27","id":35,"permalink":"/zh-cn/linux/perm/group-mgmt/","summary":"\u003ch2 id=\"用户和组的关系\"\u003e用户和组的关系\u003c/h2\u003e\n\u003ch3 id=\"主组---primary-group\"\u003e主组 - Primary Group\u003c/h3\u003e\n\u003cp\u003e创建用户的时候，会同时创建一个同名组，这个就是主组。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egrep soda /etc/passwd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esoda:x:1001:1001:,,,:/home/soda:/bin/bash\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e第 4 个字段表示主组 ID 1001，还可以使用 groups 命令查看。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egroups soda\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esoda : soda\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"附加组---secondary-groups\"\u003e附加组 - Secondary Groups\u003c/h3\u003e\n\u003cp\u003e用户还可以属于多个附加组，用于权限的访问控制。\u003c/p\u003e","tags":[],"title":"组管理"},{"content":"组成结构 -rwxr-xr--\r第一个字符表示文件的类型：\n-：文件，如文本文件、二进制文件等。 d：目录。 l：符号链接，Symbolic link (Soft link)。 b：块设备，如硬盘、光盘等。 c：字符设备，如终端设备、键盘等。 p：管道，进程间通信。 s：套接字，网络通信，进程间数据交换。 后面的字符 3 个为一组（r=可读、w=可写、x=可执行），分别对应：\n类别 权限 描述 拥有者 rwx 可读/可写/可执行 用户组 r-x 可读/不可写/可执行 其它人 r-- 可读/不可写/不可执行 目录的可执行权限 和文件的可执行权限一样，如果要对目录进行操作，目录也必须有可执行权限。\ncd /home\rls /home\r如果没有可执行权限，上面的命令会执行失败。\nUmask 创建一个文件或目录时，系统会使用 umask 的值来计算文件的权限。\numask\r0002\r第一位：特殊模式，这里不展开。 第二位：Owner，拥有者。 第三位：Group，组。 第四位：Others，其它人。 全权限 新文件：666（默认不需要执行权限）。 新目录：777（目录都需要执行权限）。 权限计算 权限 = 全权限 - umask\n文件：666 - 002 = 664 目录：777 - 002 = 775 umask 是掩码，代表不想授予的权限。\nchmod 修改文件权限的命令。\nchmod - change file mode bits\r八进制模式 chmod 755 file\r-rwxr-xr-x 1 kuga kuga 16 Aug 23 11:08 file\r字符模式 u 代表用户：给用户添加执行权限。\nchmod u+x file\rg 代表组：给组去掉写权限。\nchmod g-w file\ro 代表其它人：给其他人添加读权限。\nchmod g+r file\ra 代表上面 3 个：给所有人添加执行权限。\nchmod a+x file\rchown 修改文件的拥有者和组。\nchown - change file owner and group\r更改所有者 chown user file\r递归更改所有者 chown -R user dir\r更改所有者和组 chown user:group file\r递归更改所有者和组 chown -R user:group dir\r只更改组 chown :group file\rchgrp chgrp - change group ownership\rchgrp group file\r","date":"2024-08-27","id":36,"permalink":"/zh-cn/linux/perm/file-perm/","summary":"\u003ch2 id=\"组成结构\"\u003e组成结构\u003c/h2\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-rwxr-xr--\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e第一个字符表示文件的类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/strong\u003e：文件，如文本文件、二进制文件等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ed\u003c/code\u003e\u003c/strong\u003e：目录。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003el\u003c/code\u003e\u003c/strong\u003e：符号链接，Symbolic link (Soft link)。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eb\u003c/code\u003e\u003c/strong\u003e：块设备，如硬盘、光盘等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ec\u003c/code\u003e\u003c/strong\u003e：字符设备，如终端设备、键盘等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ep\u003c/code\u003e\u003c/strong\u003e：管道，进程间通信。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003es\u003c/code\u003e\u003c/strong\u003e：套接字，网络通信，进程间数据交换。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e后面的字符 3 个为一组（r=可读、w=可写、x=可执行），分别对应：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e类别\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e权限\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e描述\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e拥有者\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003erwx\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e可读/可写/可执行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用户组\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003er-x\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e可读/不可写/可执行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e其它人\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003er--\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e可读/不可写/不可执行\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"目录的可执行权限\"\u003e目录的可执行权限\u003c/h2\u003e\n\u003cp\u003e和文件的可执行权限一样，如果要对目录进行操作，目录也必须有可执行权限。\u003c/p\u003e","tags":[],"title":"文件权限"},{"content":"ACL 访问控制列表（Access Control List）是一种更为灵活和细粒度的权限管理机制， 用于定义和控制文件系统对象的访问权限。与传统的文件权限系统相比，ACL 提供了更细致的权限控制， 允许你为不同的用户和用户组设置特定的权限，不再局限于传统的三个角色（Owner、Group、Others）。\n安装 如没安装，可用以下命令。\nsudo apt-get install acl\rgetfacl 获取文件的访问控制列表\ngetfacl - get file access control lists\r使用例子 获取 foo 文件的 ACL 信息。\ngetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- group::rw- other::r--\rsetfacl 设置文件的访问控制列表。\nsetfacl - set file access control lists\r指定用户授权 soda 用户添加对 foo 文件的读写权限。\nsetfacl -m u:soda:rw foo\rgetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- user:soda:rw- group::rw- mask::rw- other::r--\r指定组授权 soda 组添加对 foo 文件的读写权限。\nsetfacl -m g:soda:rw foo\rgetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- user:soda:rw- group::rw- group:soda:rw- mask::rw- other::r--\r其它人授权 对其它人添加对 foo 文件的读写权限。\nsetfacl -m o::rw foo\rgetfacl foo\r# file: foo # owner: kuga # group: kuga user::rw- user:soda:rw- group::rw- group:soda:rw- mask::rw- other::rw-\r授权修改 命令采取覆盖的形式。\nsetfacl -m o::r foo\rother::rw- 会变成 other::r--。\n清空授权 setfacl -m u:soda:- foo\rsetfacl -m o::- foo\ruser:soda:--- other::---\r删除授权 setfacl -x u:soda foo\rsetfacl -m g:soda foo\ruser:soda、group:soda 这两行会删掉。\n末尾的 + 号 使用 ACL 的文件，权限列后面会有一个 + 号。\n-rw-rw-r--+\rRBAC 差不多 7-8 年前，曾经接触过一个 ACL 的管理后台，后来改成了 RBAC。\n","date":"2024-08-29","id":37,"permalink":"/zh-cn/linux/perm/acl/","summary":"\u003ch2 id=\"acl\"\u003eACL\u003c/h2\u003e\n\u003cp\u003e访问控制列表（Access Control List）是一种更为灵活和细粒度的权限管理机制，\n用于定义和控制文件系统对象的访问权限。与传统的文件权限系统相比，ACL 提供了更细致的权限控制，\n允许你为不同的用户和用户组设置特定的权限，不再局限于传统的三个角色（Owner、Group、Others）。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e如没安装，可用以下命令。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt-get install acl\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"getfacl\"\u003egetfacl\u003c/h2\u003e\n\u003cp\u003e获取文件的访问控制列表\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egetfacl - get file access control lists\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"使用例子\"\u003e使用例子\u003c/h3\u003e\n\u003cp\u003e获取 foo 文件的 ACL 信息。\u003c/p\u003e","tags":[],"title":"访问控制列表"},{"content":"Systemd 系统的第一个进程，进程号为 1。\nps -p 1\rPID TTY TIME CMD 1 ? 00:00:04 systemd\r但当我们想显示详细信息的时候，结果会有些不一样。\nps -p 1 -f\rUID PID PPID C STIME TTY TIME CMD root 1 0 0 Aug07 ? 00:00:04 /sbin/init noibrs\r其实这两个进程是一样的，因为 init 指向的是 systemd。\nfile /sbin/init\r/sbin/init: symbolic link to /lib/systemd/systemd\rinit 是 Unix 最早的初始化进程，由于 systemd 取代了 init， 为了兼容性，/sbin/init 通常是一个指向 systemd 的软链接。 名称后面加 d 是 Unix 守护进程的命名规范，System D 是一个术语， 表示快速思考和解决问题的能力。systemd 诞生于 2010 年，之前用的是 SysVinit。\nSysVinit Unix System V 这种初始化方法现在已经不怎么用了，但在一些旧的发行版中还能见到。\nrunlevel runlevel 也是这个 SysVinit 的产物。\nrunlevel\rN 5\r5 对应 graphical.target，N 表示上一次的 runlevel 为 No。\nwho -r\rrun-level 5 2024-08-07 21:30\r阿里云的 Ubuntu 默认目标为 graphical.target，‌ 这是为了方便用户使用图形界面（VNC）来管理操作系统， 不需要的话可以把目标换成 multi-user.target。\nsystemctl set-default multi-user.target\r/etc/rcX.d rc 是 run commands 的缩写，.d 是目录的意思，目的是为了避免命名冲突。 这个目录包含了特定运行级下启动的进程，例如运行级 5 对应 /etc/rc5.d。\nls -l /etc/rc5.d\rlrwxrwxrwx 1 root root 13 Jul 10 11:08 K01fio -\u0026gt; ../init.d/fio lrwxrwxrwx 1 root root 20 Apr 21 2022 K01irqbalance -\u0026gt; ../init.d/irqbalance lrwxrwxrwx 1 root root 17 Jul 10 11:05 K01sysstat -\u0026gt; ../init.d/sysstat\r虽然现在使用的是 systemd，但为了兼容性，这些目录和脚本仍然保留着。\nUnit Files 单元文件是 systemd 的配置文件，用于定义和管理系统服务、设备、挂载点、套接字和其他系统资源。 每个单元文件都描述了 systemd 如何启动、停止和监视相关资源。\n基本分类 类型 描述 扩展名 服务单元 系统服务 .service 挂载单元 文件系统挂载点 .mount 设备单元 定义设备 .device 套接字单元 套接字服务 .socket 计时器单元 定时任务 .timer 目标单元 系统目标状态 .target 所在目录 /etc/systemd/system/：系统管理员定义的单元文件。 /usr/lib/systemd/system/：发行版提供的单元文件。 /run/systemd/system/：运行时生成的单元文件。 Nginx 状态 可以通过 Nginx 的状态查看服务的单元文件路径。\nsystemctl status nginx\r● nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2024-08-08 12:43:17 CST; 2h 1min ago Docs: man:nginx(8) Main PID: 11037 (nginx) Tasks: 3 (limit: 1917) Memory: 8.6M CPU: 29ms CGroup: /system.slice/nginx.service ├─11037 \u0026#34;nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\u0026#34; ├─11039 \u0026#34;nginx: worker process\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; └─11040 \u0026#34;nginx: worker process\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; Aug 08 12:43:17 guitarocks systemd[1]: Starting A high performance web server and a reverse proxy server... Aug 08 12:43:17 guitarocks systemd[1]: Started A high performance web server and a reverse proxy server.\rNginx 单元文件 /etc/systemd/system/multi-user.target.wants/nginx.service /lib/systemd/system/nginx.service /usr/lib/systemd/system/nginx.service\rNginx 服务的单元文件有好几个路径，第一个是软链接。\nfile /etc/systemd/system/multi-user.target.wants/nginx.service\r...: symbolic link to /lib/systemd/system/nginx.service\r第二第三个是硬链接，他们的 inode 是一样的，并且 /lib 是指向 /usr/lib 的软链接。\nls -i /usr/lib/systemd/system/nginx.service\r265498 /usr/lib/systemd/system/nginx.service\rls -i /lib/systemd/system/nginx.service\r265498 /lib/systemd/system/nginx.service\rfile /lib\r/lib: symbolic link to usr/lib\r下面是单元文件的内容。\ncat /lib/systemd/system/nginx.service\r# Stop dance for nginx # ======================= # # ExecStop sends SIGSTOP (graceful stop) to the nginx process. # If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control # and sends SIGTERM (fast shutdown) to the main process. # After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends # SIGKILL to all the remaining processes in the process group (KillMode=mixed). # # nginx signals reference doc: # http://nginx.org/en/docs/control.html # # 定义了服务的描述和依赖关系 [Unit] Description=A high performance web server and a reverse proxy server Documentation=man:nginx(8) After=network.target nss-lookup.target [Service] # forking 表示服务在启动时会创建子进程，父进程会退出 Type=forking # 存储主进程的 ID PIDFile=/run/nginx.pid # 启动准备，测试 nginx 配置 ExecStartPre=/usr/sbin/nginx -t -q -g \u0026#39;daemon on; master_process on;\u0026#39; # 启动命令，-g 设置全局指定，会覆盖Nginx配置文件的选项 ExecStart=/usr/sbin/nginx -g \u0026#39;daemon on; master_process on;\u0026#39; # 重载配置命令 ExecReload=/usr/sbin/nginx -g \u0026#39;daemon on; master_process on;\u0026#39; -s reload # 终止进程的命令 ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid # 终止服务的等待时间，超过 5 秒则强制终止 TimeoutStopSec=5 # 终止进程的方式，SIGTERM，超时，SIGKILL，优雅-\u0026gt;强制 KillMode=mixed # 如何安装和启用服务 [Install] WantedBy=multi-user.target\r常用命令 systemctl start [unit]：启动单元。 systemctl stop [unit]：停止单元。 systemctl enable [unit]：启用单元，使其在引导时自动启动。 systemctl disable [unit]：禁用单元。 systemctl status [unit]：查看单元状态。 systemctl daemon-reload：在修改或添加单元文件后重新加载 systemd 配置。 Targets 从上面可以看到，target 是一种单元文件的类型，和一般单元文件不同，它代表的是系统当前的运行状态， target 定义了该状态下需要启动哪些进程和服务，所以 target 可以包含多个单元文件。 用下面的命令可以查看当前系统的 target。\nsystemctl get-default\rmulti-user.target # 多用户模式，不包含图形界面\rmulti-user.target target 文件通常存储在 /usr/lib/systemd/system/ 或 /etc/systemd/system/ 目录中。 每个 target 文件都包含关于该 target 的依赖关系和启动顺序的信息。 我们可以看一下 multi-user.target 这个文件内容。\ncat /lib/systemd/system/multi-user.target\r# SPDX-License-Identifier: LGPL-2.1-or-later # # This file is part of systemd. # # systemd is free software; you can redistribute it and/or modify it # under the terms of the GNU Lesser General Public License as published by # the Free Software Foundation; either version 2.1 of the License, or # (at your option) any later version. [Unit] Description=Multi-User System Documentation=man:systemd.special(7) Requires=basic.target Conflicts=rescue.service rescue.target After=basic.target rescue.service rescue.target AllowIsolate=yes\r下面两个目录包含了 multi-user.target 状态所需要的内容。\n/etc/systemd/system/multi-user.target.wants/ /lib/systemd/system/multi-user.target.wants/\r/etc 是用户定义配置，/lib 是系统默认配置。 用户定义配置：优先级更高，同一服务 systemd 会优先执行。 系统默认配置：系统或软件包更新时，会随之更新。 常用命令 设置默认 target：\nsystemctl set-default multi-user.target\r切换到指定 target：\nsystemctl isolate graphical.target\r查看可用 targets：\nsystemctl list-units --type=target\r","date":"2024-08-30","id":38,"permalink":"/zh-cn/linux/proc/systemd/","summary":"\u003ch2 id=\"systemd\"\u003eSystemd\u003c/h2\u003e\n\u003cp\u003e系统的第一个进程，进程号为 1。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eps -p \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ePID TTY          TIME CMD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"m\"\u003e1\u003c/span\u003e ?        00:00:04 systemd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e但当我们想显示详细信息的时候，结果会有些不一样。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eps -p \u003cspan class=\"m\"\u003e1\u003c/span\u003e -f\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUID  PID PPID C STIME TTY TIME     CMD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eroot   \u003cspan class=\"m\"\u003e1\u003c/span\u003e    \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e Aug07 ?   00:00:04 /sbin/init noibrs\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e其实这两个进程是一样的，因为 \u003ccode\u003einit\u003c/code\u003e 指向的是 \u003ccode\u003esystemd\u003c/code\u003e。\u003c/p\u003e","tags":[],"title":"Systemd"},{"content":"基本概念 文件描述符（File Descriptor，FD） 是在操作系统中， 用来表示已打开的文件或其他输入/输出资源的整数标识符。 它是操作系统与应用程序之间进行文件操作的桥梁。\n在 Linux 中，文件描述符是一个非负整数， 操作系统为每个打开的文件或输入/输出（I/O）资源（如管道、网络套接字等）分配一个文件描述符。 每当进程请求打开一个文件或资源时，操作系统会返回一个文件描述符， 以后进程就可以通过这个描述符来访问该文件或资源。\n常见的文件描述符 所有进程都会自动打开下面 3 个文件描述符。\n描述符 名称 描述 0 STDIN 标准输入 1 STDOUT 标准输出 2 STDERR 标准错误 例如：命令的重定向就直接使用了上面的文件描述符。\ncmd \u0026gt; foo.log 2\u0026gt; err.log\r上面的 \u0026gt; 和 1\u0026gt; 是一样的。\n代码中的文件描述符 操作系统通过文件描述符来管理文件操作。 常见的文件操作（如读取、写入、关闭）通常都需要文件描述符。 下面是一些常见的操作及其文件描述符的使用：\n打开文件 open() 系统调用会返回一个文件描述符。\nint fd = open(\u0026#34;example.txt\u0026#34;, O_RDONLY);\r读取文件 通过文件描述符读取内容。\nchar buffer[100]; read(fd, buffer, sizeof(buffer));\r写入文件 通过文件描述符将数据写入文件。\nwrite(fd, \u0026#34;Hello, World!\u0026#34;, 13);\r关闭文件 关闭文件描述符，以释放系统资源。\nclose(fd);\r进程中的文件描述符 每个进程都有一个对应的 /proc/PID/fd/ 目录，其中包含了所有该进程打开的文件描述符的符号链接。\nls -l /proc/NGINX_PID/fd\rlrwx------ 1 ... 0 -\u0026gt; /dev/null lrwx------ 1 ... 1 -\u0026gt; /dev/null lrwx------ 1 ... 10 -\u0026gt; \u0026#39;socket:[21631]\u0026#39; l-wx------ 1 ... 2 -\u0026gt; /var/log/nginx/error.log lrwx------ 1 ... 3 -\u0026gt; \u0026#39;socket:[21628]\u0026#39; l-wx------ 1 ... 4 -\u0026gt; /var/log/nginx/access.log l-wx------ 1 ... 5 -\u0026gt; /var/log/nginx/error.log lrwx------ 1 ... 6 -\u0026gt; \u0026#39;socket:[21614]\u0026#39; lrwx------ 1 ... 7 -\u0026gt; \u0026#39;socket:[21615]\u0026#39; lrwx------ 1 ... 8 -\u0026gt; \u0026#39;socket:[21629]\u0026#39; lrwx------ 1 ... 9 -\u0026gt; \u0026#39;socket:[21630]\u0026#39;\r总结 文件描述符为进程提供了一种抽象。 程序可以使用统一的接口进行各种 I/O 操作，而不必关心底层的物理设备细节。 例如，读取文件、从网络套接字接收数据以及从管道中读取数据， 都可以使用相同的 read() 函数来实现，这都是通过文件描述符来统一管理的。\n","date":"2024-08-30","id":39,"permalink":"/zh-cn/linux/proc/fd/","summary":"\u003ch2 id=\"基本概念\"\u003e基本概念\u003c/h2\u003e\n\u003cp\u003e文件描述符（File Descriptor，FD） 是在操作系统中，\n用来表示已打开的文件或其他输入/输出资源的\u003cstrong\u003e整数标识符\u003c/strong\u003e。\n它是操作系统与应用程序之间进行文件操作的桥梁。\u003c/p\u003e\n\u003cp\u003e在 Linux 中，文件描述符是一个非负整数，\n操作系统为每个打开的文件或输入/输出（I/O）资源（如管道、网络套接字等）分配一个文件描述符。\n每当进程请求打开一个文件或资源时，操作系统会返回一个文件描述符，\n以后进程就可以通过这个描述符来访问该文件或资源。\u003c/p\u003e\n\u003ch2 id=\"常见的文件描述符\"\u003e常见的文件描述符\u003c/h2\u003e\n\u003cp\u003e所有进程都会自动打开下面 3 个文件描述符。\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e描述符\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e名称\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e描述\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDIN\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e标准输入\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDOUT\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e标准输出\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDERR\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e标准错误\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e例如：命令的重定向就直接使用了上面的文件描述符。\u003c/p\u003e","tags":[],"title":"文件描述符"},{"content":"基本概念 管道可以把一个命令的输出作为下一个命令的输入， 在命令行环境中通过符号 | 来表示，是一种进程间的单向通信形式，基于文件描述符实现。\n工作原理 管道会创建了内存缓冲区，两个进程（命令）通过这个缓冲区通信。\n创建管道 使用 | 创建管道时，Shell 会调 pipe() 来创建管道，包含两个文件描述符。\n写入端文件描述符：A。 读取端文件描述符：B。 命令连接 左侧命令：把标准输出（文件描述符 1）重定向到管道的写入端 A。 右侧命令：把标准输入（文件描述符 0）重定向到管道的读取端 B。 数据流动 实时数据传输：两边的命令会并行执行，不会等前一个命令结束。 无临时文件：数据在内存中传递。 缓冲区大小：取决于系统。 查看缓冲区大小 cat /proc/sys/fs/pipe-max-size\r1048576\r局限性 单向通信：双向通信需要使用其他机制，如命名管道（FIFO）或套接字。 缓冲区大小：如果缓冲区满了，上游命令会暂停。 ","date":"2024-08-30","id":40,"permalink":"/zh-cn/linux/proc/pipe/","summary":"\u003ch2 id=\"基本概念\"\u003e基本概念\u003c/h2\u003e\n\u003cp\u003e管道可以把一个命令的输出作为下一个命令的输入，\n在命令行环境中通过符号 \u003ccode\u003e|\u003c/code\u003e 来表示，是一种进程间的单向通信形式，基于文件描述符实现。\u003c/p\u003e\n\u003ch2 id=\"工作原理\"\u003e工作原理\u003c/h2\u003e\n\u003cp\u003e管道会创建了内存缓冲区，两个进程（命令）通过这个缓冲区通信。\u003c/p\u003e\n\u003ch3 id=\"创建管道\"\u003e创建管道\u003c/h3\u003e\n\u003cp\u003e使用 \u003ccode\u003e|\u003c/code\u003e 创建管道时，Shell 会调 \u003ccode\u003epipe()\u003c/code\u003e 来创建管道，包含两个文件描述符。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e写入端文件描述符：\u003ccode\u003eA\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e读取端文件描述符：\u003ccode\u003eB\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"命令连接\"\u003e命令连接\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e左侧命令：把标准输出（文件描述符 \u003ccode\u003e1\u003c/code\u003e）重定向到管道的写入端 \u003ccode\u003eA\u003c/code\u003e\u003cstrong\u003e。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e右侧命令：把标准输入（文件描述符 \u003ccode\u003e0\u003c/code\u003e）重定向到管道的读取端 \u003ccode\u003eB\u003c/code\u003e\u003cstrong\u003e。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"数据流动\"\u003e数据流动\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e实时数据传输：两边的命令会并行执行，不会等前一个命令结束。\u003c/li\u003e\n\u003cli\u003e无临时文件：数据在内存中传递。\u003c/li\u003e\n\u003cli\u003e缓冲区大小：取决于系统。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"查看缓冲区大小\"\u003e查看缓冲区大小\u003c/h2\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat /proc/sys/fs/pipe-max-size\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e1048576\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"局限性\"\u003e局限性\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e单向通信：双向通信需要使用其他机制，如命名管道（FIFO）或套接字。\u003c/li\u003e\n\u003cli\u003e缓冲区大小：如果缓冲区满了，上游命令会暂停。\u003c/li\u003e\n\u003c/ul\u003e","tags":[],"title":"管道"},{"content":"todorocks\n","date":"2024-09-01","id":41,"permalink":"/zh-cn/linux/proc/lsof/","summary":"\u003cp\u003etodorocks\u003c/p\u003e","tags":[],"title":"LSOF 命令"},{"content":"todorocks\n","date":"2024-09-01","id":42,"permalink":"/zh-cn/linux/proc/ulimit/","summary":"\u003cp\u003etodorocks\u003c/p\u003e","tags":[],"title":"ULIMIT 命令"},{"content":"文件系统类型 可使用 df 命令的 -T 选项查看 Type 字段。\ndf -Th\rFilesystem Type Size Used Avail Use% Mounted on tmpfs tmpfs 168M 1.1M 167M 1% /run /dev/vda3 ext4 40G 3.2G 35G 9% / tmpfs tmpfs 837M 0 837M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/vda2 vfat 197M 6.1M 191M 4% /boot/efi tmpfs tmpfs 168M 4.0K 168M 1% /run/user/1000 tmpfs tmpfs 168M 4.0K 168M 1% /run/user/0\rEXT4 最常用的 Linux 文件系统，兼具稳定性和性能。\n最大文件 2 TB。 最大分区 32 TB。 默认日志模式是有序模式（Order）。 支持多种日志模式。 VFAT Linux 对 FAT 文件系统的支持，常用于与 Windows 系统共享数据。\nTMPFS 基于内存的虚拟文件系统，读写快。\n文件元数据 - inode 在 ext 文件系统中，元数据使用 inode 存储。\n使用 ls -i` 查看 ls -i foo\r791470 foo\r会输出 foo 文件的 inode 编号。\n使用 stat 命令 显示文件的详细信息。\nstat foo\rFile: foo Size: 0 Blocks: 0 IO Block: 4096 regular empty file Device: fc03h/64515d Inode: 791470 Links: 1 Access: (0664/-rw-rw-r--) Uid: ( 1000/ kuga) Gid: ( 1000/ kuga) Access: 2024-08-29 16:18:20.603296561 +0800 Modify: 2024-08-29 16:18:20.603296561 +0800 Change: 2024-08-29 16:38:49.498144965 +0800 Birth: 2024-08-29 16:18:20.603296561 +0800\rinode 的使用情况 df -i\rFilesystem Inodes IUsed IFree IUse% Mounted on tmpfs 214148 736 213412 1% /run /dev/vda3 2608144 100369 2507775 4% / tmpfs 214148 2 214146 1% /dev/shm tmpfs 214148 3 214145 1% /run/lock /dev/vda2 0 0 0 - /boot/efi tmpfs 42829 25 42804 1% /run/user/1000 tmpfs 42829 26 42803 1% /run/user/0\r新建文件会消耗一个 inode，例如下面的命令。\ntouch foobar\r/dev/vda3 2608144 100370 2507774 4% /\r可以看到 /dev/vda3 的 IFree 减 1 了。如果 inode 用完，就不能新建文件了。\n日志模式类型 文件系统一般分为 3 种日志模式：\nWriteback：回写模式。 Ordered：有序模式。 Journal：完全日志模式。 Writeback - 回写模式 特性：文件系统只记录元数据的日志，实际的数据写入操作和元数据的更新是异步进行的。也就是说，数据可能在元数据之前写入磁盘，或者在元数据之后写入。\n优点：性能较高，因为数据写入的顺序不受严格限制。\n缺点：由于数据和元数据之间的写入顺序可能不一致，如果系统崩溃，可能会导致元数据和数据不一致，进而出现数据损坏的风险。\nOrder - 有序模式 特性：文件系统确保所有的数据块在元数据更新之前被写入磁盘。换句话说，数据的写入必须在元数据更新前完成。\n优点：比回写模式安全得多，因为它减少了数据与元数据不一致的风险，同时保持了较好的性能。\n缺点：性能稍低于回写模式，但仍然是很多场景下的良好平衡点。\nJournal - 完全日志模式 特性：文件系统不仅记录元数据的日志，还记录数据本身的日志。所有的数据和元数据在实际写入磁盘之前，都会先记录到日志中。\n优点：这种模式提供了最高的安全性，因为在任何时候，数据和元数据都可以从日志中恢复，即使系统崩溃，文件系统仍然可以保证数据的完整性。\n缺点：性能较低，因为每次写入都要进行两次写操作（一次写日志，一次写实际数据）。\n","date":"2024-08-30","id":43,"permalink":"/zh-cn/linux/file-system/","summary":"\u003ch2 id=\"文件系统类型\"\u003e文件系统类型\u003c/h2\u003e\n\u003cp\u003e可使用 df 命令的 \u003ccode\u003e-T\u003c/code\u003e 选项查看 Type 字段。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edf -Th\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eFilesystem     Type   Size  Used Avail Use% Mounted on\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  168M  1.1M  167M   1% /run\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/dev/vda3      ext4    40G  3.2G   35G   9% /\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  837M     \u003cspan class=\"m\"\u003e0\u003c/span\u003e  837M   0% /dev/shm\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  5.0M     \u003cspan class=\"m\"\u003e0\u003c/span\u003e  5.0M   0% /run/lock\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/dev/vda2      vfat   197M  6.1M  191M   4% /boot/efi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  168M  4.0K  168M   1% /run/user/1000\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etmpfs          tmpfs  168M  4.0K  168M   1% /run/user/0\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"ext4\"\u003eEXT4\u003c/h3\u003e\n\u003cp\u003e最常用的 Linux 文件系统，兼具稳定性和性能。\u003c/p\u003e","tags":[],"title":"文件系统"},{"content":"Shebang #!/usr/bin/env bash\r变量赋值 = 号两边不能有空格。\nname=foo\r双引号 可解释变量。\nname=foo echo \u0026#34;hello, $name\u0026#34; # hello, foo echo \u0026#34;hello, \\$\\$\u0026#34; # hello, $$ echo \u0026#34;hello, \\\u0026#34;\\\u0026#34;\u0026#34; # hello, \u0026#34;\u0026#34;\r单引号 不解释变量，只有单引号是特殊字符。\nname=foo echo \u0026#39;hello, $name\u0026#39; # hello, $name echo \u0026#39;hello, $$\u0026#39; # hello, $$ echo \u0026#39;hello, \u0026#34;\u0026#34;\u0026#39; # hello, \u0026#34;\u0026#34;\r要输出单引号，需要先关闭单引号。\necho \u0026#39;I\u0026#39;\\\u0026#39;\u0026#39;m fine\u0026#39; # I\u0026#39;m fine\r命令替换 有反单号和 $() 两种用法。\nresult=`date`\rresult=$(date)\r推荐使用 $()，可读性更好，更多例子如下：\necho \u0026#34;dir is: $(pwd)\u0026#34;\rcount=$(ls $(pwd) | wc -l)\r在这里 ls 没有使用 -l 选项，但 count 的值是 4，原因在这。\n输出重定向 标准输出重定向 \u0026gt;，新建/覆盖文件。\ncmd \u0026gt; file\r追加输出重定向 \u0026gt;\u0026gt;。\ncmd \u0026gt;\u0026gt; file\r标准错误重定向 2\u0026gt;，新建/覆盖文件。\ncmd 2\u0026gt; file\r标准输出和错误重定向到不同文件。\ncmd \u0026gt; foo.log 2\u0026gt; bar.log\r标准输出和错误重定向到同一文件。\nls 404 \u0026gt; foobar.log 2\u0026gt;\u0026amp;1\r输入重定向 常用方式，使用 \u0026lt; 符号。\necho \u0026#34;a b c\u0026#34; \u0026gt; foo\rwc \u0026lt; foo\r1 3 6\r内联重定向，Inline Input Redirection。\nwc \u0026lt;\u0026lt; FOO apple banana cat FOO\r3 3 17\rFOO 为自定义标记，用于多行输入。\nEXPR 命令 反人类的数学运算指令，+ 号两边的空格不能少。\nexpr 2 + 5\r* 号是通匹符，还得转义。\nexpr 2 \\* 5\r只有整除，不支持浮点数。\nexpr 24 / 10\r方括号 可使用 [] 执行数学运算。\nvar1=$[1+5*2] var2=$[2*(3+2)]\rBC 计算器 精确数学运算计算器，全称 Basic/Bench Calculator。\n交互模式 bc\rCopyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc. This is free software with ABSOLUTELY NO WARRANTY. For details type `warranty\u0026#39;.\r4*2.5 10.0 quit\r-q 选项不打印上面那串英文欢迎语。\nbc -q\r浮点数 可以直接使用浮点数计算。\n2.5*5 12.5\r除法会用到 scale 变量，默认值为 0，表示整除。\nscale=2 10/3\r表示保留 2 位小数，scale 变量仅对除法有效。\n管道方式 foo=$(echo \u0026#34;scale=2; 10/3\u0026#34; | bc)\r内联输入重定向 var1=10.24 foo=$(bc \u0026lt;\u0026lt; EOF scale=2 a=2 $var1/a EOF )\rEXIT 命令 脚本的默认退出码是 0，表示正常退出，可使用 exit 改变。\nexit 5\r退出码的范围是 0-255，取模（%256）。\n","date":"2024-08-30","id":44,"permalink":"/zh-cn/linux/script/syntax/","summary":"\u003ch2 id=\"shebang\"\u003eShebang\u003c/h2\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#!/usr/bin/env bash\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"变量赋值\"\u003e变量赋值\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e=\u003c/code\u003e 号两边不能有空格。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003efoo\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"双引号\"\u003e双引号\u003c/h2\u003e\n\u003cp\u003e可解释变量。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003efoo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hello, \u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# hello, foo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hello, \\$\\$\u0026#34;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# hello, $$\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hello, \\\u0026#34;\\\u0026#34;\u0026#34;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# hello, \u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"单引号\"\u003e单引号\u003c/h2\u003e\n\u003cp\u003e不解释变量，只有单引号是特殊字符。\u003c/p\u003e","tags":[],"title":"基本语法"},{"content":"IF 语句 如果 command 的退出码为 0，则执行 then 的内容。\nif command then ... fi\r另一种形式。\nif command; then ... fi\rELSE if command; then ... else ... fi\rELIF if command; then ... elif command; then ... fi\r检查用户 检查 soda 用户是否存在。\n#!/usr/bin/env bash if grep soda /etc/passwd then echo \u0026#34;soda exists\u0026#34; fi\rsoda:x:1001:1001:,,,:/home/soda:/bin/bash soda exists\rgrep 有数据时，退出码为 0，没数据退出码为 1。\nTEST 命令 测试条件，如果为真，返回码为 0，否则返回码为 1。\ntest - check file types and compare values\r基本语法。\ntest EXPRESSION\r简短语法。\n[ EXPRESSION ]\r在命令行执行后，可以用 echo $? 看返回码。\n检查文件 [ -e file ]：文件是否存在。 [ -d file ]：是否存在且为目录。 [ -f file ]：是否存在且为文件。 [ -s file ]：是否存在且为不为空。 [ -r file ]：是否存在且可读。 [ -w file ]：是否存在且可写。 [ -x file ]：是否存在且可执行。 [ -O file ]：是否存在且属于当前用户。 [ -G file ]：是否存在且属于用户组。 [ a -nt b ]：文件 a 是否比 b 新。 [ a -ot b ]：文件 a 是否比 b 旧。 如果 file 或 $file 变量包含空格，要使用双引号。\n[ -e \u0026#34;file\u0026#34; ]\r[ -e \u0026#34;$file\u0026#34; ]\r检查字符串 [ -z str ]：字符串是否为空（长度为 0）。 [ -n str ]：字符串是否不为空（长度不为 0）。 [ s1 = s2 ]：字符串是否相等。 [ s1 != s2 ]：字符串是否不等。 检查数值 [ a -eq b ]：两个数是否相等。 [ a -ne b ]：两个数是否不等。 [ a -gt b ]：a 是否大于 b。 [ a -ge b ]：a 是否大于或等于 b。 [ a -lt b ]：a 是否小于 b。 [ a -le b ]：a 是否小于或等于 b。 复合条件 和传统的编程语言一致。\n[ cond1 ] \u0026amp;\u0026amp; [ cond2 ]\r[ cond1 ] || [ cond2 ]\r双括号 双括号可以使用高级数学表达式，无需转义。\nif (( 2**10 \u0026gt; 1000 )) then ... fi\r双方括号 提供字符串的高级匹配模式。\nif [[ $BASH_VERSION == 5.* ]] then ... fi\rCASE 语句 #!/usr/bin/env bash # 脚本的第一个参数 case \u0026#34;$1\u0026#34; in start) echo \u0026#34;Starting the service...\u0026#34; # 在这里添加启动服务的命令 ;; stop) echo \u0026#34;Stopping the service...\u0026#34; # 在这里添加停止服务的命令 ;; *) echo \u0026#34;Usage: $0 {start|stop}\u0026#34; exit 1 ;; esac\r$0：脚本名称。 $1：脚本的第一个参数 )：分支条件结束标记。 ;;：分支命令结束标记。 *)：默认分支，所有分支不匹配时执行。 ","date":"2024-08-31","id":45,"permalink":"/zh-cn/linux/script/cond/","summary":"\u003ch2 id=\"if-语句\"\u003eIF 语句\u003c/h2\u003e\n\u003cp\u003e如果 \u003ccode\u003ecommand\u003c/code\u003e 的退出码为 \u003ccode\u003e0\u003c/code\u003e，则执行 \u003ccode\u003ethen\u003c/code\u003e 的内容。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e另一种形式。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e command\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"else\"\u003eELSE\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e command\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"elif\"\u003eELIF\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e command\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelif\u003c/span\u003e command\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"检查用户\"\u003e检查用户\u003c/h3\u003e\n\u003cp\u003e检查 soda 用户是否存在。\u003c/p\u003e","tags":[],"title":"条件结构"},{"content":"FOR 语句 for var in list do ... done\rvar 变量的循环体外可以正常使用。\n#!/usr/bin/env bash for var in apple banana do echo \u0026#34;hello $var\u0026#34; done echo \u0026#34;outside $var\u0026#34;\rhello apple hello banana outside var\r变量存储列表。\n#!/usr/bin/env bash list=\u0026#34;apple banana\u0026#34; list=$list\u0026#34; orange\u0026#34; for var in $list\r命令替换。\nfor var in $(cat file)\r通配符遍历目录。\nfor var in /home/soda/*\rIFS - 字段分隔符 环境变量 IFS（Internal Field Separator）指定了字段分隔符。\necho $IFS\r默认值为空，表示以下列字符分隔。\n空格 制表符 换行符 以换行符分隔 IFS=$\u0026#39;\\n\u0026#39;\r以多个符号分隔 IFS=$\u0026#39;\\n:;\u0026#34;\u0026#39;\r表示以换行符、冒号、分号、双引号作为分隔符。\nC 语言中的 FOR i 变量在外部正常访问。\n#!/usr/bin/env bash for (( i = 1; i \u0026lt; 3; i++ )) do echo \u0026#34;index $i\u0026#34; done echo \u0026#34;last index $i\u0026#34;\rindex 1 index 2 last index 3\rWHILE 语句 while test command do ... done\r#!/usr/bin/env bash i=3 while [ $i -gt 0 ] do echo \u0026#34;index $i\u0026#34; i=$[ $i - 1 ] done\rindex 3 index 2 index 1\r多个 while 条件的时候，以最后一个条件的退出码判断。\nUNTIL 语句 until test command do ... done\r#!/usr/bin/env bash i=3 until [ $i -le 0 ] do echo \u0026#34;index $i\u0026#34; i=$[ $i - 1 ] done\rindex 3 index 2 index 1\rBREAK 语句 支持指定退出循环的层数。\n#!/usr/bin/env bash for (( i = 0; i \u0026lt; 3; i++ )); do echo \u0026#34;i=$i\u0026#34; for (( j = 0; j \u0026lt; 3; j++ )); do echo \u0026#34; j=$j\u0026#34; if [ $j -eq 1 ]; then break 2 fi done done\ri=0 j=0 j=1\rbreak 默认值是 1，表示退出 1 层循环。\nCONTINUE 语句 #!/usr/bin/env bash for (( i = 0; i \u0026lt; 3; i++ )); do echo \u0026#34;i=$i\u0026#34; for (( j = 0; j \u0026lt; 3; j++ )); do echo \u0026#34; j=$j\u0026#34; if [ $j -eq 1 ]; then continue 2 fi done done\ri=0 j=0 j=1 i=1 j=0 j=1 i=2 j=0 j=1\r和 break 一样，默认也是 1。\n循环输出重定向 可以对循环中的标准输出重定向。\n#!/usr/bin/env bash for var in apple banana do echo \u0026#34;hello $var\u0026#34; done \u0026gt; output.txt\r循环体的输出会生定向到 output.txt。\n循环输出管道 循环体的输出还可以使用管道传输。\n#!/usr/bin/env bash for var in apple banana do echo \u0026#34;hello $var\u0026#34; done | sort\r总结 我竟然有点喜欢 break 的语法糖。\n","date":"2024-08-30","id":46,"permalink":"/zh-cn/linux/script/loop/","summary":"\u003ch2 id=\"for-语句\"\u003eFOR 语句\u003c/h2\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e var in list\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003ccode\u003evar\u003c/code\u003e 变量的循环体外可以正常使用。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e var in apple banana\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hello \u003c/span\u003e\u003cspan class=\"nv\"\u003e$var\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;outside \u003c/span\u003e\u003cspan class=\"nv\"\u003e$var\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehello apple\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehello banana\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eoutside var\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e变量存储列表。\u003c/p\u003e","tags":[],"title":"循环结构"},{"content":"位置参数 Positional Parameters，脚本的位置参数。\n$0：脚本名，包含路径。 $1：第一个参数，以此类推。 ${10}：大于 9 的参数要用花括号。 #!/usr/bin/env bash echo $0 echo $1\r./foo a\r./foo a\rBASENAME 可以去掉脚本的路径，只保留名称。\nbasename /home/kuga/foo\r脚本中的用法。\nname=$(basename $0)\r特殊参数 参考这里。\n移动参数 shift 命令可以把位置参数左移一位。\n#!/usr/bin/env bash i=1 while [ -n \u0026#34;$1\u0026#34; ] do echo \u0026#34;param #$i = $1\u0026#34; i=$[ $i + 1 ] shift done\r./foo a b\rparam #1 = a param #2 = b\r脚本选项 选项就是以在单个连字符后跟单个字母，如：-a。由于选项和参数都是出现在脚本的后面，为了区分开来，一般是用双连字符 --，左边是选项，右边是参数，例如。\n./foo -a -b -- p1 p2\r要在脚本中正确解释选项和参数，不是一件容量的事情，为此官方提供了两个工具。\ngetopt 外部命令。 支持长选项，如 --help。 适合复杂的命令行工具。 getopts 内部命令。 不支持长选项。 适合简单的选项场景。 Github 上也有不少选项解释项目。\ngetopt 命令 getopt optstring parameters\roptstring：选项的定义。 parameters：选项的内容。 例如对于 optstring=ab:c。\n单字母 a 和 c 代表无值选项。 字母 b 后跟 : 表示有值选项。 看看下面例子的输出。\ngetopt ab:c -a -b bval -c p1 p2\r-a -b bval -c -- p1 p2\r可以看到他使用 -- 把选项和参数分隔开了。\ngetopts 命令 getopts 是 Bash 的内置命令，它会逐个解释选项，然后把选项的信息存储在特定变量中，方便脚本访问。这才是给我这种小菜鸡用的命令。\ngetopts optstring name\rname：当前选项的名称。 OPTIND：每处理一个项目，该值会加 1。 OPTARG：如果选项有值，会保存在这个变量中。 #!/usr/bin/env bash while getopts \u0026#34;ab:c:\u0026#34; name; do case $name in a) echo \u0026#34;Option -a\u0026#34; ;; b) echo \u0026#34;Option -b: $OPTARG\u0026#34; ;; c) echo \u0026#34;Option -c: $OPTARG\u0026#34; ;; \\?) echo \u0026#34;Invalid option: -$OPTARG\u0026#34; exit 1 ;; esac done # 显示 OPTIND 的值 echo \u0026#34;OPTIND: $OPTIND\u0026#34; # 使用 shift 来移除已解析的选项和参数 shift $((OPTIND - 1)) # 剩余的非选项参数 echo \u0026#34;Params: $@\u0026#34;\r./foo -a -b v1 -c v2 p1 p2\rOption -a Option -b: v1 Option -c: v2 OPTIND: 6 Params: p1 p2\r","date":"2024-08-31","id":47,"permalink":"/zh-cn/linux/script/input/","summary":"\u003ch2 id=\"位置参数\"\u003e位置参数\u003c/h2\u003e\n\u003cp\u003ePositional Parameters，脚本的位置参数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$0\u003c/code\u003e：脚本名，包含路径。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$1\u003c/code\u003e：第一个参数，以此类推。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e${10}\u003c/code\u003e：大于 9 的参数要用花括号。\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./foo a\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./foo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ea\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"basename\"\u003eBASENAME\u003c/h2\u003e\n\u003cp\u003e可以去掉脚本的路径，只保留名称。\u003c/p\u003e","tags":[],"title":"输入处理"},{"content":"标准文件描述符 Standard File Descriptors。\n名称 编号 说明 STDIN 0 标准输入 STDOUT 1 标准输出 STDERR 2 标准错误 标准输入 命令 cat 默认从标准输入读取内容，如果直接运行 cat 而不指定文件名，它会等待用户输入。\ncat\r重定向使用 \u0026lt;。\ncat \u0026lt; foo\rwc \u0026lt; foo\r标准输出 默认是终端或屏幕。\necho \u0026#34;hello world\u0026#34;\r重定向使用 \u0026gt; 或 1\u0026gt;。\necho \u0026#34;hello world\u0026#34; \u0026gt; foo\r标准错误 默认是终端或屏幕。\nls 404\r重定向使用 2\u0026gt;。\nls 404 2\u0026gt; foo\r使用 \u0026amp;\u0026gt; 可以同时重定向标准输出和错误输出。\nls 404 \u0026amp;\u0026gt; foo\rEXEC 命令 在命令行中使用 exec ls\rShell 进程会被新命令的进程取代，执行完后不会返回到原来的 Shell 中。\n在脚本中使用 #!/usr/bin/env bash exec /bin/date echo \u0026#34;This will never be executed\u0026#34;\r脚本进程会被 date 命令替代，echo 不会执行。\n文件描述符重定向 #!/usr/bin/env bash echo \u0026#34;这将输出到终端\u0026#34; exec 1\u0026gt; output.txt echo \u0026#34;这将被写入到 output.txt\u0026#34;\r用于修改文件描述符时，不会替换当前进程，只会影响后续命令的输入输出。\n关闭文件描述符 重定向到 \u0026amp;- 即可关闭。关闭之后，不能再写数据。\n#!/usr/bin/env bash exec 3\u0026gt; testfile echo \u0026#34;apple\u0026#34; \u0026gt;\u0026amp;3 exec 3\u0026gt;\u0026amp;-\r/dev/null 空设备，位桶。\ncrw-rw-rw- 1 root root 1, 3 Aug 14 23:16 /dev/null\r把标准输出和标准错误重定向到空设备。\ncommand \u0026gt; /dev/null 2\u0026gt;\u0026amp;1\rMKTEMP 命令 根据文件名模板，创建临时文件。\nfilename.XXXXXX\r命令会把 X 代替为随机字符，模板最少为 6 个 X。\n创建文件 该命令创建的文件只有 Owner 有权限。\nmktemp foo.XXXXXX\r-rw------- 1 kuga kuga 0 Sep 2 17:27 foo.zPtFtG\r创建目录 mktemp -d bar.XXXXXX\rdrwx------ 2 kuga kuga 4096 Sep 2 17:29 bar.RQAMzc\r使用 /tmp 目录 使用 -t 选项会在 /tmp 目录创建文件。\nmktemp -t foo.XXXXXX\r/tmp/foo.0IglAI\rTEE 命令 同时把数据重定向到标准输出和文件。\ntee - read from standard input and write to standard output and files\rdate | tee testfile\rMon Sep 2 05:36:44 PM CST 2024\rcat testfile\rMon Sep 2 05:36:44 PM CST 2024\r屏幕和文件都有同一份数据。\n","date":"2024-08-31","id":48,"permalink":"/zh-cn/linux/script/output/","summary":"\u003ch2 id=\"标准文件描述符\"\u003e标准文件描述符\u003c/h2\u003e\n\u003cp\u003eStandard File Descriptors。\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e名称\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e编号\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e说明\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDIN\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e标准输入\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDOUT\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e标准输出\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSTDERR\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e2\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e标准错误\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"标准输入\"\u003e标准输入\u003c/h3\u003e\n\u003cp\u003e命令 \u003ccode\u003ecat\u003c/code\u003e 默认从标准输入读取内容，如果直接运行 \u003ccode\u003ecat\u003c/code\u003e 而不指定文件名，它会等待用户输入。\u003c/p\u003e","tags":[],"title":"输出处理"},{"content":"Bash Shell 在默认情况下，Bash Shell 会忽略 SIGQUIT(3) 和 SIGTERM(15) 信号， 因此执行下面的命令不会有任何反应（$$ 是当前 Shell 的进程 ID）。\nkill -3 $$\rkill -15 $$\r如果收到 SIGHUP(1) 信号，Bash Shell 会退出，但在退出前， 它会把 SIGHUP 信号传给所有由该 Shell 启动的进程和脚本。\nkill -1 $$\rTRAP 可以使用 trap 命令捕获信号。\ntrap commands signals\r捕获信号 键盘 Ctrl+C 的信号是 SIGINT。\n#!/usr/bin/env bash trap \u0026#34;echo \u0026#39; Trapped Ctrl-C\u0026#39;\u0026#34; SIGINT count=1 while [ $count -le 5 ] do echo \u0026#34;loop #$count\u0026#34; sleep 1 count=$[ $count + 1 ] done\rloop #1 loop #2 ^C Trapped Ctrl-C loop #3 loop #4 ^C Trapped Ctrl-C loop #5\r退出信号 可以捕获脚本退出时候的信号。\ntrap \u0026#34;echo \u0026#39; Trapped Ctrl-C\u0026#39;\u0026#34; EXIT\r移除信号 使用 -- 即可移除信号。\ntrap -- SIGINT\rNOHUP No Hand Up，由该命令启动的进程或脚本会忽略 SIGHUB 信号。 也就是说，即使终端退出，由该终端启动的进程或脚本不会跟着一起退出。\nrun a command immune to hangups, with output to a non-tty\rnohup ./foo\r默认会把 STDOUT 和 STDERR 重定向到 nohup.out。\n-rw------- 1 kuga kuga 40 Sep 2 18:46 nohup.out\r自己重定向会更好一些。\nnohup ./foo \u0026gt; out.log 2\u0026gt;\u0026amp;1\r-rw-rw-r-- 1 kuga kuga 62 Sep 2 18:50 out.log\rNice Value 控制进程优先级的参数。nice 值越高，进程的优先级越低，分配到的 CPU 资源越少。\n范围 nice 值的范围从 -20 到 19：\n-20：最高优先级。 0：默认优先级。 19：最低优先级。 启动进程优先级 nice -n VALUE command\rnice -n 10 ./foo\r修改进程优先级 renice VALUE -p PID\rrenice 5 -p 404\r权限 普通用户只能降低进程的优先级。 root 用户才能提高进程的优先级。 ","date":"2024-09-02","id":49,"permalink":"/zh-cn/linux/script/signal/","summary":"\u003ch2 id=\"bash-shell\"\u003eBash Shell\u003c/h2\u003e\n\u003cp\u003e在默认情况下，Bash Shell 会忽略 \u003ccode\u003eSIGQUIT(3)\u003c/code\u003e 和 \u003ccode\u003eSIGTERM(15)\u003c/code\u003e 信号，\n因此执行下面的命令不会有任何反应（\u003ccode\u003e$$\u003c/code\u003e 是当前 Shell 的进程 ID）。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ekill\u003c/span\u003e -3 \u003cspan class=\"nv\"\u003e$$\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ekill\u003c/span\u003e -15 \u003cspan class=\"nv\"\u003e$$\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e如果收到 \u003ccode\u003eSIGHUP(1)\u003c/code\u003e 信号，Bash Shell 会退出，但在退出前，\n它会把 \u003ccode\u003eSIGHUP\u003c/code\u003e 信号传给所有由该 Shell 启动的进程和脚本。\u003c/p\u003e","tags":[],"title":"信号处理"},{"content":"创建函数 function name { commands }\r或者\nname() { commands }\r函数返回值 返回值有多种形式。\n使用 $? 表示函数最后一条命令的退出状态码。\necho $?\r使用 return #!/usr/bin/env bash function double { echo \u0026#34;Double value\u0026#34; read -p \u0026#34;Enter a value:\u0026#34; value return $[ $value * 2 ] } double echo \u0026#34;Result: $?\u0026#34;\r本质是退出状态码，范围 [0, 255]，超出会对 256 取模。\n使用标准输出 #!/usr/bin/env bash function double { read -p \u0026#34;Enter a value:\u0026#34; value echo $[ $value * 2 ] } result=$(double) echo \u0026#34;Result: $result\u0026#34;\rresult 会保存函数中所有的标准输出。\n函数传参 #!/usr/bin/env bash function add { if [ $# -lt 2 ]; then echo \u0026#34;invalid params\u0026#34; else echo $[ $1 + $2 ] fi } result=$(add 1 2) echo \u0026#34;Result: $result\u0026#34;\r函数里面的 $#、$1 和外层的参数相互独立。\n变量的作用域 函数外定义 哪里都能访问。\n#!/usr/bin/env bash soda=green function foo { echo $soda soda=yellow } foo echo $soda\rgreen yellow\r函数内定义 #!/usr/bin/env bash function foo { soda=green } # 函数没执行前无法访问 echo $soda foo echo $soda soda=yellow echo $soda\rgreen yellow\r使用 local local 变量只在函数内部生效，和外部重名变量相互独立。\n#!/usr/bin/env bash soda=green function foo { echo $soda local soda=yellow echo $soda } foo echo $soda\rgreen yellow green\r变量是否被定义 可以使用参数展开的 + 标记。\n函数是否被定义 后面定义的同名函数会覆盖前面定义同名函数的，所以在定义函数之前，可以先判断一下。\ndeclare -f FUNC_NAME\r例如把函数写在 .bashrc 文件。\nfunction sayhello() { echo \u0026#34;hello\u0026#34; }\rdeclare -f sayhello\recho $?\r函数已定义，退出码为 0，未定义，退出码为 1。\nif declare -f sayhello \u0026gt; /dev/null; then echo \u0026#34;sayhello is defined\u0026#34; else echo \u0026#34;sayhello not defined\u0026#34; fi\r","date":"2024-09-02","id":50,"permalink":"/zh-cn/linux/script/func/","summary":"\u003ch2 id=\"创建函数\"\u003e创建函数\u003c/h2\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e name \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    commands\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e或者\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ename\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    commands\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"函数返回值\"\u003e函数返回值\u003c/h2\u003e\n\u003cp\u003e返回值有多种形式。\u003c/p\u003e\n\u003ch3 id=\"使用-\"\u003e使用 $?\u003c/h3\u003e\n\u003cp\u003e表示函数最后一条命令的退出状态码。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$?\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"使用-return\"\u003e使用 return\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e double \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Double value\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eread\u003c/span\u003e -p \u003cspan class=\"s2\"\u003e\u0026#34;Enter a value:\u0026#34;\u003c/span\u003e value\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e $\u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$value\u003c/span\u003e * \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edouble\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Result: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$?\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003e本质是退出状态码，范围 [0, 255]，超出会对 256 取模。\u003c/strong\u003e\u003c/p\u003e","tags":[],"title":"函数"},{"content":"Parameter Expansion 在 Bash 中，参数展开是一种用于操作和处理变量内容的机制。 通过参数展开，可以获取变量的值，修改变量的值，或者为未设置的变量提供默认值。\nShell Parameter Expansion\rShell 参数展开\n变量展开 最常见的方式。\nvar=\u0026#34;Bash\u0026#34; echo \u0026#34;Hello, ${var}!\u0026#34;\r默认值展开 标记 + ${var+DEFAULT}\rvar 未定义：返回空串。 var 已定义： 是空值：返回 DEFAULT。 非空值：返回 DEFAULT。 unset var echo ${var+foo}\rvar= echo ${var+foo}\rfoo\r可以用这个标记来判断变量是否未定义。\n#!/usr/bin/env bash if [ -n \u0026#34;${var+defined}\u0026#34; ]; then echo \u0026#34;var already defined\u0026#34; else echo \u0026#34;var not defined\u0026#34; fi\r注意\n如果 ${var+defined} 没有使用双引号，当返回空字符串的时候，条件就会变成 [ -n ] ， 这是一个有效的条件，不会产生任何错误，且它的返回值为真。显然这是不合理的，因此必须添加双引号。\n标记 - ${var-DEFAULT}\rvar 未定义：返回 DEFAULT。 var 已定义： 是空值：返回 var。 非空值：返回 var。 unset var echo ${var-foo}\rfoo\rvar= echo ${var-foo}\rvar 和 DEFAULT 的值有可能相同，因此不能用来判断 var 是否被定义。\n标记 :+ ${var:+DEFAULT}\rvar 未定义：返回空串。 var 已定义： 是空值：返回空串。 非空值：返回 DEFAULT。 var=abc echo ${var:+foo}\rfoo\r标记 :- ${var:-DEFAULT}\rvar 未定义：返回 DEFAULT。 var 已定义 是空值：返回 DEFAULT。 非空值：返回 var。 unset var echo ${var:-foo}\rvar= echo ${var:-foo}\r上面的两个例子都会输出 foo。\n标记 := var 未定义：var=foo，返回 var。 var 已定义 是空值：var=foo，返回 var。 非空值：返回 var。 unset var echo ${var:=foo} echo $var\rfoo foo\r字符串操作 提取子串 var=\u0026#34;heybro!\u0026#34; echo ${var:3:4}\rbro!\r字符串长度 var=\u0026#34;heybro!\u0026#34; echo ${#var}\r7\r删除前缀 删除最短匹配：用 #，模式 */。\nvar=\u0026#34;a/b/c\u0026#34; echo ${var#*/}\rb/c\r删除最长匹配：用 ##，模式 */。\nvar=\u0026#34;a/b/c\u0026#34; echo ${var##*/}\rc\r删除后缀 删除最短匹配：用 %，模式 /*。\nvar=\u0026#34;a/b/c\u0026#34; echo ${var%/*}\ra/b\r删除最长匹配：用 %%，模式 /*。\nvar=\u0026#34;a/b/c\u0026#34; echo ${var%%/*}\ra\r替换第一个子串 var=\u0026#34;aa bb aa\u0026#34; echo ${var/aa/cc}\rcc bb aa\r替换所有子串 var=\u0026#34;aa bb aa\u0026#34; echo ${var//aa/cc}\rcc bb cc\r","date":"2024-09-02","id":51,"permalink":"/zh-cn/linux/script/param-exp/","summary":"\u003ch2 id=\"parameter-expansion\"\u003eParameter Expansion\u003c/h2\u003e\n\u003cp\u003e在 Bash 中，参数展开是一种用于操作和处理变量内容的机制。\n通过参数展开，可以获取变量的值，修改变量的值，或者为未设置的变量提供默认值。\u003c/p\u003e\n\r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion\" target=\"_blank\" class=\"stretched-link text-reset text-decoration-none\"\u003eShell Parameter Expansion\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eShell 参数展开\u003c/p\u003e","tags":[],"title":"参数展开"},{"content":"参数：$? 上一个命令或脚本的退出码，0 成功，非 0 失败。\nls 404\recho $?\r会输出 2，表示失败。脚本中可用 exit 指定返回码。\n参数：$# 表示传递给脚本或函数的参数个数。\n#!/usr/bin/env bash echo $#\r./foo p1 p2\r2\r参数：$* 传递给脚本的所有参数，默认以空格分隔。\n#!/usr/bin/env bash echo $*\r./foo p1 p2p3\rp1 p2p3\r分隔符可以通过 IFS 变量修改。\n参数：$@ 传递给脚本的所有参数，默认以空格分隔。\n#!/usr/bin/env bash echo $@\r./foo p1 p2p3\rp1 p2p3\r分隔符可以通过 IFS 变量修改。\n区别：$* 与 $@ 主要区别在处理带有空格的参数。\n$*：代表的是所有参数的字符串，是一个整体。 $@： 不带双引号：与 $* 是一样的。 带上双引号：\u0026quot;$@\u0026quot;，表示参数数组，每个参数是独立的。 # 假设传递的参数是 \u0026#34;arg1\u0026#34; \u0026#34;arg2 with space\u0026#34; \u0026#34;arg3\u0026#34; for arg in \u0026#34;$@\u0026#34;; do echo \u0026#34;Argument: $arg\u0026#34; done\r# 将所有参数传递给另一个脚本 another_script \u0026#34;$@\u0026#34;\r参数：$$ 当前脚本的进程 ID。\necho $$\r参数：$! 最近在进程后台运行的进程 ID。\necho $!\r参数：$0 当前脚本名称。\necho $0\r-bash\r参数：$n 第 n 个参数。\n#!/usr/bin/env bash echo $1\r./foo a b c\ra\r参数：$- 脚本的选项。\necho $-\rhimBHs\r上面是当前 Shell 的启动选项。\n","date":"2024-08-30","id":52,"permalink":"/zh-cn/linux/script/special-params/","summary":"\u003ch2 id=\"参数\"\u003e参数：$?\u003c/h2\u003e\n\u003cp\u003e上一个命令或脚本的退出码，0 成功，非 0 失败。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els \u003cspan class=\"m\"\u003e404\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$?\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e会输出 2，表示失败。脚本中可用 \u003ccode\u003eexit\u003c/code\u003e 指定返回码。\u003c/p\u003e\n\u003ch2 id=\"参数-1\"\u003e参数：$#\u003c/h2\u003e\n\u003cp\u003e表示传递给脚本或函数的参数个数。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$#\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./foo p1 p2\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"参数-2\"\u003e参数：$*\u003c/h2\u003e\n\u003cp\u003e传递给脚本的所有参数，默认以空格分隔。\u003c/p\u003e","tags":[],"title":"特殊参数"},{"content":"ECHO 命令 使用 -e 选项可以创建简单的多行文本。\necho -e \u0026#39;aa\\nbb\u0026#39;\raa bb\rHere Document Here Document（缩写为 Heredoc）是 Shell 中的一种输入重定向方式， 允许在脚本或命令中嵌入多行文本并传递给命令或文件。\n基本语法 command \u0026lt;\u0026lt;EOF 多行文本内容 EOF\rcommand：如 cat、sed、gawk。 \u0026lt;\u0026lt;EOF：标记文档的开始并定义结束标记。 EOF：标记文档结束位置。 这里的 EOF 只是一个例子，可用任意标记。\n创建多行文本文件 多行文本可重定向到 foo.txt 文件。\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo.txt apple banana EOF\rcat foo.txt\rapple banana\r作为命令的输入 grep \u0026#39;app\u0026#39; \u0026lt;\u0026lt;EOF apple banana EOF\r引号的区别 如果 EOF 标记使用引号，功能会有所不同。\n引号类型 变量/特殊字符 EOF 解释 'EOF' 不解释 \u0026quot;EOF\u0026quot; 不解释 如果内容只是纯文档，尽量使用引号，减少特殊字符的影响。\n使用引号 单/双引号是一样的，都不会解释 $ 符号。\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; $HOME EOF\r$HOME\r不使用引号 和不使用引号是一样的，会解释 $ 符号。\ncat \u0026lt;\u0026lt;EOF $HOME EOF\r/home/kuga\r","date":"2024-09-04","id":53,"permalink":"/zh-cn/linux/text/multi-lines/","summary":"\u003ch2 id=\"echo-命令\"\u003eECHO 命令\u003c/h2\u003e\n\u003cp\u003e使用 \u003ccode\u003e-e\u003c/code\u003e 选项可以创建简单的多行文本。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e -e \u003cspan class=\"s1\"\u003e\u0026#39;aa\\nbb\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eaa\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebb\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"here-document\"\u003eHere Document\u003c/h2\u003e\n\u003cp\u003eHere Document（缩写为 Heredoc）是 Shell 中的一种输入重定向方式，\n允许在脚本或命令中嵌入多行文本并传递给命令或文件。\u003c/p\u003e\n\u003ch3 id=\"基本语法\"\u003e基本语法\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e多行文本内容\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecommand\u003c/code\u003e：如 \u003ccode\u003ecat\u003c/code\u003e、\u003ccode\u003esed\u003c/code\u003e、\u003ccode\u003egawk\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;\u0026lt;EOF\u003c/code\u003e：标记文档的开始并定义结束标记。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEOF\u003c/code\u003e：标记文档结束位置。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这里的 \u003ccode\u003eEOF\u003c/code\u003e 只是一个例子，可用任意标记。\u003c/p\u003e","tags":[],"title":"创建多行文本"},{"content":"简介 正则表达式（Regular Expressions, regex）根据不同的标准可分为以下几类。\n类型 缩写 全称 基本正则表达式 BRE BRE，Basic Regular Expressions 扩展正则表达式 ERE ERE，Extended Regular Expressions Perl 正则表达式 PCRE Perl-Compatible Regular Expressions POSIX 正则表达式 BRE \u0026amp; ERE BRE \u0026amp; ERE BRE 和 ERE 是 POSIX 标准中的两种正则表达式， BRE 较为基础，需要对某些元字符转义，ERE 是 BRE 的扩展，提供了更多的元字符和功能。 PCRE 是一种功能更强大、语法更灵活的正则表达式类型， 广泛用于现代编程语言如：Python、Ruby、Javascript。\nSED 命令 支持 BRE 和 ERE，默认使用 BRE。\nBRE 模式 这种模式需要对元字符进行转义，例如：\n)：需要使用 \\) 转义。 |：需要使用 \\| 转义。 echo \u0026#39;abc\u0026#39; | sed \u0026#39;s/\\(b\\|c\\)/p/g\u0026#39;\rapp\rERE 模式 使用 -E 或 -r 选项启用 ERE，不需要转义元字符。\necho \u0026#39;abc\u0026#39; | sed -E \u0026#39;s/(b|c)/p/g\u0026#39;\rapp\rGAWK 默认使用 ERE 模式。\necho \u0026#39;abc\u0026#39; | gawk \u0026#39;{gsub(/(b|c)/, \u0026#34;p\u0026#34;); print }\u0026#39;\rapp\r特殊字符 有特殊含意的字符，需要转义。\n.*[]^${}\\+?|()\r虽然 / 不是正则表达式特殊字符，但在 sed 和 gawk 中也要转义。\n行首 ^ 匹配行的首部位置。\necho \u0026#39;aa bb\u0026#39; | sed -n \u0026#39;/^aa/p\u0026#39;\r如果 ^ 不是出现在开头，则和普通字符一样，无须转义。\necho \u0026#39;aa b^b\u0026#39; | sed -n \u0026#39;/b^/p\u0026#39;\r行尾 $ 匹配行的尾部位置。\necho \u0026#39;aa bb\u0026#39; | sed -n \u0026#39;/bb$/p\u0026#39;\r如果 $ 不是出现在结尾，则和普通字符一样，无须转义。\necho \u0026#39;aa b$b\u0026#39; | sed -n \u0026#39;/b$b/p\u0026#39;\r点字符 . 匹配除换行符外的任意单个字符。\necho \u0026#39;abc\u0026#39; | sed -n \u0026#39;/a.c/p\u0026#39;\r字符组 [] Character Class，可匹配组内任一字符。\necho \u0026#39;cat\u0026#39; | sed -n \u0026#39;/[ch]at/p\u0026#39;\recho \u0026#39;yes\u0026#39; | sed -n \u0026#39;/[Yy][Ee][Ss]/p\u0026#39;\r排除组内字符。\necho \u0026#39;bat\u0026#39; | sed -n \u0026#39;/[^ch]at/p\u0026#39;\r匹配 c - e 之间的字符。\necho \u0026#39;cat\u0026#39; | sed -n \u0026#39;/[c-e]at/p\u0026#39;\r匹配 c - e 或 0 - 9 之间的字符。\necho \u0026#39;cat\u0026#39; | sed -n \u0026#39;/[c-e0-9]at/p\u0026#39;\r星号 * 匹配 * 号前面的字符 0 次或多次。\necho \u0026#39;24\u0026#39; | sed -n \u0026#39;/23*4/p\u0026#39;\recho \u0026#39;234\u0026#39; | sed -n \u0026#39;/23*4/p\u0026#39;\recho \u0026#39;2334\u0026#39; | sed -n \u0026#39;/23*4/p\u0026#39;\recho \u0026#39;bat\u0026#39; | sed -n \u0026#39;/b[ae]*/p\u0026#39;\recho \u0026#39;baaeeaet\u0026#39; | sed -n \u0026#39;/b[ae]*/p\u0026#39;\r以上例子都是可以成功匹配的。\n问号 ? 匹配 ? 号前面的字符 0 次或 1 次。\necho \u0026#39;at\u0026#39; | sed -En \u0026#39;/c?at/p\u0026#39;\recho \u0026#39;ccbbat\u0026#39; | sed -En \u0026#39;/c?at/p\u0026#39;\r上面的例子都是可以匹配的，可以用 ^ 限制。\necho \u0026#39;ccbbat\u0026#39; | sed -En \u0026#39;/^c?at/p\u0026#39;\r上面只能匹配 at 或 cat。\n加号 + 匹配 + 号前面的字符 1 次或多次。\necho \u0026#39;at\u0026#39; | sed -En \u0026#39;/c+at/p\u0026#39;\r区间 指定 {} 前面字符的匹配次数。\necho \u0026#39;cat\u0026#39; | sed -En \u0026#39;/^c{1}at/p\u0026#39;\recho \u0026#39;ccat\u0026#39; | sed -En \u0026#39;/^c{1,2}at/p\u0026#39;\r竖线 | 表示或逻辑。\necho \u0026#39;cat\u0026#39; | sed -En \u0026#39;/cat|hat/p\u0026#39;\r分组 () 分组可视为一个整体。\necho \u0026#39;cat\u0026#39; | sed -En \u0026#39;/(c|h)at/p\u0026#39;\recho \u0026#39;Sun\u0026#39; | sed -En \u0026#39;/(S|s)un(day)?/p\u0026#39;\r","date":"2024-09-04","id":54,"permalink":"/zh-cn/linux/text/regex/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e正则表达式（Regular Expressions, regex）根据不同的标准可分为以下几类。\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e类型\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e缩写\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e全称\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e基本正则表达式\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE，Basic Regular Expressions\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e扩展正则表达式\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eERE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eERE，Extended Regular Expressions\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerl 正则表达式\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePCRE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerl-Compatible Regular Expressions\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePOSIX 正则表达式\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE \u0026amp; ERE\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBRE \u0026amp; ERE\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eBRE 和 ERE 是 POSIX 标准中的两种正则表达式，\nBRE 较为基础，需要对某些元字符转义，ERE 是 BRE 的扩展，提供了更多的元字符和功能。\nPCRE 是一种功能更强大、语法更灵活的正则表达式类型，\n广泛用于现代编程语言如：Python、Ruby、Javascript。\u003c/p\u003e","tags":[],"title":"正则表达式"},{"content":"Stream Editor 流式文本处理器，作者是 Lee E. McMahon。\n基本语法 sed [OPTIONS] \u0026#39;command\u0026#39; file\rOPTIONS：命令选项。 command：打印、替换、删除等。 file：处理的文件，如果省略，读取 STDIN。 省略 file 为交互模式，输入一行执行一次。\n运行过程 读入一行数据： 有匹配规则： 匹配成功：执行相关操作。 匹配失败：原样打印数据。 无匹配规则：执行相关操作。 命令引号 单引号：可减少转义字符的影响，优先使用。 双引号：可使用变量参数，需处理特殊字符。 常用例子 替换第一处 把第一处出现的 a 替换成 b。\necho \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/\u0026#39;\rbba\r替换第 N 处 把第 N 处出现的 a 替换成 b。\necho \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/2\u0026#39;\rabb\r替换所有出处 echo \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/g\u0026#39;\rbbb\r执行多条命令 可以用 ; 分隔，也可以使用 -e 选项。\necho \u0026#39;aba\u0026#39; | sed \u0026#39;s/a/b/; s/a/c/\u0026#39;\recho \u0026#39;aba\u0026#39; | sed -e \u0026#39;s/a/b/\u0026#39; -e \u0026#39;s/a/c/\u0026#39;\rbbc\r使用命令文件 cmd.sed 文件内容如下。\ns/a/b/ s/a/c/\recho \u0026#39;aba\u0026#39; | sed -f cmd.sed\rbbc\r只打印替换行 -n 表示抑制输出，p 表示只输出匹配行。\necho \u0026#39; aa bb cc dd \u0026#39; | sed -n \u0026#39;s/aa/bb/p\u0026#39;\rbb bb\r替换结果写文件 echo \u0026#39; aa bb cc dd \u0026#39; | sed \u0026#39;s/aa/bb/w out.txt\u0026#39;\rcat out.txt\rbb bb\r修改命令分隔符 可以使用别的符号替换命令分隔符 /。\necho \u0026#39;/bin/sh\u0026#39; | sed \u0026#39;s#/sh#/bash#\u0026#39;\r/bin/bash\r指定行匹配 匹配第 2 行。\nsed \u0026#39;2s/aa/bb/\u0026#39;\r匹配 2-4 行。\nsed \u0026#39;2,4s/aa/bb/\u0026#39;\r匹配 2 到最后一行。\nsed \u0026#39;2,$s/aa/bb/\u0026#39;\r指定行命令组 sed \u0026#39;2{s/cc/aa/; s/dd/bb/}\u0026#39;\rsed \u0026#39;2,4{ s/cc/aa/ s/dd/bb/ }\u0026#39;\r删除所有行 sed \u0026#39;d\u0026#39;\r删除指定行 sed \u0026#39;1d\u0026#39;\rsed \u0026#39;2,4d\u0026#39;\rsed \u0026#39;2,$d\u0026#39;\r删除匹配行 sed \u0026#39;/aa bb/d\u0026#39;\r前插一行 echo \u0026#34;hello\u0026#34; | sed \u0026#39;i\\New Line\u0026#39;\r后插一行 echo \u0026#34;hello\u0026#34; | sed \u0026#39;a\\New Line\u0026#39;\r指定行插入 sed \u0026#39;3i\\New Line\u0026#39;\r匹配行插入 sed \u0026#39;/cc/i\\New Line\u0026#39;\r插入多行 必须使用 \\。\nsed \u0026#39;2i\\ New Line 1\\ New Line 2 \u0026#39;\r修改行 sed \u0026#39;2c\\ Change Line 1\\ Change Line 2 \u0026#39;\rsed \u0026#39;/aa/c\\ Change Line 1 \u0026#39;\r单字符替换 echo \u0026#39;aabbcc\u0026#39; | sed \u0026#39;y/ac/ca/\u0026#39;\rccbbaa\r打印特定行 sed -n \u0026#39;2,5p\u0026#39;\r打印替换前后 sed -n \u0026#39;/aa/{p; s/aa/cc/p}\u0026#39;\r打印行号 sed -n \u0026#39;/bb/{=; p}\u0026#39;\r从文件读取 创建 foo 和 bar 文件。\necho -e \u0026#39;aa\\nbb\u0026#39; \u0026gt; foo echo -e \u0026#39;11\\n22\u0026#39; \u0026gt; bar\r读取 foo 文件，并插入到 bar 的第一行以后。\nsed \u0026#39;1r foo\u0026#39; bar\r11 aa bb 22\r匹配字符串再插入。\nsed \u0026#39;/22/r foo\u0026#39; bar\r11 22 aa bb\r匹配字符串插入，使用 d 删除匹配行。\nsed \u0026#39;/22/{ r foo d }\u0026#39; bar\r11 aa bb\r下面会报语法错误。\n# 会报错 sed \u0026#39;/22/{r foo; d}\u0026#39; bar\r硬是要一行也不是不行。\nsed \u0026#39;/22/r foo\u0026#39; bar | sed \u0026#39;/22/d\u0026#39;\r","date":"2024-09-04","id":55,"permalink":"/zh-cn/linux/text/sed/","summary":"\u003ch2 id=\"stream-editor\"\u003eStream Editor\u003c/h2\u003e\n\u003cp\u003e流式文本处理器，作者是 \u003cstrong\u003eLee E. McMahon\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"基本语法\"\u003e基本语法\u003c/h3\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esed \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTIONS\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;command\u0026#39;\u003c/span\u003e file\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOPTIONS\u003c/code\u003e：命令选项。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecommand\u003c/code\u003e：打印、替换、删除等。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efile\u003c/code\u003e：处理的文件，如果省略，读取 STDIN。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e省略 \u003ccode\u003efile\u003c/code\u003e 为交互模式，输入一行执行一次。\u003c/p\u003e\n\u003ch3 id=\"运行过程\"\u003e运行过程\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e读入一行数据：\n\u003cul\u003e\n\u003cli\u003e有匹配规则：\n\u003cul\u003e\n\u003cli\u003e匹配成功：执行相关操作。\u003c/li\u003e\n\u003cli\u003e匹配失败：原样打印数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e无匹配规则：执行相关操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"命令引号\"\u003e命令引号\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e单引号：可减少转义字符的影响，\u003cstrong\u003e优先使用\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e双引号：可使用变量参数，需处理特殊字符。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"常用例子\"\u003e常用例子\u003c/h2\u003e\n\u003ch3 id=\"替换第一处\"\u003e替换第一处\u003c/h3\u003e\n\u003cp\u003e把第一处出现的 a 替换成 b。\u003c/p\u003e","tags":[],"title":"SED 命令"},{"content":"GNU AWK gawk 是 GNU 版本的文本处理工具。 在大多数 GNU/Linux 发行版中，gawk 是默认的 awk 实现，因此在日常使用中通常没有区别。\nreadlink -f /usr/bin/awk\r/usr/bin/gawk\rgawk 命令默认使用 ERE 模式。\n基本语法 gawk [OPTIONS] program file\rOPTIONS：命令选项。 program：这尼玛命令里面还有个程序。 file：处理的文件，如果省略，读取 STDIN。 省略 file 为交互模式，输入一行执行一次。\n运行过程 读入一行数据： 有匹配规则： 匹配成功：执行相关操作。 匹配失败：不执行操作。 无匹配规则：执行相关操作。 基础用法 创建 foo 文件。\necho -e \u0026#39;aa 11\\nbb 22\u0026#39; \u0026gt; foo\r对于每行数据，gawk 默认使用空格/制表符分隔字段。\n$N：表示第 N 个字段。 $0：表示整行数据。 gawk \u0026#39;{print $1}\u0026#39; foo\raa bb\rBEGIN/END 结构 BEGIN：初始化，在解释前执行。 BODY：对每个记录执行一次。 END：结束处理。 注意使用引号 'EOF' 创建文件，这样不会处理特殊字符 $。\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; foo.gawk BEGIN { FS=\u0026#34;:\u0026#34; print \u0026#34;User\\tShell\u0026#34; print \u0026#34;-------\\t-------\u0026#34; } { print $1 \u0026#34;\\t\u0026#34; $6 } END { print \u0026#34;-------\\t-------\u0026#34; } EOF\rhead -n 3 /etc/passwd | gawk -f foo.gawk\rUser Shell ------- ------- root /root daemon /usr/sbin bin /bin ------- -------\r常用选项 指定分隔符 -F 选项可以修改行的分隔符。\ngawk -F: \u0026#39;{print $1}\u0026#39; /etc/passwd | head -n 1\r指定文件 -f 选项可以指定文件。\necho \u0026#39;{print $1 \u0026#34;-dir:\u0026#34; $6}\u0026#39; \u0026gt; foo.gawk\rgawk -F: -f foo.gawk /etc/passwd | head -n 1\rroot-dir:/root\r变量参数赋值 -v 选项可以在 BEGIN 之前给变量赋值。\ngawk -v n=2 \u0026#39;BEGIN{print 2*n}\u0026#39;\r4\r如果不需要在 BEGIN 中使用，可以不用 -v 参数。\necho \u0026#39;a b c\u0026#39; | gawk \u0026#39;{print $n}\u0026#39; n=2\rb\r内置变量 变量 $N $N 还可以赋值，字符串的双引号不能省略。\necho \u0026#39;hey man\u0026#39; | gawk \u0026#39;{$2=\u0026#34;bro\u0026#34;; print $0}\u0026#39;\rhey bro\r变量 FS Field Separator，字段分隔符。\ngawk \u0026#39;BEGIN{FS=\u0026#34;:\u0026#34;} {print $1}\u0026#39; /etc/passwd | head -n 1\r变量 NF Number of Fields，表示记录中的字段的数量。\ngawk -F: \u0026#39;$1==\u0026#34;root\u0026#34;{print $1\u0026#34;:\u0026#34;$NF}\u0026#39; /etc/passwd\rroot:/bin/bash\r变量 NR Number of Records，表示当前处理的记录编号，默认值为 1，处理一行后会加 1。 可用于跳过文本的第一行，第一行的 NR 值为 1。\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo name score foo 90 bar 80 EOF\rgawk \u0026#39;{if (NR\u0026gt;1) {if ($2\u0026gt;85) {print $1,$2}}}\u0026#39; foo\rfoo 90\r变量 RS Record Separator，输入记录分隔符，默认值为 \\n，表示以换行符分隔每条记录。 将 RS 设置为 \u0026quot;\u0026quot; 表示以空行作为记录分隔符，对于下面的文本，会分为上下 2 个记录。\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo apple sweet red banana sweet yellow EOF\r设置 FS=\u0026quot;\\n\u0026quot;，则可通过 $N 获取每行记录。RS 和 FS 通常结合使用。\ngawk \u0026#39;BEGIN{RS=\u0026#34;\u0026#34;; FS=\u0026#34;\\n\u0026#34;} {print $1\u0026#34;\\t\u0026#34;$3}\u0026#39; foo\rapple red banana yellow\r变量 OFS Output Field Separator，输出字段分隔符。\necho \u0026#39;aa,bb\u0026#39; | gawk \u0026#39;BEGIN{FS=\u0026#34;,\u0026#34;; OFS=\u0026#34;-\u0026#34;} {print $1,$2}\u0026#39;\raa-bb\r变量 FIELDWIDTHS 指定字符宽度进行分隔。\necho \u0026#39;abbc\u0026#39; | gawk \u0026#39;BEGIN{FIELDWIDTHS=\u0026#34;1 2 1\u0026#34;} {print $1,$2,$3}\u0026#39;\ra bb c\r条件与结构 条件表达式 ==、\u0026lt;，\u0026lt;=，\u0026gt;，\u0026gt;=。\ngawk -F: \u0026#39;$7==\u0026#34;/bin/bash\u0026#34;{print $1}\u0026#39; /etc/passwd\r输出所有以 bash 启动的用户。\n条件语句 if 里面单条语句可不加 {}。\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{if ($1\u0026gt;15) print $1}\u0026#39;\rif 里面多条语句要加 {}。\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{if ($1\u0026gt;15) {x=2*$i; print x}}\u0026#39;\r单行的 else 语句，前面的语句要加 ; 号。\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{if ($1\u0026gt;15) print $1; else print \u0026#34;no\u0026#34;}\u0026#39;\r多行不需要加分号。\necho -e \u0026#39;10\\n20\u0026#39; | gawk \u0026#39;{ if ($i\u0026gt;15) { x=2*$i print x } else { print \u0026#34;no\u0026#34; } }\u0026#39;\rFOR 语句 对每一行的字段求和，+= 和 ++ 都支持。\necho \u0026#39;1 2 3\u0026#39; | gawk \u0026#39;{ total=0 for (i=1; i\u0026lt;=NF; i++) { total += $i } print total }\u0026#39;\rWHILE 语句 对每一行的字段求和。\necho \u0026#39;1 2 3\u0026#39; | gawk \u0026#39;{ i=1 total=0 while (i\u0026lt;=NF) { total += $i i++ } print total }\u0026#39;\rDO-WHILE 语句 对每一行的字段求和\necho \u0026#39;1 2 3\u0026#39; | gawk \u0026#39;{ i=1 total=0 do { total += $i i++ } while(i\u0026lt;=NF) print total }\u0026#39;\r函数相关 内建函数 int(x)：取 x 的整数部分。 exp(x)：x 的指数。 sqrt(x)：x 的平方根。 rand()：比 0 大且小于 1 的随机数。 length(x)：x 的字符串长度。 tolower(x)：x 转小写。 toupper(x)：x 转大写。 还有很多，如 gensub，gsub。\n自定义函数 自定义函数必须出现在 BEGIN 块之前。\ngawk \u0026#39; function random(ts, num) { srand(ts) return int(num * rand()) } BEGIN { ts=systime() print ts print random(ts, 10) }\u0026#39;\r可以使用函数库文件，再引用。\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; funclib.gawk function random(ts, num) { srand(ts) return int(num * rand()) } EOF\rgawk 程序文件如下。\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; test.gawk BEGIN { ts=systime() print ts print random(ts, 10) } EOF\r使用 -f 选项引用两个文件。\ngawk -f funclib.gawk -f test.gawk\r引用函数库就不能使用内联程序模式，都需要引用。\n其它例子 自定义变量 支持数学运算和浮点数，这不比 bash 强 🤪。\ngawk \u0026#39;BEGIN{a=2; a=a*2/3; print a}\u0026#39;\r1.33333\r数组操作 特点：关联数组，类似字典，无序。\ngawk \u0026#39;BEGIN{arr[\u0026#34;name\u0026#34;]=\u0026#34;foo\u0026#34;; print arr[\u0026#34;name\u0026#34;]}\u0026#39;\r可以使用数字下标，其实也是字典。\ngawk \u0026#39;BEGIN{arr[3]=\u0026#34;foo\u0026#34;; print arr[3]}\u0026#39;\r遍历数组，删除元素。\ngawk \u0026#39;BEGIN{ arr[\u0026#34;a\u0026#34;]=1 arr[2]=2 arr[\u0026#34;c\u0026#34;]=\u0026#34;cat\u0026#34; delete arr[2] for (k in arr) { print \u0026#34;key:\u0026#34;,k,\u0026#34; val:\u0026#34;, arr[k] } } \u0026#39;\rkey: a val: 1 key: c val: cat\r格式化打印 处理浮点数。\ngawk \u0026#39;BEGIN{printf \u0026#34;%.2f\\n\u0026#34;, 2/3}\u0026#39;\r0.67\r指定宽度。\necho -e \u0026#39;foo\\nfoobar\u0026#39; | gawk \u0026#39;{printf \u0026#34;%8s\\n\u0026#34;, $1}\u0026#39;\r左对齐。\necho -e \u0026#39;foo\\nfoobar\u0026#39; | gawk \u0026#39;{printf \u0026#34;%-8s\\n\u0026#34;, $1}\u0026#39;\r","date":"2024-09-05","id":56,"permalink":"/zh-cn/linux/text/gawk-1/","summary":"\u003ch2 id=\"gnu-awk\"\u003eGNU AWK\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egawk\u003c/code\u003e 是 GNU 版本的文本处理工具。\n在大多数 GNU/Linux 发行版中，\u003ccode\u003egawk\u003c/code\u003e 是默认的 \u003ccode\u003eawk\u003c/code\u003e 实现，因此在日常使用中通常没有区别。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ereadlink -f /usr/bin/awk\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/usr/bin/gawk\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003ccode\u003egawk\u003c/code\u003e 命令默认使用 ERE 模式。\u003c/p\u003e","tags":[],"title":"GAWK 命令 - 1"},{"content":"正则匹配 gawk 默认使用 ERE 模式。\n基础用法 首先创建 foo 文本文件。\ncat \u0026lt;\u0026lt;EOF \u0026gt; foo a1,a2,a3 b1,b2,b3 EOF\rgawk -F, \u0026#39;/1,a/{ print $1 }\u0026#39; foo\ra1\r这里是用整行去匹配的，等价于 $0。\n指定字段匹配 $2 ~ 指定了使用第 2 个字段匹配。\ngawk \u0026#39;BEGIN{ FS=\u0026#34;,\u0026#34; } $2 ~ /^[ab]2/{ print $2 }\u0026#39; foo\ra2 b2\rsub Substitution，替换第一个匹配的字符串。\n基本语法 sub(regex, replacement [, target])\rregex：匹配的正则表达式。 replacement：替换匹配的字符串。 target：可选，目标字符串，默认 $0。 不提供 target，默认是整行匹配。\n基础用法 echo \u0026#34;aa bb aa\u0026#34; | gawk \u0026#39;{ sub(/aa/, \u0026#34;cc\u0026#34;); print }\u0026#39;\rcc bb aa\r指定替换第 3 列。\necho \u0026#34;aa bb aa\u0026#34; | gawk \u0026#39;{ sub(/aa/, \u0026#34;cc\u0026#34;, $3); print }\u0026#39;\raa bb cc\r特殊符号 \u0026amp; echo \u0026#34;app cat\u0026#34; | gawk \u0026#39;{ sub(/\\w+/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\r[app] cat\rgsub Global Substitution，全局替换。\n基本语法 gsub(regex, replacement [, target])\rregex：匹配的正则表达式。 replacement：替换匹配的字符串。 target：可选，目标字符串，默认 $0。 不提供 target，默认是整行匹配。\n基础用法 echo \u0026#39;aa bb aa\u0026#39; | gawk \u0026#39;{ gsub(\u0026#34;aa\u0026#34;, \u0026#34;cc\u0026#34;); print }\u0026#39;\rcc bb cc\r指定替换第 3 列。\necho \u0026#39;aa bb aa\u0026#39; | gawk \u0026#39;{ gsub(\u0026#34;aa\u0026#34;, \u0026#34;cc\u0026#34;, $3); print }\u0026#39;\raa bb cc\r特殊符号 \u0026amp; echo \u0026#34;app cat\u0026#34; | gawk \u0026#39;{ gsub(/\\w+/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\r[app] [cat]\r匹配单词首字符 \\\u0026lt; 表示单词的开头。\necho \u0026#39;app cat\u0026#39; | gawk \u0026#39;{ gsub(/\\\u0026lt;[a-z]/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\r[a]pp [c]at\r匹配单词尾字符 \\\u0026gt; 表示单词的结尾。\necho \u0026#39;app cat\u0026#39; | gawk \u0026#39;{ gsub(/[a-z]\\\u0026gt;/, \u0026#34;[\u0026amp;]\u0026#34;); print }\u0026#39;\rap[p] ca[t]\rgensub General Substitution，通用替换。\n比 sub 和 gsub 强大。 支持捕获组（Capture Groups）。 可选择替换特定匹配项。 不原地修改，返回替换后的字符串。 sub 和 gsub 不支持捕获组。 基本语法 gensub(regex, replacement, how [, target])\rregex：匹配的正则表达式。 replacement：替换字符串，可用捕获组。 how：可指定全局或第 N 次匹配替换。 target：可选，目标字符串，默认 $0。 基础用法 使用 g 全局替换。\necho \u0026#34;aa aa aa\u0026#34; | gawk \u0026#39;{ print gensub(/aa/, \u0026#34;bb\u0026#34;, \u0026#34;g\u0026#34;) }\u0026#39;\rbb bb bb\r替换第 2 个匹配项。\necho \u0026#34;aa aa aa\u0026#34; | gawk \u0026#39;{ print gensub(/aa/, \u0026#34;bb\u0026#34;, \u0026#34;2\u0026#34;) }\u0026#39;\raa bb aa\r使用捕获组 \\1 表示第一个匹配参数。\necho \u0026#34;aa-bb\u0026#34; | gawk \u0026#39;{ print gensub(/(\\w+)-(\\w+)/, \u0026#34;\\\\2:\\\\1\u0026#34;, \u0026#34;g\u0026#34;)}\u0026#39;\rbb:aa\r","date":"2024-09-05","id":57,"permalink":"/zh-cn/linux/text/gawk-2/","summary":"\u003ch2 id=\"正则匹配\"\u003e正则匹配\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egawk\u003c/code\u003e 默认使用 ERE 模式。\u003c/p\u003e\n\u003ch3 id=\"基础用法\"\u003e基础用法\u003c/h3\u003e\n\u003cp\u003e首先创建 \u003ccode\u003efoo\u003c/code\u003e 文本文件。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF \u0026gt; foo\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003ea1,a2,a3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eb1,b2,b3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egawk -F, \u003cspan class=\"s1\"\u003e\u0026#39;/1,a/{ print $1 }\u0026#39;\u003c/span\u003e foo\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ea1\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e这里是用\u003cstrong\u003e整行\u003c/strong\u003e去匹配的，等价于 \u003ccode\u003e$0\u003c/code\u003e。\u003c/p\u003e","tags":[],"title":"GAWK 命令 - 2"},{"content":"hassle-free 无麻烦的，省心的。\nGo compiles to a single, static binary with minimal runtime dependencies, making deployment straightforward and hassle-free. syntactic sugar 语法糖。obscure =\u0026gt; 模糊/掩盖。\nRuby’s principle of “programmer happiness” sometimes results in syntactic sugar that may feel elegant to some but can obscure the inner workings of the code.\rheader section 头部信息。\nThe header section of the top command provides a snapshot of the overall system performance.\rreclaim 回收。\nThe available memory (avail Mem) includes both free RAM and memory that can be reclaimed from buffers and cache.\rparentheses 括号 ()。\nSubshells are usually created using parentheses (), command substitution $(...), or background execution.\rinvoke 唤起、调用、执行。下面是 Bash 环境变量相关的解释。\nWhen a program is invoked it is given an array of strings called the environment.\rexpands to 展开为，发展为，代表。这翻译怪怪的。\n($$) Expands to the process ID of the shell. In a subshell, it expands to the process ID of the invoking shell, not the subshell.\rskeletal 骨骼的，类似于脚手架。\nThe SKEL variable specifies the directory containing \u0026#34;skeletal\u0026#34; user files; in other words, files such as a sample .profile that will be copied to the new user\u0026#39;s home directory when it is created.\rhyphen 连字符。\n- (Hyphen): Represents a regular file. This is the most common file type, typically used for text files, binary files, or other standard files.\r","date":"2024-08-29","id":58,"permalink":"/zh-cn/linux/appendix/term-1/","summary":"\u003ch2 id=\"hassle-free\"\u003ehassle-free\u003c/h2\u003e\n\u003cp\u003e无麻烦的，省心的。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\" text-wrap=\"wrap\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eGo compiles to a single, static binary with minimal runtime dependencies, making deployment straightforward and hassle-free. \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"syntactic-sugar\"\u003esyntactic sugar\u003c/h2\u003e\n\u003cp\u003e语法糖。\u003ccode\u003eobscure\u003c/code\u003e =\u0026gt; 模糊/掩盖。\u003c/p\u003e","tags":[],"title":"专业术语 - 1"},{"content":"","date":"2024-10-03","id":59,"permalink":"/zh-cn/tech/","summary":"","tags":[],"title":"技术"},{"content":"","date":"2024-10-03","id":60,"permalink":"/zh-cn/tech/fourd-pocket/","summary":"","tags":[],"title":"四次元百宝袋"},{"content":"","date":"2024-10-01","id":61,"permalink":"/zh-cn/","summary":"","tags":[],"title":"MINI-ROCKS"},{"content":"","date":"2024-09-30","id":62,"permalink":"/zh-cn/toys/","summary":"","tags":[],"title":"玩具"},{"content":"","date":"2024-09-08","id":63,"permalink":"/zh-cn/tech/cursor/","summary":"","tags":[],"title":"Cursor"},{"content":"","date":"2024-09-05","id":64,"permalink":"/zh-cn/linux/","summary":"","tags":[],"title":"Linux"},{"content":"","date":"2024-09-05","id":65,"permalink":"/zh-cn/linux/text/","summary":"","tags":[],"title":"文本处理"},{"content":"","date":"2024-09-02","id":66,"permalink":"/zh-cn/linux/script/","summary":"","tags":[],"title":"脚本"},{"content":"","date":"2024-09-01","id":67,"permalink":"/zh-cn/linux/proc/","summary":"","tags":[],"title":"进程"},{"content":"","date":"2024-08-29","id":68,"permalink":"/zh-cn/linux/appendix/","summary":"","tags":[],"title":"附录"},{"content":"","date":"2024-08-29","id":69,"permalink":"/zh-cn/linux/perm/","summary":"","tags":[],"title":"权限管理"},{"content":"","date":"2024-08-27","id":70,"permalink":"/zh-cn/linux/shell/","summary":"","tags":[],"title":"Shell"},{"content":"","date":"2024-08-27","id":71,"permalink":"/zh-cn/linux/env/","summary":"","tags":[],"title":"环境变量"},{"content":"","date":"2024-08-24","id":72,"permalink":"/zh-cn/linux/cmd/","summary":"","tags":[],"title":"命令"},{"content":"","date":"2024-07-24","id":73,"permalink":"/zh-cn/tech/dev-env/","summary":"","tags":[],"title":"开发环境"},{"content":"","date":"0001-01-01","id":74,"permalink":"/zh-cn/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":75,"permalink":"/zh-cn/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":76,"permalink":"/zh-cn/tags/","summary":"","tags":[],"title":"Tags"},{"content":" KEY VALUE 大学 华南农业大学 专业 软件工程 喜欢 开源 工作经历 115网盘/酷狗/BIGO/趣丸 编程语言 Golang/Python/PHP 最近 Cursor 联系我 小红书: @kugarocks GitHub: @kugarocks ","date":"0001-01-01","id":77,"permalink":"/zh-cn/about/","summary":"\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eKEY\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eVALUE\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e大学\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e华南农业大学\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e专业\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e软件工程\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e喜欢\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e开源\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e工作经历\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e115网盘/酷狗/BIGO/趣丸\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e编程语言\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGolang/Python/PHP\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e最近\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCursor\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"联系我\"\u003e联系我\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e小红书: \u003ca href=\"https://www.xiaohongshu.com/user/profile/65683d68000000001c01b1e5\"\u003e@kugarocks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGitHub: \u003ca href=\"https://github.com/kugarocks\"\u003e@kugarocks\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","tags":[],"title":"关于我"}]